// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_router_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_router_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_router_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_router_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_router_2eproto;
namespace Serialization {
class Router;
struct RouterDefaultTypeInternal;
extern RouterDefaultTypeInternal _Router_default_instance_;
class RoutesInternalData;
struct RoutesInternalDataDefaultTypeInternal;
extern RoutesInternalDataDefaultTypeInternal _RoutesInternalData_default_instance_;
class VectorRoutesInternalData;
struct VectorRoutesInternalDataDefaultTypeInternal;
extern VectorRoutesInternalDataDefaultTypeInternal _VectorRoutesInternalData_default_instance_;
}  // namespace Serialization
PROTOBUF_NAMESPACE_OPEN
template<> ::Serialization::Router* Arena::CreateMaybeMessage<::Serialization::Router>(Arena*);
template<> ::Serialization::RoutesInternalData* Arena::CreateMaybeMessage<::Serialization::RoutesInternalData>(Arena*);
template<> ::Serialization::VectorRoutesInternalData* Arena::CreateMaybeMessage<::Serialization::VectorRoutesInternalData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Serialization {

// ===================================================================

class RoutesInternalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.RoutesInternalData) */ {
 public:
  inline RoutesInternalData() : RoutesInternalData(nullptr) {}
  ~RoutesInternalData() override;
  explicit constexpr RoutesInternalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutesInternalData(const RoutesInternalData& from);
  RoutesInternalData(RoutesInternalData&& from) noexcept
    : RoutesInternalData() {
    *this = ::std::move(from);
  }

  inline RoutesInternalData& operator=(const RoutesInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutesInternalData& operator=(RoutesInternalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutesInternalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutesInternalData* internal_default_instance() {
    return reinterpret_cast<const RoutesInternalData*>(
               &_RoutesInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoutesInternalData& a, RoutesInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutesInternalData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutesInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutesInternalData* New() const final {
    return new RoutesInternalData();
  }

  RoutesInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutesInternalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutesInternalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoutesInternalData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutesInternalData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.RoutesInternalData";
  }
  protected:
  explicit RoutesInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 2,
    kExistsFieldNumber = 1,
    kHasPrevEdgeFieldNumber = 3,
    kPrevEdgeFieldNumber = 4,
  };
  // double weight = 2;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // bool exists = 1;
  void clear_exists();
  bool exists() const;
  void set_exists(bool value);
  private:
  bool _internal_exists() const;
  void _internal_set_exists(bool value);
  public:

  // bool hasPrevEdge = 3;
  void clear_hasprevedge();
  bool hasprevedge() const;
  void set_hasprevedge(bool value);
  private:
  bool _internal_hasprevedge() const;
  void _internal_set_hasprevedge(bool value);
  public:

  // uint32 prevEdge = 4;
  void clear_prevedge();
  ::PROTOBUF_NAMESPACE_ID::uint32 prevedge() const;
  void set_prevedge(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prevedge() const;
  void _internal_set_prevedge(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Serialization.RoutesInternalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double weight_;
  bool exists_;
  bool hasprevedge_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prevedge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class VectorRoutesInternalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.VectorRoutesInternalData) */ {
 public:
  inline VectorRoutesInternalData() : VectorRoutesInternalData(nullptr) {}
  ~VectorRoutesInternalData() override;
  explicit constexpr VectorRoutesInternalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorRoutesInternalData(const VectorRoutesInternalData& from);
  VectorRoutesInternalData(VectorRoutesInternalData&& from) noexcept
    : VectorRoutesInternalData() {
    *this = ::std::move(from);
  }

  inline VectorRoutesInternalData& operator=(const VectorRoutesInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorRoutesInternalData& operator=(VectorRoutesInternalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorRoutesInternalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorRoutesInternalData* internal_default_instance() {
    return reinterpret_cast<const VectorRoutesInternalData*>(
               &_VectorRoutesInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VectorRoutesInternalData& a, VectorRoutesInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorRoutesInternalData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorRoutesInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorRoutesInternalData* New() const final {
    return new VectorRoutesInternalData();
  }

  VectorRoutesInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorRoutesInternalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorRoutesInternalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VectorRoutesInternalData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorRoutesInternalData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.VectorRoutesInternalData";
  }
  protected:
  explicit VectorRoutesInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesInternalDataFieldNumber = 1,
  };
  // repeated .Serialization.RoutesInternalData routesInternalData = 1;
  int routesinternaldata_size() const;
  private:
  int _internal_routesinternaldata_size() const;
  public:
  void clear_routesinternaldata();
  ::Serialization::RoutesInternalData* mutable_routesinternaldata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::RoutesInternalData >*
      mutable_routesinternaldata();
  private:
  const ::Serialization::RoutesInternalData& _internal_routesinternaldata(int index) const;
  ::Serialization::RoutesInternalData* _internal_add_routesinternaldata();
  public:
  const ::Serialization::RoutesInternalData& routesinternaldata(int index) const;
  ::Serialization::RoutesInternalData* add_routesinternaldata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::RoutesInternalData >&
      routesinternaldata() const;

  // @@protoc_insertion_point(class_scope:Serialization.VectorRoutesInternalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::RoutesInternalData > routesinternaldata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class Router final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.Router) */ {
 public:
  inline Router() : Router(nullptr) {}
  ~Router() override;
  explicit constexpr Router(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Router(const Router& from);
  Router(Router&& from) noexcept
    : Router() {
    *this = ::std::move(from);
  }

  inline Router& operator=(const Router& from) {
    CopyFrom(from);
    return *this;
  }
  inline Router& operator=(Router&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Router& default_instance() {
    return *internal_default_instance();
  }
  static inline const Router* internal_default_instance() {
    return reinterpret_cast<const Router*>(
               &_Router_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Router& a, Router& b) {
    a.Swap(&b);
  }
  inline void Swap(Router* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Router* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Router* New() const final {
    return new Router();
  }

  Router* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Router>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Router& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Router& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Router* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.Router";
  }
  protected:
  explicit Router(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorRoutesInternalDataFieldNumber = 1,
  };
  // repeated .Serialization.VectorRoutesInternalData vectorRoutesInternalData = 1;
  int vectorroutesinternaldata_size() const;
  private:
  int _internal_vectorroutesinternaldata_size() const;
  public:
  void clear_vectorroutesinternaldata();
  ::Serialization::VectorRoutesInternalData* mutable_vectorroutesinternaldata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::VectorRoutesInternalData >*
      mutable_vectorroutesinternaldata();
  private:
  const ::Serialization::VectorRoutesInternalData& _internal_vectorroutesinternaldata(int index) const;
  ::Serialization::VectorRoutesInternalData* _internal_add_vectorroutesinternaldata();
  public:
  const ::Serialization::VectorRoutesInternalData& vectorroutesinternaldata(int index) const;
  ::Serialization::VectorRoutesInternalData* add_vectorroutesinternaldata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::VectorRoutesInternalData >&
      vectorroutesinternaldata() const;

  // @@protoc_insertion_point(class_scope:Serialization.Router)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::VectorRoutesInternalData > vectorroutesinternaldata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoutesInternalData

// bool exists = 1;
inline void RoutesInternalData::clear_exists() {
  exists_ = false;
}
inline bool RoutesInternalData::_internal_exists() const {
  return exists_;
}
inline bool RoutesInternalData::exists() const {
  // @@protoc_insertion_point(field_get:Serialization.RoutesInternalData.exists)
  return _internal_exists();
}
inline void RoutesInternalData::_internal_set_exists(bool value) {
  
  exists_ = value;
}
inline void RoutesInternalData::set_exists(bool value) {
  _internal_set_exists(value);
  // @@protoc_insertion_point(field_set:Serialization.RoutesInternalData.exists)
}

// double weight = 2;
inline void RoutesInternalData::clear_weight() {
  weight_ = 0;
}
inline double RoutesInternalData::_internal_weight() const {
  return weight_;
}
inline double RoutesInternalData::weight() const {
  // @@protoc_insertion_point(field_get:Serialization.RoutesInternalData.weight)
  return _internal_weight();
}
inline void RoutesInternalData::_internal_set_weight(double value) {
  
  weight_ = value;
}
inline void RoutesInternalData::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:Serialization.RoutesInternalData.weight)
}

// bool hasPrevEdge = 3;
inline void RoutesInternalData::clear_hasprevedge() {
  hasprevedge_ = false;
}
inline bool RoutesInternalData::_internal_hasprevedge() const {
  return hasprevedge_;
}
inline bool RoutesInternalData::hasprevedge() const {
  // @@protoc_insertion_point(field_get:Serialization.RoutesInternalData.hasPrevEdge)
  return _internal_hasprevedge();
}
inline void RoutesInternalData::_internal_set_hasprevedge(bool value) {
  
  hasprevedge_ = value;
}
inline void RoutesInternalData::set_hasprevedge(bool value) {
  _internal_set_hasprevedge(value);
  // @@protoc_insertion_point(field_set:Serialization.RoutesInternalData.hasPrevEdge)
}

// uint32 prevEdge = 4;
inline void RoutesInternalData::clear_prevedge() {
  prevedge_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutesInternalData::_internal_prevedge() const {
  return prevedge_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutesInternalData::prevedge() const {
  // @@protoc_insertion_point(field_get:Serialization.RoutesInternalData.prevEdge)
  return _internal_prevedge();
}
inline void RoutesInternalData::_internal_set_prevedge(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prevedge_ = value;
}
inline void RoutesInternalData::set_prevedge(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prevedge(value);
  // @@protoc_insertion_point(field_set:Serialization.RoutesInternalData.prevEdge)
}

// -------------------------------------------------------------------

// VectorRoutesInternalData

// repeated .Serialization.RoutesInternalData routesInternalData = 1;
inline int VectorRoutesInternalData::_internal_routesinternaldata_size() const {
  return routesinternaldata_.size();
}
inline int VectorRoutesInternalData::routesinternaldata_size() const {
  return _internal_routesinternaldata_size();
}
inline void VectorRoutesInternalData::clear_routesinternaldata() {
  routesinternaldata_.Clear();
}
inline ::Serialization::RoutesInternalData* VectorRoutesInternalData::mutable_routesinternaldata(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.VectorRoutesInternalData.routesInternalData)
  return routesinternaldata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::RoutesInternalData >*
VectorRoutesInternalData::mutable_routesinternaldata() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.VectorRoutesInternalData.routesInternalData)
  return &routesinternaldata_;
}
inline const ::Serialization::RoutesInternalData& VectorRoutesInternalData::_internal_routesinternaldata(int index) const {
  return routesinternaldata_.Get(index);
}
inline const ::Serialization::RoutesInternalData& VectorRoutesInternalData::routesinternaldata(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.VectorRoutesInternalData.routesInternalData)
  return _internal_routesinternaldata(index);
}
inline ::Serialization::RoutesInternalData* VectorRoutesInternalData::_internal_add_routesinternaldata() {
  return routesinternaldata_.Add();
}
inline ::Serialization::RoutesInternalData* VectorRoutesInternalData::add_routesinternaldata() {
  ::Serialization::RoutesInternalData* _add = _internal_add_routesinternaldata();
  // @@protoc_insertion_point(field_add:Serialization.VectorRoutesInternalData.routesInternalData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::RoutesInternalData >&
VectorRoutesInternalData::routesinternaldata() const {
  // @@protoc_insertion_point(field_list:Serialization.VectorRoutesInternalData.routesInternalData)
  return routesinternaldata_;
}

// -------------------------------------------------------------------

// Router

// repeated .Serialization.VectorRoutesInternalData vectorRoutesInternalData = 1;
inline int Router::_internal_vectorroutesinternaldata_size() const {
  return vectorroutesinternaldata_.size();
}
inline int Router::vectorroutesinternaldata_size() const {
  return _internal_vectorroutesinternaldata_size();
}
inline void Router::clear_vectorroutesinternaldata() {
  vectorroutesinternaldata_.Clear();
}
inline ::Serialization::VectorRoutesInternalData* Router::mutable_vectorroutesinternaldata(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.Router.vectorRoutesInternalData)
  return vectorroutesinternaldata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::VectorRoutesInternalData >*
Router::mutable_vectorroutesinternaldata() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.Router.vectorRoutesInternalData)
  return &vectorroutesinternaldata_;
}
inline const ::Serialization::VectorRoutesInternalData& Router::_internal_vectorroutesinternaldata(int index) const {
  return vectorroutesinternaldata_.Get(index);
}
inline const ::Serialization::VectorRoutesInternalData& Router::vectorroutesinternaldata(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.Router.vectorRoutesInternalData)
  return _internal_vectorroutesinternaldata(index);
}
inline ::Serialization::VectorRoutesInternalData* Router::_internal_add_vectorroutesinternaldata() {
  return vectorroutesinternaldata_.Add();
}
inline ::Serialization::VectorRoutesInternalData* Router::add_vectorroutesinternaldata() {
  ::Serialization::VectorRoutesInternalData* _add = _internal_add_vectorroutesinternaldata();
  // @@protoc_insertion_point(field_add:Serialization.Router.vectorRoutesInternalData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::VectorRoutesInternalData >&
Router::vectorroutesinternaldata() const {
  // @@protoc_insertion_point(field_list:Serialization.Router.vectorRoutesInternalData)
  return vectorroutesinternaldata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialization

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_router_2eproto
