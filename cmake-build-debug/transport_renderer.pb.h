// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_renderer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5frenderer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5frenderer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "svg.pb.h"
#include "company.pb.h"
#include "sphere.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5frenderer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5frenderer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frenderer_2eproto;
namespace Serialization {
class BusDescription;
struct BusDescriptionDefaultTypeInternal;
extern BusDescriptionDefaultTypeInternal _BusDescription_default_instance_;
class BusToColor;
struct BusToColorDefaultTypeInternal;
extern BusToColorDefaultTypeInternal _BusToColor_default_instance_;
class CompaniesDescription;
struct CompaniesDescriptionDefaultTypeInternal;
extern CompaniesDescriptionDefaultTypeInternal _CompaniesDescription_default_instance_;
class CompanyPosition;
struct CompanyPositionDefaultTypeInternal;
extern CompanyPositionDefaultTypeInternal _CompanyPosition_default_instance_;
class RenderProps;
struct RenderPropsDefaultTypeInternal;
extern RenderPropsDefaultTypeInternal _RenderProps_default_instance_;
class StopPosition;
struct StopPositionDefaultTypeInternal;
extern StopPositionDefaultTypeInternal _StopPosition_default_instance_;
class TransportRenderer;
struct TransportRendererDefaultTypeInternal;
extern TransportRendererDefaultTypeInternal _TransportRenderer_default_instance_;
}  // namespace Serialization
PROTOBUF_NAMESPACE_OPEN
template<> ::Serialization::BusDescription* Arena::CreateMaybeMessage<::Serialization::BusDescription>(Arena*);
template<> ::Serialization::BusToColor* Arena::CreateMaybeMessage<::Serialization::BusToColor>(Arena*);
template<> ::Serialization::CompaniesDescription* Arena::CreateMaybeMessage<::Serialization::CompaniesDescription>(Arena*);
template<> ::Serialization::CompanyPosition* Arena::CreateMaybeMessage<::Serialization::CompanyPosition>(Arena*);
template<> ::Serialization::RenderProps* Arena::CreateMaybeMessage<::Serialization::RenderProps>(Arena*);
template<> ::Serialization::StopPosition* Arena::CreateMaybeMessage<::Serialization::StopPosition>(Arena*);
template<> ::Serialization::TransportRenderer* Arena::CreateMaybeMessage<::Serialization::TransportRenderer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Serialization {

// ===================================================================

class RenderProps final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.RenderProps) */ {
 public:
  inline RenderProps() : RenderProps(nullptr) {}
  ~RenderProps() override;
  explicit constexpr RenderProps(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenderProps(const RenderProps& from);
  RenderProps(RenderProps&& from) noexcept
    : RenderProps() {
    *this = ::std::move(from);
  }

  inline RenderProps& operator=(const RenderProps& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderProps& operator=(RenderProps&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenderProps& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenderProps* internal_default_instance() {
    return reinterpret_cast<const RenderProps*>(
               &_RenderProps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RenderProps& a, RenderProps& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderProps* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderProps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenderProps* New() const final {
    return new RenderProps();
  }

  RenderProps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenderProps>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenderProps& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RenderProps& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderProps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.RenderProps";
  }
  protected:
  explicit RenderProps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorPaletteFieldNumber = 15,
    kLayersFieldNumber = 16,
    kStopLabelOffsetFieldNumber = 12,
    kBusLabelOffsetFieldNumber = 13,
    kUnderlayerColorFieldNumber = 14,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kPaddingFieldNumber = 3,
    kStopRadiusFieldNumber = 4,
    kLineWidthFieldNumber = 5,
    kOuterMarginFieldNumber = 6,
    kUnderlayerWidthFieldNumber = 7,
    kCompanyRadiusFieldNumber = 8,
    kCompanyLineWidthFieldNumber = 9,
    kStopLabelFontSizeFieldNumber = 10,
    kBusLabelFontSizeFieldNumber = 11,
  };
  // repeated .Serialization.Color colorPalette = 15;
  int colorpalette_size() const;
  private:
  int _internal_colorpalette_size() const;
  public:
  void clear_colorpalette();
  ::Serialization::Color* mutable_colorpalette(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::Color >*
      mutable_colorpalette();
  private:
  const ::Serialization::Color& _internal_colorpalette(int index) const;
  ::Serialization::Color* _internal_add_colorpalette();
  public:
  const ::Serialization::Color& colorpalette(int index) const;
  ::Serialization::Color* add_colorpalette();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::Color >&
      colorpalette() const;

  // repeated string layers = 16;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  const std::string& layers(int index) const;
  std::string* mutable_layers(int index);
  void set_layers(int index, const std::string& value);
  void set_layers(int index, std::string&& value);
  void set_layers(int index, const char* value);
  void set_layers(int index, const char* value, size_t size);
  std::string* add_layers();
  void add_layers(const std::string& value);
  void add_layers(std::string&& value);
  void add_layers(const char* value);
  void add_layers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& layers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_layers();
  private:
  const std::string& _internal_layers(int index) const;
  std::string* _internal_add_layers();
  public:

  // .Serialization.Point stopLabelOffset = 12;
  bool has_stoplabeloffset() const;
  private:
  bool _internal_has_stoplabeloffset() const;
  public:
  void clear_stoplabeloffset();
  const ::Serialization::Point& stoplabeloffset() const;
  PROTOBUF_MUST_USE_RESULT ::Serialization::Point* release_stoplabeloffset();
  ::Serialization::Point* mutable_stoplabeloffset();
  void set_allocated_stoplabeloffset(::Serialization::Point* stoplabeloffset);
  private:
  const ::Serialization::Point& _internal_stoplabeloffset() const;
  ::Serialization::Point* _internal_mutable_stoplabeloffset();
  public:
  void unsafe_arena_set_allocated_stoplabeloffset(
      ::Serialization::Point* stoplabeloffset);
  ::Serialization::Point* unsafe_arena_release_stoplabeloffset();

  // .Serialization.Point busLabelOffset = 13;
  bool has_buslabeloffset() const;
  private:
  bool _internal_has_buslabeloffset() const;
  public:
  void clear_buslabeloffset();
  const ::Serialization::Point& buslabeloffset() const;
  PROTOBUF_MUST_USE_RESULT ::Serialization::Point* release_buslabeloffset();
  ::Serialization::Point* mutable_buslabeloffset();
  void set_allocated_buslabeloffset(::Serialization::Point* buslabeloffset);
  private:
  const ::Serialization::Point& _internal_buslabeloffset() const;
  ::Serialization::Point* _internal_mutable_buslabeloffset();
  public:
  void unsafe_arena_set_allocated_buslabeloffset(
      ::Serialization::Point* buslabeloffset);
  ::Serialization::Point* unsafe_arena_release_buslabeloffset();

  // .Serialization.Color underlayerColor = 14;
  bool has_underlayercolor() const;
  private:
  bool _internal_has_underlayercolor() const;
  public:
  void clear_underlayercolor();
  const ::Serialization::Color& underlayercolor() const;
  PROTOBUF_MUST_USE_RESULT ::Serialization::Color* release_underlayercolor();
  ::Serialization::Color* mutable_underlayercolor();
  void set_allocated_underlayercolor(::Serialization::Color* underlayercolor);
  private:
  const ::Serialization::Color& _internal_underlayercolor() const;
  ::Serialization::Color* _internal_mutable_underlayercolor();
  public:
  void unsafe_arena_set_allocated_underlayercolor(
      ::Serialization::Color* underlayercolor);
  ::Serialization::Color* unsafe_arena_release_underlayercolor();

  // double width = 1;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 2;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double padding = 3;
  void clear_padding();
  double padding() const;
  void set_padding(double value);
  private:
  double _internal_padding() const;
  void _internal_set_padding(double value);
  public:

  // double stopRadius = 4;
  void clear_stopradius();
  double stopradius() const;
  void set_stopradius(double value);
  private:
  double _internal_stopradius() const;
  void _internal_set_stopradius(double value);
  public:

  // double lineWidth = 5;
  void clear_linewidth();
  double linewidth() const;
  void set_linewidth(double value);
  private:
  double _internal_linewidth() const;
  void _internal_set_linewidth(double value);
  public:

  // double outerMargin = 6;
  void clear_outermargin();
  double outermargin() const;
  void set_outermargin(double value);
  private:
  double _internal_outermargin() const;
  void _internal_set_outermargin(double value);
  public:

  // double underlayerWidth = 7;
  void clear_underlayerwidth();
  double underlayerwidth() const;
  void set_underlayerwidth(double value);
  private:
  double _internal_underlayerwidth() const;
  void _internal_set_underlayerwidth(double value);
  public:

  // double companyRadius = 8;
  void clear_companyradius();
  double companyradius() const;
  void set_companyradius(double value);
  private:
  double _internal_companyradius() const;
  void _internal_set_companyradius(double value);
  public:

  // double companyLineWidth = 9;
  void clear_companylinewidth();
  double companylinewidth() const;
  void set_companylinewidth(double value);
  private:
  double _internal_companylinewidth() const;
  void _internal_set_companylinewidth(double value);
  public:

  // int32 stopLabelFontSize = 10;
  void clear_stoplabelfontsize();
  ::PROTOBUF_NAMESPACE_ID::int32 stoplabelfontsize() const;
  void set_stoplabelfontsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stoplabelfontsize() const;
  void _internal_set_stoplabelfontsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 busLabelFontSize = 11;
  void clear_buslabelfontsize();
  ::PROTOBUF_NAMESPACE_ID::int32 buslabelfontsize() const;
  void set_buslabelfontsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buslabelfontsize() const;
  void _internal_set_buslabelfontsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Serialization.RenderProps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::Color > colorpalette_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> layers_;
  ::Serialization::Point* stoplabeloffset_;
  ::Serialization::Point* buslabeloffset_;
  ::Serialization::Color* underlayercolor_;
  double width_;
  double height_;
  double padding_;
  double stopradius_;
  double linewidth_;
  double outermargin_;
  double underlayerwidth_;
  double companyradius_;
  double companylinewidth_;
  ::PROTOBUF_NAMESPACE_ID::int32 stoplabelfontsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 buslabelfontsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class BusDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.BusDescription) */ {
 public:
  inline BusDescription() : BusDescription(nullptr) {}
  ~BusDescription() override;
  explicit constexpr BusDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusDescription(const BusDescription& from);
  BusDescription(BusDescription&& from) noexcept
    : BusDescription() {
    *this = ::std::move(from);
  }

  inline BusDescription& operator=(const BusDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusDescription& operator=(BusDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusDescription* internal_default_instance() {
    return reinterpret_cast<const BusDescription*>(
               &_BusDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BusDescription& a, BusDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(BusDescription* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusDescription* New() const final {
    return new BusDescription();
  }

  BusDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BusDescription& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.BusDescription";
  }
  protected:
  explicit BusDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 2,
    kEndStopsFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated string stops = 2;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  const std::string& stops(int index) const;
  std::string* mutable_stops(int index);
  void set_stops(int index, const std::string& value);
  void set_stops(int index, std::string&& value);
  void set_stops(int index, const char* value);
  void set_stops(int index, const char* value, size_t size);
  std::string* add_stops();
  void add_stops(const std::string& value);
  void add_stops(std::string&& value);
  void add_stops(const char* value);
  void add_stops(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stops();
  private:
  const std::string& _internal_stops(int index) const;
  std::string* _internal_add_stops();
  public:

  // repeated string endStops = 3;
  int endstops_size() const;
  private:
  int _internal_endstops_size() const;
  public:
  void clear_endstops();
  const std::string& endstops(int index) const;
  std::string* mutable_endstops(int index);
  void set_endstops(int index, const std::string& value);
  void set_endstops(int index, std::string&& value);
  void set_endstops(int index, const char* value);
  void set_endstops(int index, const char* value, size_t size);
  std::string* add_endstops();
  void add_endstops(const std::string& value);
  void add_endstops(std::string&& value);
  void add_endstops(const char* value);
  void add_endstops(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& endstops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_endstops();
  private:
  const std::string& _internal_endstops(int index) const;
  std::string* _internal_add_endstops();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Serialization.BusDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> endstops_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class CompaniesDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.CompaniesDescription) */ {
 public:
  inline CompaniesDescription() : CompaniesDescription(nullptr) {}
  ~CompaniesDescription() override;
  explicit constexpr CompaniesDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompaniesDescription(const CompaniesDescription& from);
  CompaniesDescription(CompaniesDescription&& from) noexcept
    : CompaniesDescription() {
    *this = ::std::move(from);
  }

  inline CompaniesDescription& operator=(const CompaniesDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompaniesDescription& operator=(CompaniesDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompaniesDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompaniesDescription* internal_default_instance() {
    return reinterpret_cast<const CompaniesDescription*>(
               &_CompaniesDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CompaniesDescription& a, CompaniesDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(CompaniesDescription* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompaniesDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompaniesDescription* New() const final {
    return new CompaniesDescription();
  }

  CompaniesDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompaniesDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompaniesDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CompaniesDescription& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompaniesDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.CompaniesDescription";
  }
  protected:
  explicit CompaniesDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNearbyStopsFieldNumber = 3,
    kMainNameFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kCoordsFieldNumber = 4,
  };
  // repeated .YellowPages.NearbyStop nearbyStops = 3;
  int nearbystops_size() const;
  private:
  int _internal_nearbystops_size() const;
  public:
  void clear_nearbystops();
  ::YellowPages::NearbyStop* mutable_nearbystops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YellowPages::NearbyStop >*
      mutable_nearbystops();
  private:
  const ::YellowPages::NearbyStop& _internal_nearbystops(int index) const;
  ::YellowPages::NearbyStop* _internal_add_nearbystops();
  public:
  const ::YellowPages::NearbyStop& nearbystops(int index) const;
  ::YellowPages::NearbyStop* add_nearbystops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YellowPages::NearbyStop >&
      nearbystops() const;

  // string mainName = 1;
  void clear_mainname();
  const std::string& mainname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mainname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mainname();
  PROTOBUF_MUST_USE_RESULT std::string* release_mainname();
  void set_allocated_mainname(std::string* mainname);
  private:
  const std::string& _internal_mainname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mainname(const std::string& value);
  std::string* _internal_mutable_mainname();
  public:

  // string displayName = 2;
  void clear_displayname();
  const std::string& displayname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_displayname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_displayname();
  PROTOBUF_MUST_USE_RESULT std::string* release_displayname();
  void set_allocated_displayname(std::string* displayname);
  private:
  const std::string& _internal_displayname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_displayname(const std::string& value);
  std::string* _internal_mutable_displayname();
  public:

  // .SphereProto.Coords coords = 4;
  bool has_coords() const;
  private:
  bool _internal_has_coords() const;
  public:
  void clear_coords();
  const ::SphereProto::Coords& coords() const;
  PROTOBUF_MUST_USE_RESULT ::SphereProto::Coords* release_coords();
  ::SphereProto::Coords* mutable_coords();
  void set_allocated_coords(::SphereProto::Coords* coords);
  private:
  const ::SphereProto::Coords& _internal_coords() const;
  ::SphereProto::Coords* _internal_mutable_coords();
  public:
  void unsafe_arena_set_allocated_coords(
      ::SphereProto::Coords* coords);
  ::SphereProto::Coords* unsafe_arena_release_coords();

  // @@protoc_insertion_point(class_scope:Serialization.CompaniesDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YellowPages::NearbyStop > nearbystops_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayname_;
  ::SphereProto::Coords* coords_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class BusToColor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.BusToColor) */ {
 public:
  inline BusToColor() : BusToColor(nullptr) {}
  ~BusToColor() override;
  explicit constexpr BusToColor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusToColor(const BusToColor& from);
  BusToColor(BusToColor&& from) noexcept
    : BusToColor() {
    *this = ::std::move(from);
  }

  inline BusToColor& operator=(const BusToColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusToColor& operator=(BusToColor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusToColor& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusToColor* internal_default_instance() {
    return reinterpret_cast<const BusToColor*>(
               &_BusToColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BusToColor& a, BusToColor& b) {
    a.Swap(&b);
  }
  inline void Swap(BusToColor* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusToColor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusToColor* New() const final {
    return new BusToColor();
  }

  BusToColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusToColor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusToColor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BusToColor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusToColor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.BusToColor";
  }
  protected:
  explicit BusToColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusNameFieldNumber = 1,
    kBusColorFieldNumber = 2,
  };
  // string busName = 1;
  void clear_busname();
  const std::string& busname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_busname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_busname();
  PROTOBUF_MUST_USE_RESULT std::string* release_busname();
  void set_allocated_busname(std::string* busname);
  private:
  const std::string& _internal_busname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_busname(const std::string& value);
  std::string* _internal_mutable_busname();
  public:

  // .Serialization.Color busColor = 2;
  bool has_buscolor() const;
  private:
  bool _internal_has_buscolor() const;
  public:
  void clear_buscolor();
  const ::Serialization::Color& buscolor() const;
  PROTOBUF_MUST_USE_RESULT ::Serialization::Color* release_buscolor();
  ::Serialization::Color* mutable_buscolor();
  void set_allocated_buscolor(::Serialization::Color* buscolor);
  private:
  const ::Serialization::Color& _internal_buscolor() const;
  ::Serialization::Color* _internal_mutable_buscolor();
  public:
  void unsafe_arena_set_allocated_buscolor(
      ::Serialization::Color* buscolor);
  ::Serialization::Color* unsafe_arena_release_buscolor();

  // @@protoc_insertion_point(class_scope:Serialization.BusToColor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr busname_;
  ::Serialization::Color* buscolor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class StopPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.StopPosition) */ {
 public:
  inline StopPosition() : StopPosition(nullptr) {}
  ~StopPosition() override;
  explicit constexpr StopPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopPosition(const StopPosition& from);
  StopPosition(StopPosition&& from) noexcept
    : StopPosition() {
    *this = ::std::move(from);
  }

  inline StopPosition& operator=(const StopPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopPosition& operator=(StopPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopPosition* internal_default_instance() {
    return reinterpret_cast<const StopPosition*>(
               &_StopPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StopPosition& a, StopPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(StopPosition* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopPosition* New() const final {
    return new StopPosition();
  }

  StopPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopPosition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.StopPosition";
  }
  protected:
  explicit StopPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopNameFieldNumber = 1,
    kStopPositionFieldNumber = 2,
  };
  // string stopName = 1;
  void clear_stopname();
  const std::string& stopname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stopname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stopname();
  PROTOBUF_MUST_USE_RESULT std::string* release_stopname();
  void set_allocated_stopname(std::string* stopname);
  private:
  const std::string& _internal_stopname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stopname(const std::string& value);
  std::string* _internal_mutable_stopname();
  public:

  // .Serialization.Point stopPosition = 2;
  bool has_stopposition() const;
  private:
  bool _internal_has_stopposition() const;
  public:
  void clear_stopposition();
  const ::Serialization::Point& stopposition() const;
  PROTOBUF_MUST_USE_RESULT ::Serialization::Point* release_stopposition();
  ::Serialization::Point* mutable_stopposition();
  void set_allocated_stopposition(::Serialization::Point* stopposition);
  private:
  const ::Serialization::Point& _internal_stopposition() const;
  ::Serialization::Point* _internal_mutable_stopposition();
  public:
  void unsafe_arena_set_allocated_stopposition(
      ::Serialization::Point* stopposition);
  ::Serialization::Point* unsafe_arena_release_stopposition();

  // @@protoc_insertion_point(class_scope:Serialization.StopPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stopname_;
  ::Serialization::Point* stopposition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class CompanyPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.CompanyPosition) */ {
 public:
  inline CompanyPosition() : CompanyPosition(nullptr) {}
  ~CompanyPosition() override;
  explicit constexpr CompanyPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompanyPosition(const CompanyPosition& from);
  CompanyPosition(CompanyPosition&& from) noexcept
    : CompanyPosition() {
    *this = ::std::move(from);
  }

  inline CompanyPosition& operator=(const CompanyPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompanyPosition& operator=(CompanyPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompanyPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompanyPosition* internal_default_instance() {
    return reinterpret_cast<const CompanyPosition*>(
               &_CompanyPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CompanyPosition& a, CompanyPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(CompanyPosition* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompanyPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompanyPosition* New() const final {
    return new CompanyPosition();
  }

  CompanyPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompanyPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompanyPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CompanyPosition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompanyPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.CompanyPosition";
  }
  protected:
  explicit CompanyPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompanyNameFieldNumber = 1,
    kCompanyPositionFieldNumber = 2,
  };
  // string companyName = 1;
  void clear_companyname();
  const std::string& companyname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_companyname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_companyname();
  PROTOBUF_MUST_USE_RESULT std::string* release_companyname();
  void set_allocated_companyname(std::string* companyname);
  private:
  const std::string& _internal_companyname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_companyname(const std::string& value);
  std::string* _internal_mutable_companyname();
  public:

  // .Serialization.Point companyPosition = 2;
  bool has_companyposition() const;
  private:
  bool _internal_has_companyposition() const;
  public:
  void clear_companyposition();
  const ::Serialization::Point& companyposition() const;
  PROTOBUF_MUST_USE_RESULT ::Serialization::Point* release_companyposition();
  ::Serialization::Point* mutable_companyposition();
  void set_allocated_companyposition(::Serialization::Point* companyposition);
  private:
  const ::Serialization::Point& _internal_companyposition() const;
  ::Serialization::Point* _internal_mutable_companyposition();
  public:
  void unsafe_arena_set_allocated_companyposition(
      ::Serialization::Point* companyposition);
  ::Serialization::Point* unsafe_arena_release_companyposition();

  // @@protoc_insertion_point(class_scope:Serialization.CompanyPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr companyname_;
  ::Serialization::Point* companyposition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class TransportRenderer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.TransportRenderer) */ {
 public:
  inline TransportRenderer() : TransportRenderer(nullptr) {}
  ~TransportRenderer() override;
  explicit constexpr TransportRenderer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportRenderer(const TransportRenderer& from);
  TransportRenderer(TransportRenderer&& from) noexcept
    : TransportRenderer() {
    *this = ::std::move(from);
  }

  inline TransportRenderer& operator=(const TransportRenderer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportRenderer& operator=(TransportRenderer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportRenderer& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportRenderer* internal_default_instance() {
    return reinterpret_cast<const TransportRenderer*>(
               &_TransportRenderer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TransportRenderer& a, TransportRenderer& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportRenderer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportRenderer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportRenderer* New() const final {
    return new TransportRenderer();
  }

  TransportRenderer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportRenderer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportRenderer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransportRenderer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportRenderer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.TransportRenderer";
  }
  protected:
  explicit TransportRenderer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusesDictFieldNumber = 2,
    kStopPositionsFieldNumber = 3,
    kBusColorsFieldNumber = 4,
    kCompaniesDescriptionFieldNumber = 5,
    kCompaniesPositionsFieldNumber = 6,
    kRenderPropsFieldNumber = 1,
  };
  // repeated .Serialization.BusDescription busesDict = 2;
  int busesdict_size() const;
  private:
  int _internal_busesdict_size() const;
  public:
  void clear_busesdict();
  ::Serialization::BusDescription* mutable_busesdict(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::BusDescription >*
      mutable_busesdict();
  private:
  const ::Serialization::BusDescription& _internal_busesdict(int index) const;
  ::Serialization::BusDescription* _internal_add_busesdict();
  public:
  const ::Serialization::BusDescription& busesdict(int index) const;
  ::Serialization::BusDescription* add_busesdict();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::BusDescription >&
      busesdict() const;

  // repeated .Serialization.StopPosition stopPositions = 3;
  int stoppositions_size() const;
  private:
  int _internal_stoppositions_size() const;
  public:
  void clear_stoppositions();
  ::Serialization::StopPosition* mutable_stoppositions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::StopPosition >*
      mutable_stoppositions();
  private:
  const ::Serialization::StopPosition& _internal_stoppositions(int index) const;
  ::Serialization::StopPosition* _internal_add_stoppositions();
  public:
  const ::Serialization::StopPosition& stoppositions(int index) const;
  ::Serialization::StopPosition* add_stoppositions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::StopPosition >&
      stoppositions() const;

  // repeated .Serialization.BusToColor busColors = 4;
  int buscolors_size() const;
  private:
  int _internal_buscolors_size() const;
  public:
  void clear_buscolors();
  ::Serialization::BusToColor* mutable_buscolors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::BusToColor >*
      mutable_buscolors();
  private:
  const ::Serialization::BusToColor& _internal_buscolors(int index) const;
  ::Serialization::BusToColor* _internal_add_buscolors();
  public:
  const ::Serialization::BusToColor& buscolors(int index) const;
  ::Serialization::BusToColor* add_buscolors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::BusToColor >&
      buscolors() const;

  // repeated .Serialization.CompaniesDescription companiesDescription = 5;
  int companiesdescription_size() const;
  private:
  int _internal_companiesdescription_size() const;
  public:
  void clear_companiesdescription();
  ::Serialization::CompaniesDescription* mutable_companiesdescription(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::CompaniesDescription >*
      mutable_companiesdescription();
  private:
  const ::Serialization::CompaniesDescription& _internal_companiesdescription(int index) const;
  ::Serialization::CompaniesDescription* _internal_add_companiesdescription();
  public:
  const ::Serialization::CompaniesDescription& companiesdescription(int index) const;
  ::Serialization::CompaniesDescription* add_companiesdescription();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::CompaniesDescription >&
      companiesdescription() const;

  // repeated .Serialization.CompanyPosition companiesPositions = 6;
  int companiespositions_size() const;
  private:
  int _internal_companiespositions_size() const;
  public:
  void clear_companiespositions();
  ::Serialization::CompanyPosition* mutable_companiespositions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::CompanyPosition >*
      mutable_companiespositions();
  private:
  const ::Serialization::CompanyPosition& _internal_companiespositions(int index) const;
  ::Serialization::CompanyPosition* _internal_add_companiespositions();
  public:
  const ::Serialization::CompanyPosition& companiespositions(int index) const;
  ::Serialization::CompanyPosition* add_companiespositions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::CompanyPosition >&
      companiespositions() const;

  // .Serialization.RenderProps renderProps = 1;
  bool has_renderprops() const;
  private:
  bool _internal_has_renderprops() const;
  public:
  void clear_renderprops();
  const ::Serialization::RenderProps& renderprops() const;
  PROTOBUF_MUST_USE_RESULT ::Serialization::RenderProps* release_renderprops();
  ::Serialization::RenderProps* mutable_renderprops();
  void set_allocated_renderprops(::Serialization::RenderProps* renderprops);
  private:
  const ::Serialization::RenderProps& _internal_renderprops() const;
  ::Serialization::RenderProps* _internal_mutable_renderprops();
  public:
  void unsafe_arena_set_allocated_renderprops(
      ::Serialization::RenderProps* renderprops);
  ::Serialization::RenderProps* unsafe_arena_release_renderprops();

  // @@protoc_insertion_point(class_scope:Serialization.TransportRenderer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::BusDescription > busesdict_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::StopPosition > stoppositions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::BusToColor > buscolors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::CompaniesDescription > companiesdescription_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::CompanyPosition > companiespositions_;
  ::Serialization::RenderProps* renderprops_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frenderer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RenderProps

// double width = 1;
inline void RenderProps::clear_width() {
  width_ = 0;
}
inline double RenderProps::_internal_width() const {
  return width_;
}
inline double RenderProps::width() const {
  // @@protoc_insertion_point(field_get:Serialization.RenderProps.width)
  return _internal_width();
}
inline void RenderProps::_internal_set_width(double value) {
  
  width_ = value;
}
inline void RenderProps::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Serialization.RenderProps.width)
}

// double height = 2;
inline void RenderProps::clear_height() {
  height_ = 0;
}
inline double RenderProps::_internal_height() const {
  return height_;
}
inline double RenderProps::height() const {
  // @@protoc_insertion_point(field_get:Serialization.RenderProps.height)
  return _internal_height();
}
inline void RenderProps::_internal_set_height(double value) {
  
  height_ = value;
}
inline void RenderProps::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Serialization.RenderProps.height)
}

// double padding = 3;
inline void RenderProps::clear_padding() {
  padding_ = 0;
}
inline double RenderProps::_internal_padding() const {
  return padding_;
}
inline double RenderProps::padding() const {
  // @@protoc_insertion_point(field_get:Serialization.RenderProps.padding)
  return _internal_padding();
}
inline void RenderProps::_internal_set_padding(double value) {
  
  padding_ = value;
}
inline void RenderProps::set_padding(double value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:Serialization.RenderProps.padding)
}

// double stopRadius = 4;
inline void RenderProps::clear_stopradius() {
  stopradius_ = 0;
}
inline double RenderProps::_internal_stopradius() const {
  return stopradius_;
}
inline double RenderProps::stopradius() const {
  // @@protoc_insertion_point(field_get:Serialization.RenderProps.stopRadius)
  return _internal_stopradius();
}
inline void RenderProps::_internal_set_stopradius(double value) {
  
  stopradius_ = value;
}
inline void RenderProps::set_stopradius(double value) {
  _internal_set_stopradius(value);
  // @@protoc_insertion_point(field_set:Serialization.RenderProps.stopRadius)
}

// double lineWidth = 5;
inline void RenderProps::clear_linewidth() {
  linewidth_ = 0;
}
inline double RenderProps::_internal_linewidth() const {
  return linewidth_;
}
inline double RenderProps::linewidth() const {
  // @@protoc_insertion_point(field_get:Serialization.RenderProps.lineWidth)
  return _internal_linewidth();
}
inline void RenderProps::_internal_set_linewidth(double value) {
  
  linewidth_ = value;
}
inline void RenderProps::set_linewidth(double value) {
  _internal_set_linewidth(value);
  // @@protoc_insertion_point(field_set:Serialization.RenderProps.lineWidth)
}

// double outerMargin = 6;
inline void RenderProps::clear_outermargin() {
  outermargin_ = 0;
}
inline double RenderProps::_internal_outermargin() const {
  return outermargin_;
}
inline double RenderProps::outermargin() const {
  // @@protoc_insertion_point(field_get:Serialization.RenderProps.outerMargin)
  return _internal_outermargin();
}
inline void RenderProps::_internal_set_outermargin(double value) {
  
  outermargin_ = value;
}
inline void RenderProps::set_outermargin(double value) {
  _internal_set_outermargin(value);
  // @@protoc_insertion_point(field_set:Serialization.RenderProps.outerMargin)
}

// double underlayerWidth = 7;
inline void RenderProps::clear_underlayerwidth() {
  underlayerwidth_ = 0;
}
inline double RenderProps::_internal_underlayerwidth() const {
  return underlayerwidth_;
}
inline double RenderProps::underlayerwidth() const {
  // @@protoc_insertion_point(field_get:Serialization.RenderProps.underlayerWidth)
  return _internal_underlayerwidth();
}
inline void RenderProps::_internal_set_underlayerwidth(double value) {
  
  underlayerwidth_ = value;
}
inline void RenderProps::set_underlayerwidth(double value) {
  _internal_set_underlayerwidth(value);
  // @@protoc_insertion_point(field_set:Serialization.RenderProps.underlayerWidth)
}

// double companyRadius = 8;
inline void RenderProps::clear_companyradius() {
  companyradius_ = 0;
}
inline double RenderProps::_internal_companyradius() const {
  return companyradius_;
}
inline double RenderProps::companyradius() const {
  // @@protoc_insertion_point(field_get:Serialization.RenderProps.companyRadius)
  return _internal_companyradius();
}
inline void RenderProps::_internal_set_companyradius(double value) {
  
  companyradius_ = value;
}
inline void RenderProps::set_companyradius(double value) {
  _internal_set_companyradius(value);
  // @@protoc_insertion_point(field_set:Serialization.RenderProps.companyRadius)
}

// double companyLineWidth = 9;
inline void RenderProps::clear_companylinewidth() {
  companylinewidth_ = 0;
}
inline double RenderProps::_internal_companylinewidth() const {
  return companylinewidth_;
}
inline double RenderProps::companylinewidth() const {
  // @@protoc_insertion_point(field_get:Serialization.RenderProps.companyLineWidth)
  return _internal_companylinewidth();
}
inline void RenderProps::_internal_set_companylinewidth(double value) {
  
  companylinewidth_ = value;
}
inline void RenderProps::set_companylinewidth(double value) {
  _internal_set_companylinewidth(value);
  // @@protoc_insertion_point(field_set:Serialization.RenderProps.companyLineWidth)
}

// int32 stopLabelFontSize = 10;
inline void RenderProps::clear_stoplabelfontsize() {
  stoplabelfontsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenderProps::_internal_stoplabelfontsize() const {
  return stoplabelfontsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenderProps::stoplabelfontsize() const {
  // @@protoc_insertion_point(field_get:Serialization.RenderProps.stopLabelFontSize)
  return _internal_stoplabelfontsize();
}
inline void RenderProps::_internal_set_stoplabelfontsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stoplabelfontsize_ = value;
}
inline void RenderProps::set_stoplabelfontsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stoplabelfontsize(value);
  // @@protoc_insertion_point(field_set:Serialization.RenderProps.stopLabelFontSize)
}

// int32 busLabelFontSize = 11;
inline void RenderProps::clear_buslabelfontsize() {
  buslabelfontsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenderProps::_internal_buslabelfontsize() const {
  return buslabelfontsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenderProps::buslabelfontsize() const {
  // @@protoc_insertion_point(field_get:Serialization.RenderProps.busLabelFontSize)
  return _internal_buslabelfontsize();
}
inline void RenderProps::_internal_set_buslabelfontsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buslabelfontsize_ = value;
}
inline void RenderProps::set_buslabelfontsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buslabelfontsize(value);
  // @@protoc_insertion_point(field_set:Serialization.RenderProps.busLabelFontSize)
}

// .Serialization.Point stopLabelOffset = 12;
inline bool RenderProps::_internal_has_stoplabeloffset() const {
  return this != internal_default_instance() && stoplabeloffset_ != nullptr;
}
inline bool RenderProps::has_stoplabeloffset() const {
  return _internal_has_stoplabeloffset();
}
inline const ::Serialization::Point& RenderProps::_internal_stoplabeloffset() const {
  const ::Serialization::Point* p = stoplabeloffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::Serialization::Point&>(
      ::Serialization::_Point_default_instance_);
}
inline const ::Serialization::Point& RenderProps::stoplabeloffset() const {
  // @@protoc_insertion_point(field_get:Serialization.RenderProps.stopLabelOffset)
  return _internal_stoplabeloffset();
}
inline void RenderProps::unsafe_arena_set_allocated_stoplabeloffset(
    ::Serialization::Point* stoplabeloffset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stoplabeloffset_);
  }
  stoplabeloffset_ = stoplabeloffset;
  if (stoplabeloffset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialization.RenderProps.stopLabelOffset)
}
inline ::Serialization::Point* RenderProps::release_stoplabeloffset() {
  
  ::Serialization::Point* temp = stoplabeloffset_;
  stoplabeloffset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Serialization::Point* RenderProps::unsafe_arena_release_stoplabeloffset() {
  // @@protoc_insertion_point(field_release:Serialization.RenderProps.stopLabelOffset)
  
  ::Serialization::Point* temp = stoplabeloffset_;
  stoplabeloffset_ = nullptr;
  return temp;
}
inline ::Serialization::Point* RenderProps::_internal_mutable_stoplabeloffset() {
  
  if (stoplabeloffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialization::Point>(GetArenaForAllocation());
    stoplabeloffset_ = p;
  }
  return stoplabeloffset_;
}
inline ::Serialization::Point* RenderProps::mutable_stoplabeloffset() {
  ::Serialization::Point* _msg = _internal_mutable_stoplabeloffset();
  // @@protoc_insertion_point(field_mutable:Serialization.RenderProps.stopLabelOffset)
  return _msg;
}
inline void RenderProps::set_allocated_stoplabeloffset(::Serialization::Point* stoplabeloffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stoplabeloffset_);
  }
  if (stoplabeloffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stoplabeloffset));
    if (message_arena != submessage_arena) {
      stoplabeloffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stoplabeloffset, submessage_arena);
    }
    
  } else {
    
  }
  stoplabeloffset_ = stoplabeloffset;
  // @@protoc_insertion_point(field_set_allocated:Serialization.RenderProps.stopLabelOffset)
}

// .Serialization.Point busLabelOffset = 13;
inline bool RenderProps::_internal_has_buslabeloffset() const {
  return this != internal_default_instance() && buslabeloffset_ != nullptr;
}
inline bool RenderProps::has_buslabeloffset() const {
  return _internal_has_buslabeloffset();
}
inline const ::Serialization::Point& RenderProps::_internal_buslabeloffset() const {
  const ::Serialization::Point* p = buslabeloffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::Serialization::Point&>(
      ::Serialization::_Point_default_instance_);
}
inline const ::Serialization::Point& RenderProps::buslabeloffset() const {
  // @@protoc_insertion_point(field_get:Serialization.RenderProps.busLabelOffset)
  return _internal_buslabeloffset();
}
inline void RenderProps::unsafe_arena_set_allocated_buslabeloffset(
    ::Serialization::Point* buslabeloffset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buslabeloffset_);
  }
  buslabeloffset_ = buslabeloffset;
  if (buslabeloffset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialization.RenderProps.busLabelOffset)
}
inline ::Serialization::Point* RenderProps::release_buslabeloffset() {
  
  ::Serialization::Point* temp = buslabeloffset_;
  buslabeloffset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Serialization::Point* RenderProps::unsafe_arena_release_buslabeloffset() {
  // @@protoc_insertion_point(field_release:Serialization.RenderProps.busLabelOffset)
  
  ::Serialization::Point* temp = buslabeloffset_;
  buslabeloffset_ = nullptr;
  return temp;
}
inline ::Serialization::Point* RenderProps::_internal_mutable_buslabeloffset() {
  
  if (buslabeloffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialization::Point>(GetArenaForAllocation());
    buslabeloffset_ = p;
  }
  return buslabeloffset_;
}
inline ::Serialization::Point* RenderProps::mutable_buslabeloffset() {
  ::Serialization::Point* _msg = _internal_mutable_buslabeloffset();
  // @@protoc_insertion_point(field_mutable:Serialization.RenderProps.busLabelOffset)
  return _msg;
}
inline void RenderProps::set_allocated_buslabeloffset(::Serialization::Point* buslabeloffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(buslabeloffset_);
  }
  if (buslabeloffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buslabeloffset));
    if (message_arena != submessage_arena) {
      buslabeloffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buslabeloffset, submessage_arena);
    }
    
  } else {
    
  }
  buslabeloffset_ = buslabeloffset;
  // @@protoc_insertion_point(field_set_allocated:Serialization.RenderProps.busLabelOffset)
}

// .Serialization.Color underlayerColor = 14;
inline bool RenderProps::_internal_has_underlayercolor() const {
  return this != internal_default_instance() && underlayercolor_ != nullptr;
}
inline bool RenderProps::has_underlayercolor() const {
  return _internal_has_underlayercolor();
}
inline const ::Serialization::Color& RenderProps::_internal_underlayercolor() const {
  const ::Serialization::Color* p = underlayercolor_;
  return p != nullptr ? *p : reinterpret_cast<const ::Serialization::Color&>(
      ::Serialization::_Color_default_instance_);
}
inline const ::Serialization::Color& RenderProps::underlayercolor() const {
  // @@protoc_insertion_point(field_get:Serialization.RenderProps.underlayerColor)
  return _internal_underlayercolor();
}
inline void RenderProps::unsafe_arena_set_allocated_underlayercolor(
    ::Serialization::Color* underlayercolor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayercolor_);
  }
  underlayercolor_ = underlayercolor;
  if (underlayercolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialization.RenderProps.underlayerColor)
}
inline ::Serialization::Color* RenderProps::release_underlayercolor() {
  
  ::Serialization::Color* temp = underlayercolor_;
  underlayercolor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Serialization::Color* RenderProps::unsafe_arena_release_underlayercolor() {
  // @@protoc_insertion_point(field_release:Serialization.RenderProps.underlayerColor)
  
  ::Serialization::Color* temp = underlayercolor_;
  underlayercolor_ = nullptr;
  return temp;
}
inline ::Serialization::Color* RenderProps::_internal_mutable_underlayercolor() {
  
  if (underlayercolor_ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialization::Color>(GetArenaForAllocation());
    underlayercolor_ = p;
  }
  return underlayercolor_;
}
inline ::Serialization::Color* RenderProps::mutable_underlayercolor() {
  ::Serialization::Color* _msg = _internal_mutable_underlayercolor();
  // @@protoc_insertion_point(field_mutable:Serialization.RenderProps.underlayerColor)
  return _msg;
}
inline void RenderProps::set_allocated_underlayercolor(::Serialization::Color* underlayercolor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayercolor_);
  }
  if (underlayercolor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayercolor));
    if (message_arena != submessage_arena) {
      underlayercolor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlayercolor, submessage_arena);
    }
    
  } else {
    
  }
  underlayercolor_ = underlayercolor;
  // @@protoc_insertion_point(field_set_allocated:Serialization.RenderProps.underlayerColor)
}

// repeated .Serialization.Color colorPalette = 15;
inline int RenderProps::_internal_colorpalette_size() const {
  return colorpalette_.size();
}
inline int RenderProps::colorpalette_size() const {
  return _internal_colorpalette_size();
}
inline ::Serialization::Color* RenderProps::mutable_colorpalette(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.RenderProps.colorPalette)
  return colorpalette_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::Color >*
RenderProps::mutable_colorpalette() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.RenderProps.colorPalette)
  return &colorpalette_;
}
inline const ::Serialization::Color& RenderProps::_internal_colorpalette(int index) const {
  return colorpalette_.Get(index);
}
inline const ::Serialization::Color& RenderProps::colorpalette(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.RenderProps.colorPalette)
  return _internal_colorpalette(index);
}
inline ::Serialization::Color* RenderProps::_internal_add_colorpalette() {
  return colorpalette_.Add();
}
inline ::Serialization::Color* RenderProps::add_colorpalette() {
  ::Serialization::Color* _add = _internal_add_colorpalette();
  // @@protoc_insertion_point(field_add:Serialization.RenderProps.colorPalette)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::Color >&
RenderProps::colorpalette() const {
  // @@protoc_insertion_point(field_list:Serialization.RenderProps.colorPalette)
  return colorpalette_;
}

// repeated string layers = 16;
inline int RenderProps::_internal_layers_size() const {
  return layers_.size();
}
inline int RenderProps::layers_size() const {
  return _internal_layers_size();
}
inline void RenderProps::clear_layers() {
  layers_.Clear();
}
inline std::string* RenderProps::add_layers() {
  std::string* _s = _internal_add_layers();
  // @@protoc_insertion_point(field_add_mutable:Serialization.RenderProps.layers)
  return _s;
}
inline const std::string& RenderProps::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const std::string& RenderProps::layers(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.RenderProps.layers)
  return _internal_layers(index);
}
inline std::string* RenderProps::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.RenderProps.layers)
  return layers_.Mutable(index);
}
inline void RenderProps::set_layers(int index, const std::string& value) {
  layers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Serialization.RenderProps.layers)
}
inline void RenderProps::set_layers(int index, std::string&& value) {
  layers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Serialization.RenderProps.layers)
}
inline void RenderProps::set_layers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  layers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Serialization.RenderProps.layers)
}
inline void RenderProps::set_layers(int index, const char* value, size_t size) {
  layers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Serialization.RenderProps.layers)
}
inline std::string* RenderProps::_internal_add_layers() {
  return layers_.Add();
}
inline void RenderProps::add_layers(const std::string& value) {
  layers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Serialization.RenderProps.layers)
}
inline void RenderProps::add_layers(std::string&& value) {
  layers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Serialization.RenderProps.layers)
}
inline void RenderProps::add_layers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  layers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Serialization.RenderProps.layers)
}
inline void RenderProps::add_layers(const char* value, size_t size) {
  layers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Serialization.RenderProps.layers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RenderProps::layers() const {
  // @@protoc_insertion_point(field_list:Serialization.RenderProps.layers)
  return layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RenderProps::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.RenderProps.layers)
  return &layers_;
}

// -------------------------------------------------------------------

// BusDescription

// string name = 1;
inline void BusDescription::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BusDescription::name() const {
  // @@protoc_insertion_point(field_get:Serialization.BusDescription.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BusDescription::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Serialization.BusDescription.name)
}
inline std::string* BusDescription::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Serialization.BusDescription.name)
  return _s;
}
inline const std::string& BusDescription::_internal_name() const {
  return name_.Get();
}
inline void BusDescription::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BusDescription::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BusDescription::release_name() {
  // @@protoc_insertion_point(field_release:Serialization.BusDescription.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BusDescription::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Serialization.BusDescription.name)
}

// repeated string stops = 2;
inline int BusDescription::_internal_stops_size() const {
  return stops_.size();
}
inline int BusDescription::stops_size() const {
  return _internal_stops_size();
}
inline void BusDescription::clear_stops() {
  stops_.Clear();
}
inline std::string* BusDescription::add_stops() {
  std::string* _s = _internal_add_stops();
  // @@protoc_insertion_point(field_add_mutable:Serialization.BusDescription.stops)
  return _s;
}
inline const std::string& BusDescription::_internal_stops(int index) const {
  return stops_.Get(index);
}
inline const std::string& BusDescription::stops(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.BusDescription.stops)
  return _internal_stops(index);
}
inline std::string* BusDescription::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.BusDescription.stops)
  return stops_.Mutable(index);
}
inline void BusDescription::set_stops(int index, const std::string& value) {
  stops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Serialization.BusDescription.stops)
}
inline void BusDescription::set_stops(int index, std::string&& value) {
  stops_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Serialization.BusDescription.stops)
}
inline void BusDescription::set_stops(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Serialization.BusDescription.stops)
}
inline void BusDescription::set_stops(int index, const char* value, size_t size) {
  stops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Serialization.BusDescription.stops)
}
inline std::string* BusDescription::_internal_add_stops() {
  return stops_.Add();
}
inline void BusDescription::add_stops(const std::string& value) {
  stops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Serialization.BusDescription.stops)
}
inline void BusDescription::add_stops(std::string&& value) {
  stops_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Serialization.BusDescription.stops)
}
inline void BusDescription::add_stops(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Serialization.BusDescription.stops)
}
inline void BusDescription::add_stops(const char* value, size_t size) {
  stops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Serialization.BusDescription.stops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BusDescription::stops() const {
  // @@protoc_insertion_point(field_list:Serialization.BusDescription.stops)
  return stops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BusDescription::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.BusDescription.stops)
  return &stops_;
}

// repeated string endStops = 3;
inline int BusDescription::_internal_endstops_size() const {
  return endstops_.size();
}
inline int BusDescription::endstops_size() const {
  return _internal_endstops_size();
}
inline void BusDescription::clear_endstops() {
  endstops_.Clear();
}
inline std::string* BusDescription::add_endstops() {
  std::string* _s = _internal_add_endstops();
  // @@protoc_insertion_point(field_add_mutable:Serialization.BusDescription.endStops)
  return _s;
}
inline const std::string& BusDescription::_internal_endstops(int index) const {
  return endstops_.Get(index);
}
inline const std::string& BusDescription::endstops(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.BusDescription.endStops)
  return _internal_endstops(index);
}
inline std::string* BusDescription::mutable_endstops(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.BusDescription.endStops)
  return endstops_.Mutable(index);
}
inline void BusDescription::set_endstops(int index, const std::string& value) {
  endstops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Serialization.BusDescription.endStops)
}
inline void BusDescription::set_endstops(int index, std::string&& value) {
  endstops_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Serialization.BusDescription.endStops)
}
inline void BusDescription::set_endstops(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endstops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Serialization.BusDescription.endStops)
}
inline void BusDescription::set_endstops(int index, const char* value, size_t size) {
  endstops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Serialization.BusDescription.endStops)
}
inline std::string* BusDescription::_internal_add_endstops() {
  return endstops_.Add();
}
inline void BusDescription::add_endstops(const std::string& value) {
  endstops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Serialization.BusDescription.endStops)
}
inline void BusDescription::add_endstops(std::string&& value) {
  endstops_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Serialization.BusDescription.endStops)
}
inline void BusDescription::add_endstops(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endstops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Serialization.BusDescription.endStops)
}
inline void BusDescription::add_endstops(const char* value, size_t size) {
  endstops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Serialization.BusDescription.endStops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BusDescription::endstops() const {
  // @@protoc_insertion_point(field_list:Serialization.BusDescription.endStops)
  return endstops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BusDescription::mutable_endstops() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.BusDescription.endStops)
  return &endstops_;
}

// -------------------------------------------------------------------

// CompaniesDescription

// string mainName = 1;
inline void CompaniesDescription::clear_mainname() {
  mainname_.ClearToEmpty();
}
inline const std::string& CompaniesDescription::mainname() const {
  // @@protoc_insertion_point(field_get:Serialization.CompaniesDescription.mainName)
  return _internal_mainname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompaniesDescription::set_mainname(ArgT0&& arg0, ArgT... args) {
 
 mainname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Serialization.CompaniesDescription.mainName)
}
inline std::string* CompaniesDescription::mutable_mainname() {
  std::string* _s = _internal_mutable_mainname();
  // @@protoc_insertion_point(field_mutable:Serialization.CompaniesDescription.mainName)
  return _s;
}
inline const std::string& CompaniesDescription::_internal_mainname() const {
  return mainname_.Get();
}
inline void CompaniesDescription::_internal_set_mainname(const std::string& value) {
  
  mainname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CompaniesDescription::_internal_mutable_mainname() {
  
  return mainname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CompaniesDescription::release_mainname() {
  // @@protoc_insertion_point(field_release:Serialization.CompaniesDescription.mainName)
  return mainname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CompaniesDescription::set_allocated_mainname(std::string* mainname) {
  if (mainname != nullptr) {
    
  } else {
    
  }
  mainname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Serialization.CompaniesDescription.mainName)
}

// string displayName = 2;
inline void CompaniesDescription::clear_displayname() {
  displayname_.ClearToEmpty();
}
inline const std::string& CompaniesDescription::displayname() const {
  // @@protoc_insertion_point(field_get:Serialization.CompaniesDescription.displayName)
  return _internal_displayname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompaniesDescription::set_displayname(ArgT0&& arg0, ArgT... args) {
 
 displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Serialization.CompaniesDescription.displayName)
}
inline std::string* CompaniesDescription::mutable_displayname() {
  std::string* _s = _internal_mutable_displayname();
  // @@protoc_insertion_point(field_mutable:Serialization.CompaniesDescription.displayName)
  return _s;
}
inline const std::string& CompaniesDescription::_internal_displayname() const {
  return displayname_.Get();
}
inline void CompaniesDescription::_internal_set_displayname(const std::string& value) {
  
  displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CompaniesDescription::_internal_mutable_displayname() {
  
  return displayname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CompaniesDescription::release_displayname() {
  // @@protoc_insertion_point(field_release:Serialization.CompaniesDescription.displayName)
  return displayname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CompaniesDescription::set_allocated_displayname(std::string* displayname) {
  if (displayname != nullptr) {
    
  } else {
    
  }
  displayname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Serialization.CompaniesDescription.displayName)
}

// repeated .YellowPages.NearbyStop nearbyStops = 3;
inline int CompaniesDescription::_internal_nearbystops_size() const {
  return nearbystops_.size();
}
inline int CompaniesDescription::nearbystops_size() const {
  return _internal_nearbystops_size();
}
inline ::YellowPages::NearbyStop* CompaniesDescription::mutable_nearbystops(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.CompaniesDescription.nearbyStops)
  return nearbystops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YellowPages::NearbyStop >*
CompaniesDescription::mutable_nearbystops() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.CompaniesDescription.nearbyStops)
  return &nearbystops_;
}
inline const ::YellowPages::NearbyStop& CompaniesDescription::_internal_nearbystops(int index) const {
  return nearbystops_.Get(index);
}
inline const ::YellowPages::NearbyStop& CompaniesDescription::nearbystops(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.CompaniesDescription.nearbyStops)
  return _internal_nearbystops(index);
}
inline ::YellowPages::NearbyStop* CompaniesDescription::_internal_add_nearbystops() {
  return nearbystops_.Add();
}
inline ::YellowPages::NearbyStop* CompaniesDescription::add_nearbystops() {
  ::YellowPages::NearbyStop* _add = _internal_add_nearbystops();
  // @@protoc_insertion_point(field_add:Serialization.CompaniesDescription.nearbyStops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YellowPages::NearbyStop >&
CompaniesDescription::nearbystops() const {
  // @@protoc_insertion_point(field_list:Serialization.CompaniesDescription.nearbyStops)
  return nearbystops_;
}

// .SphereProto.Coords coords = 4;
inline bool CompaniesDescription::_internal_has_coords() const {
  return this != internal_default_instance() && coords_ != nullptr;
}
inline bool CompaniesDescription::has_coords() const {
  return _internal_has_coords();
}
inline const ::SphereProto::Coords& CompaniesDescription::_internal_coords() const {
  const ::SphereProto::Coords* p = coords_;
  return p != nullptr ? *p : reinterpret_cast<const ::SphereProto::Coords&>(
      ::SphereProto::_Coords_default_instance_);
}
inline const ::SphereProto::Coords& CompaniesDescription::coords() const {
  // @@protoc_insertion_point(field_get:Serialization.CompaniesDescription.coords)
  return _internal_coords();
}
inline void CompaniesDescription::unsafe_arena_set_allocated_coords(
    ::SphereProto::Coords* coords) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coords_);
  }
  coords_ = coords;
  if (coords) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialization.CompaniesDescription.coords)
}
inline ::SphereProto::Coords* CompaniesDescription::release_coords() {
  
  ::SphereProto::Coords* temp = coords_;
  coords_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SphereProto::Coords* CompaniesDescription::unsafe_arena_release_coords() {
  // @@protoc_insertion_point(field_release:Serialization.CompaniesDescription.coords)
  
  ::SphereProto::Coords* temp = coords_;
  coords_ = nullptr;
  return temp;
}
inline ::SphereProto::Coords* CompaniesDescription::_internal_mutable_coords() {
  
  if (coords_ == nullptr) {
    auto* p = CreateMaybeMessage<::SphereProto::Coords>(GetArenaForAllocation());
    coords_ = p;
  }
  return coords_;
}
inline ::SphereProto::Coords* CompaniesDescription::mutable_coords() {
  ::SphereProto::Coords* _msg = _internal_mutable_coords();
  // @@protoc_insertion_point(field_mutable:Serialization.CompaniesDescription.coords)
  return _msg;
}
inline void CompaniesDescription::set_allocated_coords(::SphereProto::Coords* coords) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coords_);
  }
  if (coords) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coords));
    if (message_arena != submessage_arena) {
      coords = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coords, submessage_arena);
    }
    
  } else {
    
  }
  coords_ = coords;
  // @@protoc_insertion_point(field_set_allocated:Serialization.CompaniesDescription.coords)
}

// -------------------------------------------------------------------

// BusToColor

// string busName = 1;
inline void BusToColor::clear_busname() {
  busname_.ClearToEmpty();
}
inline const std::string& BusToColor::busname() const {
  // @@protoc_insertion_point(field_get:Serialization.BusToColor.busName)
  return _internal_busname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BusToColor::set_busname(ArgT0&& arg0, ArgT... args) {
 
 busname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Serialization.BusToColor.busName)
}
inline std::string* BusToColor::mutable_busname() {
  std::string* _s = _internal_mutable_busname();
  // @@protoc_insertion_point(field_mutable:Serialization.BusToColor.busName)
  return _s;
}
inline const std::string& BusToColor::_internal_busname() const {
  return busname_.Get();
}
inline void BusToColor::_internal_set_busname(const std::string& value) {
  
  busname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BusToColor::_internal_mutable_busname() {
  
  return busname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BusToColor::release_busname() {
  // @@protoc_insertion_point(field_release:Serialization.BusToColor.busName)
  return busname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BusToColor::set_allocated_busname(std::string* busname) {
  if (busname != nullptr) {
    
  } else {
    
  }
  busname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), busname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Serialization.BusToColor.busName)
}

// .Serialization.Color busColor = 2;
inline bool BusToColor::_internal_has_buscolor() const {
  return this != internal_default_instance() && buscolor_ != nullptr;
}
inline bool BusToColor::has_buscolor() const {
  return _internal_has_buscolor();
}
inline const ::Serialization::Color& BusToColor::_internal_buscolor() const {
  const ::Serialization::Color* p = buscolor_;
  return p != nullptr ? *p : reinterpret_cast<const ::Serialization::Color&>(
      ::Serialization::_Color_default_instance_);
}
inline const ::Serialization::Color& BusToColor::buscolor() const {
  // @@protoc_insertion_point(field_get:Serialization.BusToColor.busColor)
  return _internal_buscolor();
}
inline void BusToColor::unsafe_arena_set_allocated_buscolor(
    ::Serialization::Color* buscolor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buscolor_);
  }
  buscolor_ = buscolor;
  if (buscolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialization.BusToColor.busColor)
}
inline ::Serialization::Color* BusToColor::release_buscolor() {
  
  ::Serialization::Color* temp = buscolor_;
  buscolor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Serialization::Color* BusToColor::unsafe_arena_release_buscolor() {
  // @@protoc_insertion_point(field_release:Serialization.BusToColor.busColor)
  
  ::Serialization::Color* temp = buscolor_;
  buscolor_ = nullptr;
  return temp;
}
inline ::Serialization::Color* BusToColor::_internal_mutable_buscolor() {
  
  if (buscolor_ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialization::Color>(GetArenaForAllocation());
    buscolor_ = p;
  }
  return buscolor_;
}
inline ::Serialization::Color* BusToColor::mutable_buscolor() {
  ::Serialization::Color* _msg = _internal_mutable_buscolor();
  // @@protoc_insertion_point(field_mutable:Serialization.BusToColor.busColor)
  return _msg;
}
inline void BusToColor::set_allocated_buscolor(::Serialization::Color* buscolor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(buscolor_);
  }
  if (buscolor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buscolor));
    if (message_arena != submessage_arena) {
      buscolor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buscolor, submessage_arena);
    }
    
  } else {
    
  }
  buscolor_ = buscolor;
  // @@protoc_insertion_point(field_set_allocated:Serialization.BusToColor.busColor)
}

// -------------------------------------------------------------------

// StopPosition

// string stopName = 1;
inline void StopPosition::clear_stopname() {
  stopname_.ClearToEmpty();
}
inline const std::string& StopPosition::stopname() const {
  // @@protoc_insertion_point(field_get:Serialization.StopPosition.stopName)
  return _internal_stopname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopPosition::set_stopname(ArgT0&& arg0, ArgT... args) {
 
 stopname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Serialization.StopPosition.stopName)
}
inline std::string* StopPosition::mutable_stopname() {
  std::string* _s = _internal_mutable_stopname();
  // @@protoc_insertion_point(field_mutable:Serialization.StopPosition.stopName)
  return _s;
}
inline const std::string& StopPosition::_internal_stopname() const {
  return stopname_.Get();
}
inline void StopPosition::_internal_set_stopname(const std::string& value) {
  
  stopname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StopPosition::_internal_mutable_stopname() {
  
  return stopname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StopPosition::release_stopname() {
  // @@protoc_insertion_point(field_release:Serialization.StopPosition.stopName)
  return stopname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StopPosition::set_allocated_stopname(std::string* stopname) {
  if (stopname != nullptr) {
    
  } else {
    
  }
  stopname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stopname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Serialization.StopPosition.stopName)
}

// .Serialization.Point stopPosition = 2;
inline bool StopPosition::_internal_has_stopposition() const {
  return this != internal_default_instance() && stopposition_ != nullptr;
}
inline bool StopPosition::has_stopposition() const {
  return _internal_has_stopposition();
}
inline const ::Serialization::Point& StopPosition::_internal_stopposition() const {
  const ::Serialization::Point* p = stopposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::Serialization::Point&>(
      ::Serialization::_Point_default_instance_);
}
inline const ::Serialization::Point& StopPosition::stopposition() const {
  // @@protoc_insertion_point(field_get:Serialization.StopPosition.stopPosition)
  return _internal_stopposition();
}
inline void StopPosition::unsafe_arena_set_allocated_stopposition(
    ::Serialization::Point* stopposition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stopposition_);
  }
  stopposition_ = stopposition;
  if (stopposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialization.StopPosition.stopPosition)
}
inline ::Serialization::Point* StopPosition::release_stopposition() {
  
  ::Serialization::Point* temp = stopposition_;
  stopposition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Serialization::Point* StopPosition::unsafe_arena_release_stopposition() {
  // @@protoc_insertion_point(field_release:Serialization.StopPosition.stopPosition)
  
  ::Serialization::Point* temp = stopposition_;
  stopposition_ = nullptr;
  return temp;
}
inline ::Serialization::Point* StopPosition::_internal_mutable_stopposition() {
  
  if (stopposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialization::Point>(GetArenaForAllocation());
    stopposition_ = p;
  }
  return stopposition_;
}
inline ::Serialization::Point* StopPosition::mutable_stopposition() {
  ::Serialization::Point* _msg = _internal_mutable_stopposition();
  // @@protoc_insertion_point(field_mutable:Serialization.StopPosition.stopPosition)
  return _msg;
}
inline void StopPosition::set_allocated_stopposition(::Serialization::Point* stopposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stopposition_);
  }
  if (stopposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stopposition));
    if (message_arena != submessage_arena) {
      stopposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stopposition, submessage_arena);
    }
    
  } else {
    
  }
  stopposition_ = stopposition;
  // @@protoc_insertion_point(field_set_allocated:Serialization.StopPosition.stopPosition)
}

// -------------------------------------------------------------------

// CompanyPosition

// string companyName = 1;
inline void CompanyPosition::clear_companyname() {
  companyname_.ClearToEmpty();
}
inline const std::string& CompanyPosition::companyname() const {
  // @@protoc_insertion_point(field_get:Serialization.CompanyPosition.companyName)
  return _internal_companyname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompanyPosition::set_companyname(ArgT0&& arg0, ArgT... args) {
 
 companyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Serialization.CompanyPosition.companyName)
}
inline std::string* CompanyPosition::mutable_companyname() {
  std::string* _s = _internal_mutable_companyname();
  // @@protoc_insertion_point(field_mutable:Serialization.CompanyPosition.companyName)
  return _s;
}
inline const std::string& CompanyPosition::_internal_companyname() const {
  return companyname_.Get();
}
inline void CompanyPosition::_internal_set_companyname(const std::string& value) {
  
  companyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CompanyPosition::_internal_mutable_companyname() {
  
  return companyname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CompanyPosition::release_companyname() {
  // @@protoc_insertion_point(field_release:Serialization.CompanyPosition.companyName)
  return companyname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CompanyPosition::set_allocated_companyname(std::string* companyname) {
  if (companyname != nullptr) {
    
  } else {
    
  }
  companyname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), companyname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Serialization.CompanyPosition.companyName)
}

// .Serialization.Point companyPosition = 2;
inline bool CompanyPosition::_internal_has_companyposition() const {
  return this != internal_default_instance() && companyposition_ != nullptr;
}
inline bool CompanyPosition::has_companyposition() const {
  return _internal_has_companyposition();
}
inline const ::Serialization::Point& CompanyPosition::_internal_companyposition() const {
  const ::Serialization::Point* p = companyposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::Serialization::Point&>(
      ::Serialization::_Point_default_instance_);
}
inline const ::Serialization::Point& CompanyPosition::companyposition() const {
  // @@protoc_insertion_point(field_get:Serialization.CompanyPosition.companyPosition)
  return _internal_companyposition();
}
inline void CompanyPosition::unsafe_arena_set_allocated_companyposition(
    ::Serialization::Point* companyposition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(companyposition_);
  }
  companyposition_ = companyposition;
  if (companyposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialization.CompanyPosition.companyPosition)
}
inline ::Serialization::Point* CompanyPosition::release_companyposition() {
  
  ::Serialization::Point* temp = companyposition_;
  companyposition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Serialization::Point* CompanyPosition::unsafe_arena_release_companyposition() {
  // @@protoc_insertion_point(field_release:Serialization.CompanyPosition.companyPosition)
  
  ::Serialization::Point* temp = companyposition_;
  companyposition_ = nullptr;
  return temp;
}
inline ::Serialization::Point* CompanyPosition::_internal_mutable_companyposition() {
  
  if (companyposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialization::Point>(GetArenaForAllocation());
    companyposition_ = p;
  }
  return companyposition_;
}
inline ::Serialization::Point* CompanyPosition::mutable_companyposition() {
  ::Serialization::Point* _msg = _internal_mutable_companyposition();
  // @@protoc_insertion_point(field_mutable:Serialization.CompanyPosition.companyPosition)
  return _msg;
}
inline void CompanyPosition::set_allocated_companyposition(::Serialization::Point* companyposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(companyposition_);
  }
  if (companyposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(companyposition));
    if (message_arena != submessage_arena) {
      companyposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, companyposition, submessage_arena);
    }
    
  } else {
    
  }
  companyposition_ = companyposition;
  // @@protoc_insertion_point(field_set_allocated:Serialization.CompanyPosition.companyPosition)
}

// -------------------------------------------------------------------

// TransportRenderer

// .Serialization.RenderProps renderProps = 1;
inline bool TransportRenderer::_internal_has_renderprops() const {
  return this != internal_default_instance() && renderprops_ != nullptr;
}
inline bool TransportRenderer::has_renderprops() const {
  return _internal_has_renderprops();
}
inline void TransportRenderer::clear_renderprops() {
  if (GetArenaForAllocation() == nullptr && renderprops_ != nullptr) {
    delete renderprops_;
  }
  renderprops_ = nullptr;
}
inline const ::Serialization::RenderProps& TransportRenderer::_internal_renderprops() const {
  const ::Serialization::RenderProps* p = renderprops_;
  return p != nullptr ? *p : reinterpret_cast<const ::Serialization::RenderProps&>(
      ::Serialization::_RenderProps_default_instance_);
}
inline const ::Serialization::RenderProps& TransportRenderer::renderprops() const {
  // @@protoc_insertion_point(field_get:Serialization.TransportRenderer.renderProps)
  return _internal_renderprops();
}
inline void TransportRenderer::unsafe_arena_set_allocated_renderprops(
    ::Serialization::RenderProps* renderprops) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderprops_);
  }
  renderprops_ = renderprops;
  if (renderprops) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialization.TransportRenderer.renderProps)
}
inline ::Serialization::RenderProps* TransportRenderer::release_renderprops() {
  
  ::Serialization::RenderProps* temp = renderprops_;
  renderprops_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Serialization::RenderProps* TransportRenderer::unsafe_arena_release_renderprops() {
  // @@protoc_insertion_point(field_release:Serialization.TransportRenderer.renderProps)
  
  ::Serialization::RenderProps* temp = renderprops_;
  renderprops_ = nullptr;
  return temp;
}
inline ::Serialization::RenderProps* TransportRenderer::_internal_mutable_renderprops() {
  
  if (renderprops_ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialization::RenderProps>(GetArenaForAllocation());
    renderprops_ = p;
  }
  return renderprops_;
}
inline ::Serialization::RenderProps* TransportRenderer::mutable_renderprops() {
  ::Serialization::RenderProps* _msg = _internal_mutable_renderprops();
  // @@protoc_insertion_point(field_mutable:Serialization.TransportRenderer.renderProps)
  return _msg;
}
inline void TransportRenderer::set_allocated_renderprops(::Serialization::RenderProps* renderprops) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete renderprops_;
  }
  if (renderprops) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Serialization::RenderProps>::GetOwningArena(renderprops);
    if (message_arena != submessage_arena) {
      renderprops = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderprops, submessage_arena);
    }
    
  } else {
    
  }
  renderprops_ = renderprops;
  // @@protoc_insertion_point(field_set_allocated:Serialization.TransportRenderer.renderProps)
}

// repeated .Serialization.BusDescription busesDict = 2;
inline int TransportRenderer::_internal_busesdict_size() const {
  return busesdict_.size();
}
inline int TransportRenderer::busesdict_size() const {
  return _internal_busesdict_size();
}
inline void TransportRenderer::clear_busesdict() {
  busesdict_.Clear();
}
inline ::Serialization::BusDescription* TransportRenderer::mutable_busesdict(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.TransportRenderer.busesDict)
  return busesdict_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::BusDescription >*
TransportRenderer::mutable_busesdict() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.TransportRenderer.busesDict)
  return &busesdict_;
}
inline const ::Serialization::BusDescription& TransportRenderer::_internal_busesdict(int index) const {
  return busesdict_.Get(index);
}
inline const ::Serialization::BusDescription& TransportRenderer::busesdict(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.TransportRenderer.busesDict)
  return _internal_busesdict(index);
}
inline ::Serialization::BusDescription* TransportRenderer::_internal_add_busesdict() {
  return busesdict_.Add();
}
inline ::Serialization::BusDescription* TransportRenderer::add_busesdict() {
  ::Serialization::BusDescription* _add = _internal_add_busesdict();
  // @@protoc_insertion_point(field_add:Serialization.TransportRenderer.busesDict)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::BusDescription >&
TransportRenderer::busesdict() const {
  // @@protoc_insertion_point(field_list:Serialization.TransportRenderer.busesDict)
  return busesdict_;
}

// repeated .Serialization.StopPosition stopPositions = 3;
inline int TransportRenderer::_internal_stoppositions_size() const {
  return stoppositions_.size();
}
inline int TransportRenderer::stoppositions_size() const {
  return _internal_stoppositions_size();
}
inline void TransportRenderer::clear_stoppositions() {
  stoppositions_.Clear();
}
inline ::Serialization::StopPosition* TransportRenderer::mutable_stoppositions(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.TransportRenderer.stopPositions)
  return stoppositions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::StopPosition >*
TransportRenderer::mutable_stoppositions() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.TransportRenderer.stopPositions)
  return &stoppositions_;
}
inline const ::Serialization::StopPosition& TransportRenderer::_internal_stoppositions(int index) const {
  return stoppositions_.Get(index);
}
inline const ::Serialization::StopPosition& TransportRenderer::stoppositions(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.TransportRenderer.stopPositions)
  return _internal_stoppositions(index);
}
inline ::Serialization::StopPosition* TransportRenderer::_internal_add_stoppositions() {
  return stoppositions_.Add();
}
inline ::Serialization::StopPosition* TransportRenderer::add_stoppositions() {
  ::Serialization::StopPosition* _add = _internal_add_stoppositions();
  // @@protoc_insertion_point(field_add:Serialization.TransportRenderer.stopPositions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::StopPosition >&
TransportRenderer::stoppositions() const {
  // @@protoc_insertion_point(field_list:Serialization.TransportRenderer.stopPositions)
  return stoppositions_;
}

// repeated .Serialization.BusToColor busColors = 4;
inline int TransportRenderer::_internal_buscolors_size() const {
  return buscolors_.size();
}
inline int TransportRenderer::buscolors_size() const {
  return _internal_buscolors_size();
}
inline void TransportRenderer::clear_buscolors() {
  buscolors_.Clear();
}
inline ::Serialization::BusToColor* TransportRenderer::mutable_buscolors(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.TransportRenderer.busColors)
  return buscolors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::BusToColor >*
TransportRenderer::mutable_buscolors() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.TransportRenderer.busColors)
  return &buscolors_;
}
inline const ::Serialization::BusToColor& TransportRenderer::_internal_buscolors(int index) const {
  return buscolors_.Get(index);
}
inline const ::Serialization::BusToColor& TransportRenderer::buscolors(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.TransportRenderer.busColors)
  return _internal_buscolors(index);
}
inline ::Serialization::BusToColor* TransportRenderer::_internal_add_buscolors() {
  return buscolors_.Add();
}
inline ::Serialization::BusToColor* TransportRenderer::add_buscolors() {
  ::Serialization::BusToColor* _add = _internal_add_buscolors();
  // @@protoc_insertion_point(field_add:Serialization.TransportRenderer.busColors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::BusToColor >&
TransportRenderer::buscolors() const {
  // @@protoc_insertion_point(field_list:Serialization.TransportRenderer.busColors)
  return buscolors_;
}

// repeated .Serialization.CompaniesDescription companiesDescription = 5;
inline int TransportRenderer::_internal_companiesdescription_size() const {
  return companiesdescription_.size();
}
inline int TransportRenderer::companiesdescription_size() const {
  return _internal_companiesdescription_size();
}
inline void TransportRenderer::clear_companiesdescription() {
  companiesdescription_.Clear();
}
inline ::Serialization::CompaniesDescription* TransportRenderer::mutable_companiesdescription(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.TransportRenderer.companiesDescription)
  return companiesdescription_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::CompaniesDescription >*
TransportRenderer::mutable_companiesdescription() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.TransportRenderer.companiesDescription)
  return &companiesdescription_;
}
inline const ::Serialization::CompaniesDescription& TransportRenderer::_internal_companiesdescription(int index) const {
  return companiesdescription_.Get(index);
}
inline const ::Serialization::CompaniesDescription& TransportRenderer::companiesdescription(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.TransportRenderer.companiesDescription)
  return _internal_companiesdescription(index);
}
inline ::Serialization::CompaniesDescription* TransportRenderer::_internal_add_companiesdescription() {
  return companiesdescription_.Add();
}
inline ::Serialization::CompaniesDescription* TransportRenderer::add_companiesdescription() {
  ::Serialization::CompaniesDescription* _add = _internal_add_companiesdescription();
  // @@protoc_insertion_point(field_add:Serialization.TransportRenderer.companiesDescription)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::CompaniesDescription >&
TransportRenderer::companiesdescription() const {
  // @@protoc_insertion_point(field_list:Serialization.TransportRenderer.companiesDescription)
  return companiesdescription_;
}

// repeated .Serialization.CompanyPosition companiesPositions = 6;
inline int TransportRenderer::_internal_companiespositions_size() const {
  return companiespositions_.size();
}
inline int TransportRenderer::companiespositions_size() const {
  return _internal_companiespositions_size();
}
inline void TransportRenderer::clear_companiespositions() {
  companiespositions_.Clear();
}
inline ::Serialization::CompanyPosition* TransportRenderer::mutable_companiespositions(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.TransportRenderer.companiesPositions)
  return companiespositions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::CompanyPosition >*
TransportRenderer::mutable_companiespositions() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.TransportRenderer.companiesPositions)
  return &companiespositions_;
}
inline const ::Serialization::CompanyPosition& TransportRenderer::_internal_companiespositions(int index) const {
  return companiespositions_.Get(index);
}
inline const ::Serialization::CompanyPosition& TransportRenderer::companiespositions(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.TransportRenderer.companiesPositions)
  return _internal_companiespositions(index);
}
inline ::Serialization::CompanyPosition* TransportRenderer::_internal_add_companiespositions() {
  return companiespositions_.Add();
}
inline ::Serialization::CompanyPosition* TransportRenderer::add_companiespositions() {
  ::Serialization::CompanyPosition* _add = _internal_add_companiespositions();
  // @@protoc_insertion_point(field_add:Serialization.TransportRenderer.companiesPositions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::CompanyPosition >&
TransportRenderer::companiespositions() const {
  // @@protoc_insertion_point(field_list:Serialization.TransportRenderer.companiesPositions)
  return companiespositions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialization

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5frenderer_2eproto
