// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalog.proto

#include "transport_catalog.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Serialization {
constexpr SerializedStops::SerializedStops(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : busnames_()
  , stopname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SerializedStopsDefaultTypeInternal {
  constexpr SerializedStopsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SerializedStopsDefaultTypeInternal() {}
  union {
    SerializedStops _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SerializedStopsDefaultTypeInternal _SerializedStops_default_instance_;
constexpr SerializedBuses::SerializedBuses(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : busname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stopcount_(0u)
  , uniquestopcount_(0u)
  , georoutelength_(0)
  , roadroutelength_(0){}
struct SerializedBusesDefaultTypeInternal {
  constexpr SerializedBusesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SerializedBusesDefaultTypeInternal() {}
  union {
    SerializedBuses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SerializedBusesDefaultTypeInternal _SerializedBuses_default_instance_;
constexpr TransportCatalog::TransportCatalog(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stops_()
  , buses_()
  , router_(nullptr)
  , renderer_(nullptr)
  , database_(nullptr){}
struct TransportCatalogDefaultTypeInternal {
  constexpr TransportCatalogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransportCatalogDefaultTypeInternal() {}
  union {
    TransportCatalog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransportCatalogDefaultTypeInternal _TransportCatalog_default_instance_;
}  // namespace Serialization
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_5fcatalog_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transport_5fcatalog_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_5fcatalog_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_5fcatalog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::SerializedStops, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialization::SerializedStops, stopname_),
  PROTOBUF_FIELD_OFFSET(::Serialization::SerializedStops, busnames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::SerializedBuses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialization::SerializedBuses, busname_),
  PROTOBUF_FIELD_OFFSET(::Serialization::SerializedBuses, stopcount_),
  PROTOBUF_FIELD_OFFSET(::Serialization::SerializedBuses, uniquestopcount_),
  PROTOBUF_FIELD_OFFSET(::Serialization::SerializedBuses, roadroutelength_),
  PROTOBUF_FIELD_OFFSET(::Serialization::SerializedBuses, georoutelength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportCatalog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportCatalog, stops_),
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportCatalog, buses_),
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportCatalog, router_),
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportCatalog, renderer_),
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportCatalog, database_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Serialization::SerializedStops)},
  { 7, -1, sizeof(::Serialization::SerializedBuses)},
  { 17, -1, sizeof(::Serialization::TransportCatalog)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_SerializedStops_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_SerializedBuses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_TransportCatalog_default_instance_),
};

const char descriptor_table_protodef_transport_5fcatalog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027transport_catalog.proto\022\rSerialization"
  "\032\026transport_router.proto\032\030transport_rend"
  "erer.proto\032\016database.proto\"5\n\017Serialized"
  "Stops\022\020\n\010stopName\030\001 \001(\t\022\020\n\010busNames\030\002 \003("
  "\t\"\177\n\017SerializedBuses\022\017\n\007busName\030\001 \001(\t\022\021\n"
  "\tstopCount\030\002 \001(\r\022\027\n\017uniqueStopCount\030\003 \001("
  "\r\022\027\n\017roadRouteLength\030\004 \001(\005\022\026\n\016geoRouteLe"
  "ngth\030\005 \001(\001\"\375\001\n\020TransportCatalog\022-\n\005stops"
  "\030\001 \003(\0132\036.Serialization.SerializedStops\022-"
  "\n\005buses\030\002 \003(\0132\036.Serialization.Serialized"
  "Buses\022.\n\006router\030\003 \001(\0132\036.Serialization.Tr"
  "ansportRouter\0222\n\010renderer\030\004 \001(\0132 .Serial"
  "ization.TransportRenderer\022\'\n\010database\030\005 "
  "\001(\0132\025.YellowPages.Databaseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_5fcatalog_2eproto_deps[3] = {
  &::descriptor_table_database_2eproto,
  &::descriptor_table_transport_5frenderer_2eproto,
  &::descriptor_table_transport_5frouter_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_5fcatalog_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalog_2eproto = {
  false, false, 554, descriptor_table_protodef_transport_5fcatalog_2eproto, "transport_catalog.proto", 
  &descriptor_table_transport_5fcatalog_2eproto_once, descriptor_table_transport_5fcatalog_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_transport_5fcatalog_2eproto::offsets,
  file_level_metadata_transport_5fcatalog_2eproto, file_level_enum_descriptors_transport_5fcatalog_2eproto, file_level_service_descriptors_transport_5fcatalog_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_transport_5fcatalog_2eproto_getter() {
  return &descriptor_table_transport_5fcatalog_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_transport_5fcatalog_2eproto(&descriptor_table_transport_5fcatalog_2eproto);
namespace Serialization {

// ===================================================================

class SerializedStops::_Internal {
 public:
};

SerializedStops::SerializedStops(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  busnames_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.SerializedStops)
}
SerializedStops::SerializedStops(const SerializedStops& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      busnames_(from.busnames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stopname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stopname().empty()) {
    stopname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stopname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Serialization.SerializedStops)
}

inline void SerializedStops::SharedCtor() {
stopname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SerializedStops::~SerializedStops() {
  // @@protoc_insertion_point(destructor:Serialization.SerializedStops)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SerializedStops::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stopname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SerializedStops::ArenaDtor(void* object) {
  SerializedStops* _this = reinterpret_cast< SerializedStops* >(object);
  (void)_this;
}
void SerializedStops::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedStops::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SerializedStops::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.SerializedStops)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  busnames_.Clear();
  stopname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedStops::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stopName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stopname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.SerializedStops.stopName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string busNames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_busnames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.SerializedStops.busNames"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedStops::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.SerializedStops)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stopName = 1;
  if (!this->_internal_stopname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stopname().data(), static_cast<int>(this->_internal_stopname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.SerializedStops.stopName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stopname(), target);
  }

  // repeated string busNames = 2;
  for (int i = 0, n = this->_internal_busnames_size(); i < n; i++) {
    const auto& s = this->_internal_busnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.SerializedStops.busNames");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.SerializedStops)
  return target;
}

size_t SerializedStops::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.SerializedStops)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string busNames = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(busnames_.size());
  for (int i = 0, n = busnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      busnames_.Get(i));
  }

  // string stopName = 1;
  if (!this->_internal_stopname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stopname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SerializedStops::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SerializedStops::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SerializedStops::GetClassData() const { return &_class_data_; }

void SerializedStops::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SerializedStops *>(to)->MergeFrom(
      static_cast<const SerializedStops &>(from));
}


void SerializedStops::MergeFrom(const SerializedStops& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.SerializedStops)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  busnames_.MergeFrom(from.busnames_);
  if (!from._internal_stopname().empty()) {
    _internal_set_stopname(from._internal_stopname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SerializedStops::CopyFrom(const SerializedStops& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.SerializedStops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedStops::IsInitialized() const {
  return true;
}

void SerializedStops::InternalSwap(SerializedStops* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  busnames_.InternalSwap(&other->busnames_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stopname_, GetArenaForAllocation(),
      &other->stopname_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedStops::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalog_2eproto_getter, &descriptor_table_transport_5fcatalog_2eproto_once,
      file_level_metadata_transport_5fcatalog_2eproto[0]);
}

// ===================================================================

class SerializedBuses::_Internal {
 public:
};

SerializedBuses::SerializedBuses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.SerializedBuses)
}
SerializedBuses::SerializedBuses(const SerializedBuses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  busname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_busname().empty()) {
    busname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_busname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&stopcount_, &from.stopcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&roadroutelength_) -
    reinterpret_cast<char*>(&stopcount_)) + sizeof(roadroutelength_));
  // @@protoc_insertion_point(copy_constructor:Serialization.SerializedBuses)
}

inline void SerializedBuses::SharedCtor() {
busname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stopcount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roadroutelength_) -
    reinterpret_cast<char*>(&stopcount_)) + sizeof(roadroutelength_));
}

SerializedBuses::~SerializedBuses() {
  // @@protoc_insertion_point(destructor:Serialization.SerializedBuses)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SerializedBuses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  busname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SerializedBuses::ArenaDtor(void* object) {
  SerializedBuses* _this = reinterpret_cast< SerializedBuses* >(object);
  (void)_this;
}
void SerializedBuses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedBuses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SerializedBuses::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.SerializedBuses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  busname_.ClearToEmpty();
  ::memset(&stopcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roadroutelength_) -
      reinterpret_cast<char*>(&stopcount_)) + sizeof(roadroutelength_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedBuses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string busName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_busname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.SerializedBuses.busName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stopCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stopcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uniqueStopCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uniquestopcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 roadRouteLength = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          roadroutelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double geoRouteLength = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          georoutelength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedBuses::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.SerializedBuses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string busName = 1;
  if (!this->_internal_busname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_busname().data(), static_cast<int>(this->_internal_busname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.SerializedBuses.busName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_busname(), target);
  }

  // uint32 stopCount = 2;
  if (this->_internal_stopcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stopcount(), target);
  }

  // uint32 uniqueStopCount = 3;
  if (this->_internal_uniquestopcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uniquestopcount(), target);
  }

  // int32 roadRouteLength = 4;
  if (this->_internal_roadroutelength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_roadroutelength(), target);
  }

  // double geoRouteLength = 5;
  if (!(this->_internal_georoutelength() <= 0 && this->_internal_georoutelength() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_georoutelength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.SerializedBuses)
  return target;
}

size_t SerializedBuses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.SerializedBuses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string busName = 1;
  if (!this->_internal_busname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_busname());
  }

  // uint32 stopCount = 2;
  if (this->_internal_stopcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stopcount());
  }

  // uint32 uniqueStopCount = 3;
  if (this->_internal_uniquestopcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uniquestopcount());
  }

  // double geoRouteLength = 5;
  if (!(this->_internal_georoutelength() <= 0 && this->_internal_georoutelength() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 roadRouteLength = 4;
  if (this->_internal_roadroutelength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roadroutelength());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SerializedBuses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SerializedBuses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SerializedBuses::GetClassData() const { return &_class_data_; }

void SerializedBuses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SerializedBuses *>(to)->MergeFrom(
      static_cast<const SerializedBuses &>(from));
}


void SerializedBuses::MergeFrom(const SerializedBuses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.SerializedBuses)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_busname().empty()) {
    _internal_set_busname(from._internal_busname());
  }
  if (from._internal_stopcount() != 0) {
    _internal_set_stopcount(from._internal_stopcount());
  }
  if (from._internal_uniquestopcount() != 0) {
    _internal_set_uniquestopcount(from._internal_uniquestopcount());
  }
  if (!(from._internal_georoutelength() <= 0 && from._internal_georoutelength() >= 0)) {
    _internal_set_georoutelength(from._internal_georoutelength());
  }
  if (from._internal_roadroutelength() != 0) {
    _internal_set_roadroutelength(from._internal_roadroutelength());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SerializedBuses::CopyFrom(const SerializedBuses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.SerializedBuses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedBuses::IsInitialized() const {
  return true;
}

void SerializedBuses::InternalSwap(SerializedBuses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &busname_, GetArenaForAllocation(),
      &other->busname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedBuses, roadroutelength_)
      + sizeof(SerializedBuses::roadroutelength_)
      - PROTOBUF_FIELD_OFFSET(SerializedBuses, stopcount_)>(
          reinterpret_cast<char*>(&stopcount_),
          reinterpret_cast<char*>(&other->stopcount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedBuses::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalog_2eproto_getter, &descriptor_table_transport_5fcatalog_2eproto_once,
      file_level_metadata_transport_5fcatalog_2eproto[1]);
}

// ===================================================================

class TransportCatalog::_Internal {
 public:
  static const ::Serialization::TransportRouter& router(const TransportCatalog* msg);
  static const ::Serialization::TransportRenderer& renderer(const TransportCatalog* msg);
  static const ::YellowPages::Database& database(const TransportCatalog* msg);
};

const ::Serialization::TransportRouter&
TransportCatalog::_Internal::router(const TransportCatalog* msg) {
  return *msg->router_;
}
const ::Serialization::TransportRenderer&
TransportCatalog::_Internal::renderer(const TransportCatalog* msg) {
  return *msg->renderer_;
}
const ::YellowPages::Database&
TransportCatalog::_Internal::database(const TransportCatalog* msg) {
  return *msg->database_;
}
void TransportCatalog::clear_router() {
  if (GetArenaForAllocation() == nullptr && router_ != nullptr) {
    delete router_;
  }
  router_ = nullptr;
}
void TransportCatalog::clear_renderer() {
  if (GetArenaForAllocation() == nullptr && renderer_ != nullptr) {
    delete renderer_;
  }
  renderer_ = nullptr;
}
void TransportCatalog::clear_database() {
  if (GetArenaForAllocation() == nullptr && database_ != nullptr) {
    delete database_;
  }
  database_ = nullptr;
}
TransportCatalog::TransportCatalog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stops_(arena),
  buses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.TransportCatalog)
}
TransportCatalog::TransportCatalog(const TransportCatalog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stops_(from.stops_),
      buses_(from.buses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_router()) {
    router_ = new ::Serialization::TransportRouter(*from.router_);
  } else {
    router_ = nullptr;
  }
  if (from._internal_has_renderer()) {
    renderer_ = new ::Serialization::TransportRenderer(*from.renderer_);
  } else {
    renderer_ = nullptr;
  }
  if (from._internal_has_database()) {
    database_ = new ::YellowPages::Database(*from.database_);
  } else {
    database_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Serialization.TransportCatalog)
}

inline void TransportCatalog::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&router_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&database_) -
    reinterpret_cast<char*>(&router_)) + sizeof(database_));
}

TransportCatalog::~TransportCatalog() {
  // @@protoc_insertion_point(destructor:Serialization.TransportCatalog)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransportCatalog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete router_;
  if (this != internal_default_instance()) delete renderer_;
  if (this != internal_default_instance()) delete database_;
}

void TransportCatalog::ArenaDtor(void* object) {
  TransportCatalog* _this = reinterpret_cast< TransportCatalog* >(object);
  (void)_this;
}
void TransportCatalog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransportCatalog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransportCatalog::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.TransportCatalog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_.Clear();
  buses_.Clear();
  if (GetArenaForAllocation() == nullptr && router_ != nullptr) {
    delete router_;
  }
  router_ = nullptr;
  if (GetArenaForAllocation() == nullptr && renderer_ != nullptr) {
    delete renderer_;
  }
  renderer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && database_ != nullptr) {
    delete database_;
  }
  database_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportCatalog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Serialization.SerializedStops stops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Serialization.SerializedBuses buses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .Serialization.TransportRouter router = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_router(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Serialization.TransportRenderer renderer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_renderer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .YellowPages.Database database = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_database(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportCatalog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.TransportCatalog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Serialization.SerializedStops stops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stops(i), target, stream);
  }

  // repeated .Serialization.SerializedBuses buses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_buses(i), target, stream);
  }

  // .Serialization.TransportRouter router = 3;
  if (this->_internal_has_router()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::router(this), target, stream);
  }

  // .Serialization.TransportRenderer renderer = 4;
  if (this->_internal_has_renderer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::renderer(this), target, stream);
  }

  // .YellowPages.Database database = 5;
  if (this->_internal_has_database()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::database(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.TransportCatalog)
  return target;
}

size_t TransportCatalog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.TransportCatalog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Serialization.SerializedStops stops = 1;
  total_size += 1UL * this->_internal_stops_size();
  for (const auto& msg : this->stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Serialization.SerializedBuses buses = 2;
  total_size += 1UL * this->_internal_buses_size();
  for (const auto& msg : this->buses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Serialization.TransportRouter router = 3;
  if (this->_internal_has_router()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *router_);
  }

  // .Serialization.TransportRenderer renderer = 4;
  if (this->_internal_has_renderer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *renderer_);
  }

  // .YellowPages.Database database = 5;
  if (this->_internal_has_database()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *database_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransportCatalog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransportCatalog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransportCatalog::GetClassData() const { return &_class_data_; }

void TransportCatalog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransportCatalog *>(to)->MergeFrom(
      static_cast<const TransportCatalog &>(from));
}


void TransportCatalog::MergeFrom(const TransportCatalog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.TransportCatalog)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops_.MergeFrom(from.stops_);
  buses_.MergeFrom(from.buses_);
  if (from._internal_has_router()) {
    _internal_mutable_router()->::Serialization::TransportRouter::MergeFrom(from._internal_router());
  }
  if (from._internal_has_renderer()) {
    _internal_mutable_renderer()->::Serialization::TransportRenderer::MergeFrom(from._internal_renderer());
  }
  if (from._internal_has_database()) {
    _internal_mutable_database()->::YellowPages::Database::MergeFrom(from._internal_database());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransportCatalog::CopyFrom(const TransportCatalog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.TransportCatalog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportCatalog::IsInitialized() const {
  return true;
}

void TransportCatalog::InternalSwap(TransportCatalog* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stops_.InternalSwap(&other->stops_);
  buses_.InternalSwap(&other->buses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportCatalog, database_)
      + sizeof(TransportCatalog::database_)
      - PROTOBUF_FIELD_OFFSET(TransportCatalog, router_)>(
          reinterpret_cast<char*>(&router_),
          reinterpret_cast<char*>(&other->router_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportCatalog::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalog_2eproto_getter, &descriptor_table_transport_5fcatalog_2eproto_once,
      file_level_metadata_transport_5fcatalog_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Serialization
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Serialization::SerializedStops* Arena::CreateMaybeMessage< ::Serialization::SerializedStops >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::SerializedStops >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialization::SerializedBuses* Arena::CreateMaybeMessage< ::Serialization::SerializedBuses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::SerializedBuses >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialization::TransportCatalog* Arena::CreateMaybeMessage< ::Serialization::TransportCatalog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::TransportCatalog >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
