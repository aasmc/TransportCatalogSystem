// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalog.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "transport_router.pb.h"
#include "transport_renderer.pb.h"
#include "database.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalog_2eproto;
namespace Serialization {
class SerializedBuses;
struct SerializedBusesDefaultTypeInternal;
extern SerializedBusesDefaultTypeInternal _SerializedBuses_default_instance_;
class SerializedStops;
struct SerializedStopsDefaultTypeInternal;
extern SerializedStopsDefaultTypeInternal _SerializedStops_default_instance_;
class TransportCatalog;
struct TransportCatalogDefaultTypeInternal;
extern TransportCatalogDefaultTypeInternal _TransportCatalog_default_instance_;
}  // namespace Serialization
PROTOBUF_NAMESPACE_OPEN
template<> ::Serialization::SerializedBuses* Arena::CreateMaybeMessage<::Serialization::SerializedBuses>(Arena*);
template<> ::Serialization::SerializedStops* Arena::CreateMaybeMessage<::Serialization::SerializedStops>(Arena*);
template<> ::Serialization::TransportCatalog* Arena::CreateMaybeMessage<::Serialization::TransportCatalog>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Serialization {

// ===================================================================

class SerializedStops final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.SerializedStops) */ {
 public:
  inline SerializedStops() : SerializedStops(nullptr) {}
  ~SerializedStops() override;
  explicit constexpr SerializedStops(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedStops(const SerializedStops& from);
  SerializedStops(SerializedStops&& from) noexcept
    : SerializedStops() {
    *this = ::std::move(from);
  }

  inline SerializedStops& operator=(const SerializedStops& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedStops& operator=(SerializedStops&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedStops& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedStops* internal_default_instance() {
    return reinterpret_cast<const SerializedStops*>(
               &_SerializedStops_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SerializedStops& a, SerializedStops& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedStops* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedStops* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializedStops* New() const final {
    return new SerializedStops();
  }

  SerializedStops* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedStops>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedStops& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedStops& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedStops* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.SerializedStops";
  }
  protected:
  explicit SerializedStops(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusNamesFieldNumber = 2,
    kStopNameFieldNumber = 1,
  };
  // repeated string busNames = 2;
  int busnames_size() const;
  private:
  int _internal_busnames_size() const;
  public:
  void clear_busnames();
  const std::string& busnames(int index) const;
  std::string* mutable_busnames(int index);
  void set_busnames(int index, const std::string& value);
  void set_busnames(int index, std::string&& value);
  void set_busnames(int index, const char* value);
  void set_busnames(int index, const char* value, size_t size);
  std::string* add_busnames();
  void add_busnames(const std::string& value);
  void add_busnames(std::string&& value);
  void add_busnames(const char* value);
  void add_busnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& busnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_busnames();
  private:
  const std::string& _internal_busnames(int index) const;
  std::string* _internal_add_busnames();
  public:

  // string stopName = 1;
  void clear_stopname();
  const std::string& stopname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stopname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stopname();
  PROTOBUF_MUST_USE_RESULT std::string* release_stopname();
  void set_allocated_stopname(std::string* stopname);
  private:
  const std::string& _internal_stopname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stopname(const std::string& value);
  std::string* _internal_mutable_stopname();
  public:

  // @@protoc_insertion_point(class_scope:Serialization.SerializedStops)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> busnames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stopname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class SerializedBuses final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.SerializedBuses) */ {
 public:
  inline SerializedBuses() : SerializedBuses(nullptr) {}
  ~SerializedBuses() override;
  explicit constexpr SerializedBuses(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedBuses(const SerializedBuses& from);
  SerializedBuses(SerializedBuses&& from) noexcept
    : SerializedBuses() {
    *this = ::std::move(from);
  }

  inline SerializedBuses& operator=(const SerializedBuses& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedBuses& operator=(SerializedBuses&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedBuses& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedBuses* internal_default_instance() {
    return reinterpret_cast<const SerializedBuses*>(
               &_SerializedBuses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SerializedBuses& a, SerializedBuses& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedBuses* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedBuses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializedBuses* New() const final {
    return new SerializedBuses();
  }

  SerializedBuses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedBuses>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedBuses& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedBuses& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedBuses* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.SerializedBuses";
  }
  protected:
  explicit SerializedBuses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusNameFieldNumber = 1,
    kStopCountFieldNumber = 2,
    kUniqueStopCountFieldNumber = 3,
    kGeoRouteLengthFieldNumber = 5,
    kRoadRouteLengthFieldNumber = 4,
  };
  // string busName = 1;
  void clear_busname();
  const std::string& busname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_busname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_busname();
  PROTOBUF_MUST_USE_RESULT std::string* release_busname();
  void set_allocated_busname(std::string* busname);
  private:
  const std::string& _internal_busname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_busname(const std::string& value);
  std::string* _internal_mutable_busname();
  public:

  // uint32 stopCount = 2;
  void clear_stopcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 stopcount() const;
  void set_stopcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stopcount() const;
  void _internal_set_stopcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uniqueStopCount = 3;
  void clear_uniquestopcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 uniquestopcount() const;
  void set_uniquestopcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uniquestopcount() const;
  void _internal_set_uniquestopcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double geoRouteLength = 5;
  void clear_georoutelength();
  double georoutelength() const;
  void set_georoutelength(double value);
  private:
  double _internal_georoutelength() const;
  void _internal_set_georoutelength(double value);
  public:

  // int32 roadRouteLength = 4;
  void clear_roadroutelength();
  ::PROTOBUF_NAMESPACE_ID::int32 roadroutelength() const;
  void set_roadroutelength(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roadroutelength() const;
  void _internal_set_roadroutelength(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Serialization.SerializedBuses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr busname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stopcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uniquestopcount_;
  double georoutelength_;
  ::PROTOBUF_NAMESPACE_ID::int32 roadroutelength_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.TransportCatalog) */ {
 public:
  inline TransportCatalog() : TransportCatalog(nullptr) {}
  ~TransportCatalog() override;
  explicit constexpr TransportCatalog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalog(const TransportCatalog& from);
  TransportCatalog(TransportCatalog&& from) noexcept
    : TransportCatalog() {
    *this = ::std::move(from);
  }

  inline TransportCatalog& operator=(const TransportCatalog& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalog& operator=(TransportCatalog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalog& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalog* internal_default_instance() {
    return reinterpret_cast<const TransportCatalog*>(
               &_TransportCatalog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransportCatalog& a, TransportCatalog& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalog* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportCatalog* New() const final {
    return new TransportCatalog();
  }

  TransportCatalog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportCatalog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransportCatalog& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.TransportCatalog";
  }
  protected:
  explicit TransportCatalog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kBusesFieldNumber = 2,
    kRouterFieldNumber = 3,
    kRendererFieldNumber = 4,
    kDatabaseFieldNumber = 5,
  };
  // repeated .Serialization.SerializedStops stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::Serialization::SerializedStops* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::SerializedStops >*
      mutable_stops();
  private:
  const ::Serialization::SerializedStops& _internal_stops(int index) const;
  ::Serialization::SerializedStops* _internal_add_stops();
  public:
  const ::Serialization::SerializedStops& stops(int index) const;
  ::Serialization::SerializedStops* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::SerializedStops >&
      stops() const;

  // repeated .Serialization.SerializedBuses buses = 2;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::Serialization::SerializedBuses* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::SerializedBuses >*
      mutable_buses();
  private:
  const ::Serialization::SerializedBuses& _internal_buses(int index) const;
  ::Serialization::SerializedBuses* _internal_add_buses();
  public:
  const ::Serialization::SerializedBuses& buses(int index) const;
  ::Serialization::SerializedBuses* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::SerializedBuses >&
      buses() const;

  // .Serialization.TransportRouter router = 3;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::Serialization::TransportRouter& router() const;
  PROTOBUF_MUST_USE_RESULT ::Serialization::TransportRouter* release_router();
  ::Serialization::TransportRouter* mutable_router();
  void set_allocated_router(::Serialization::TransportRouter* router);
  private:
  const ::Serialization::TransportRouter& _internal_router() const;
  ::Serialization::TransportRouter* _internal_mutable_router();
  public:
  void unsafe_arena_set_allocated_router(
      ::Serialization::TransportRouter* router);
  ::Serialization::TransportRouter* unsafe_arena_release_router();

  // .Serialization.TransportRenderer renderer = 4;
  bool has_renderer() const;
  private:
  bool _internal_has_renderer() const;
  public:
  void clear_renderer();
  const ::Serialization::TransportRenderer& renderer() const;
  PROTOBUF_MUST_USE_RESULT ::Serialization::TransportRenderer* release_renderer();
  ::Serialization::TransportRenderer* mutable_renderer();
  void set_allocated_renderer(::Serialization::TransportRenderer* renderer);
  private:
  const ::Serialization::TransportRenderer& _internal_renderer() const;
  ::Serialization::TransportRenderer* _internal_mutable_renderer();
  public:
  void unsafe_arena_set_allocated_renderer(
      ::Serialization::TransportRenderer* renderer);
  ::Serialization::TransportRenderer* unsafe_arena_release_renderer();

  // .YellowPages.Database database = 5;
  bool has_database() const;
  private:
  bool _internal_has_database() const;
  public:
  void clear_database();
  const ::YellowPages::Database& database() const;
  PROTOBUF_MUST_USE_RESULT ::YellowPages::Database* release_database();
  ::YellowPages::Database* mutable_database();
  void set_allocated_database(::YellowPages::Database* database);
  private:
  const ::YellowPages::Database& _internal_database() const;
  ::YellowPages::Database* _internal_mutable_database();
  public:
  void unsafe_arena_set_allocated_database(
      ::YellowPages::Database* database);
  ::YellowPages::Database* unsafe_arena_release_database();

  // @@protoc_insertion_point(class_scope:Serialization.TransportCatalog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::SerializedStops > stops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::SerializedBuses > buses_;
  ::Serialization::TransportRouter* router_;
  ::Serialization::TransportRenderer* renderer_;
  ::YellowPages::Database* database_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SerializedStops

// string stopName = 1;
inline void SerializedStops::clear_stopname() {
  stopname_.ClearToEmpty();
}
inline const std::string& SerializedStops::stopname() const {
  // @@protoc_insertion_point(field_get:Serialization.SerializedStops.stopName)
  return _internal_stopname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SerializedStops::set_stopname(ArgT0&& arg0, ArgT... args) {
 
 stopname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Serialization.SerializedStops.stopName)
}
inline std::string* SerializedStops::mutable_stopname() {
  std::string* _s = _internal_mutable_stopname();
  // @@protoc_insertion_point(field_mutable:Serialization.SerializedStops.stopName)
  return _s;
}
inline const std::string& SerializedStops::_internal_stopname() const {
  return stopname_.Get();
}
inline void SerializedStops::_internal_set_stopname(const std::string& value) {
  
  stopname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SerializedStops::_internal_mutable_stopname() {
  
  return stopname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SerializedStops::release_stopname() {
  // @@protoc_insertion_point(field_release:Serialization.SerializedStops.stopName)
  return stopname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SerializedStops::set_allocated_stopname(std::string* stopname) {
  if (stopname != nullptr) {
    
  } else {
    
  }
  stopname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stopname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Serialization.SerializedStops.stopName)
}

// repeated string busNames = 2;
inline int SerializedStops::_internal_busnames_size() const {
  return busnames_.size();
}
inline int SerializedStops::busnames_size() const {
  return _internal_busnames_size();
}
inline void SerializedStops::clear_busnames() {
  busnames_.Clear();
}
inline std::string* SerializedStops::add_busnames() {
  std::string* _s = _internal_add_busnames();
  // @@protoc_insertion_point(field_add_mutable:Serialization.SerializedStops.busNames)
  return _s;
}
inline const std::string& SerializedStops::_internal_busnames(int index) const {
  return busnames_.Get(index);
}
inline const std::string& SerializedStops::busnames(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.SerializedStops.busNames)
  return _internal_busnames(index);
}
inline std::string* SerializedStops::mutable_busnames(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.SerializedStops.busNames)
  return busnames_.Mutable(index);
}
inline void SerializedStops::set_busnames(int index, const std::string& value) {
  busnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Serialization.SerializedStops.busNames)
}
inline void SerializedStops::set_busnames(int index, std::string&& value) {
  busnames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Serialization.SerializedStops.busNames)
}
inline void SerializedStops::set_busnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  busnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Serialization.SerializedStops.busNames)
}
inline void SerializedStops::set_busnames(int index, const char* value, size_t size) {
  busnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Serialization.SerializedStops.busNames)
}
inline std::string* SerializedStops::_internal_add_busnames() {
  return busnames_.Add();
}
inline void SerializedStops::add_busnames(const std::string& value) {
  busnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Serialization.SerializedStops.busNames)
}
inline void SerializedStops::add_busnames(std::string&& value) {
  busnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Serialization.SerializedStops.busNames)
}
inline void SerializedStops::add_busnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  busnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Serialization.SerializedStops.busNames)
}
inline void SerializedStops::add_busnames(const char* value, size_t size) {
  busnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Serialization.SerializedStops.busNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SerializedStops::busnames() const {
  // @@protoc_insertion_point(field_list:Serialization.SerializedStops.busNames)
  return busnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SerializedStops::mutable_busnames() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.SerializedStops.busNames)
  return &busnames_;
}

// -------------------------------------------------------------------

// SerializedBuses

// string busName = 1;
inline void SerializedBuses::clear_busname() {
  busname_.ClearToEmpty();
}
inline const std::string& SerializedBuses::busname() const {
  // @@protoc_insertion_point(field_get:Serialization.SerializedBuses.busName)
  return _internal_busname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SerializedBuses::set_busname(ArgT0&& arg0, ArgT... args) {
 
 busname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Serialization.SerializedBuses.busName)
}
inline std::string* SerializedBuses::mutable_busname() {
  std::string* _s = _internal_mutable_busname();
  // @@protoc_insertion_point(field_mutable:Serialization.SerializedBuses.busName)
  return _s;
}
inline const std::string& SerializedBuses::_internal_busname() const {
  return busname_.Get();
}
inline void SerializedBuses::_internal_set_busname(const std::string& value) {
  
  busname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SerializedBuses::_internal_mutable_busname() {
  
  return busname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SerializedBuses::release_busname() {
  // @@protoc_insertion_point(field_release:Serialization.SerializedBuses.busName)
  return busname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SerializedBuses::set_allocated_busname(std::string* busname) {
  if (busname != nullptr) {
    
  } else {
    
  }
  busname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), busname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Serialization.SerializedBuses.busName)
}

// uint32 stopCount = 2;
inline void SerializedBuses::clear_stopcount() {
  stopcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SerializedBuses::_internal_stopcount() const {
  return stopcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SerializedBuses::stopcount() const {
  // @@protoc_insertion_point(field_get:Serialization.SerializedBuses.stopCount)
  return _internal_stopcount();
}
inline void SerializedBuses::_internal_set_stopcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stopcount_ = value;
}
inline void SerializedBuses::set_stopcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stopcount(value);
  // @@protoc_insertion_point(field_set:Serialization.SerializedBuses.stopCount)
}

// uint32 uniqueStopCount = 3;
inline void SerializedBuses::clear_uniquestopcount() {
  uniquestopcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SerializedBuses::_internal_uniquestopcount() const {
  return uniquestopcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SerializedBuses::uniquestopcount() const {
  // @@protoc_insertion_point(field_get:Serialization.SerializedBuses.uniqueStopCount)
  return _internal_uniquestopcount();
}
inline void SerializedBuses::_internal_set_uniquestopcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uniquestopcount_ = value;
}
inline void SerializedBuses::set_uniquestopcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uniquestopcount(value);
  // @@protoc_insertion_point(field_set:Serialization.SerializedBuses.uniqueStopCount)
}

// int32 roadRouteLength = 4;
inline void SerializedBuses::clear_roadroutelength() {
  roadroutelength_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SerializedBuses::_internal_roadroutelength() const {
  return roadroutelength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SerializedBuses::roadroutelength() const {
  // @@protoc_insertion_point(field_get:Serialization.SerializedBuses.roadRouteLength)
  return _internal_roadroutelength();
}
inline void SerializedBuses::_internal_set_roadroutelength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roadroutelength_ = value;
}
inline void SerializedBuses::set_roadroutelength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roadroutelength(value);
  // @@protoc_insertion_point(field_set:Serialization.SerializedBuses.roadRouteLength)
}

// double geoRouteLength = 5;
inline void SerializedBuses::clear_georoutelength() {
  georoutelength_ = 0;
}
inline double SerializedBuses::_internal_georoutelength() const {
  return georoutelength_;
}
inline double SerializedBuses::georoutelength() const {
  // @@protoc_insertion_point(field_get:Serialization.SerializedBuses.geoRouteLength)
  return _internal_georoutelength();
}
inline void SerializedBuses::_internal_set_georoutelength(double value) {
  
  georoutelength_ = value;
}
inline void SerializedBuses::set_georoutelength(double value) {
  _internal_set_georoutelength(value);
  // @@protoc_insertion_point(field_set:Serialization.SerializedBuses.geoRouteLength)
}

// -------------------------------------------------------------------

// TransportCatalog

// repeated .Serialization.SerializedStops stops = 1;
inline int TransportCatalog::_internal_stops_size() const {
  return stops_.size();
}
inline int TransportCatalog::stops_size() const {
  return _internal_stops_size();
}
inline void TransportCatalog::clear_stops() {
  stops_.Clear();
}
inline ::Serialization::SerializedStops* TransportCatalog::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.TransportCatalog.stops)
  return stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::SerializedStops >*
TransportCatalog::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.TransportCatalog.stops)
  return &stops_;
}
inline const ::Serialization::SerializedStops& TransportCatalog::_internal_stops(int index) const {
  return stops_.Get(index);
}
inline const ::Serialization::SerializedStops& TransportCatalog::stops(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.TransportCatalog.stops)
  return _internal_stops(index);
}
inline ::Serialization::SerializedStops* TransportCatalog::_internal_add_stops() {
  return stops_.Add();
}
inline ::Serialization::SerializedStops* TransportCatalog::add_stops() {
  ::Serialization::SerializedStops* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:Serialization.TransportCatalog.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::SerializedStops >&
TransportCatalog::stops() const {
  // @@protoc_insertion_point(field_list:Serialization.TransportCatalog.stops)
  return stops_;
}

// repeated .Serialization.SerializedBuses buses = 2;
inline int TransportCatalog::_internal_buses_size() const {
  return buses_.size();
}
inline int TransportCatalog::buses_size() const {
  return _internal_buses_size();
}
inline void TransportCatalog::clear_buses() {
  buses_.Clear();
}
inline ::Serialization::SerializedBuses* TransportCatalog::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.TransportCatalog.buses)
  return buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::SerializedBuses >*
TransportCatalog::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.TransportCatalog.buses)
  return &buses_;
}
inline const ::Serialization::SerializedBuses& TransportCatalog::_internal_buses(int index) const {
  return buses_.Get(index);
}
inline const ::Serialization::SerializedBuses& TransportCatalog::buses(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.TransportCatalog.buses)
  return _internal_buses(index);
}
inline ::Serialization::SerializedBuses* TransportCatalog::_internal_add_buses() {
  return buses_.Add();
}
inline ::Serialization::SerializedBuses* TransportCatalog::add_buses() {
  ::Serialization::SerializedBuses* _add = _internal_add_buses();
  // @@protoc_insertion_point(field_add:Serialization.TransportCatalog.buses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::SerializedBuses >&
TransportCatalog::buses() const {
  // @@protoc_insertion_point(field_list:Serialization.TransportCatalog.buses)
  return buses_;
}

// .Serialization.TransportRouter router = 3;
inline bool TransportCatalog::_internal_has_router() const {
  return this != internal_default_instance() && router_ != nullptr;
}
inline bool TransportCatalog::has_router() const {
  return _internal_has_router();
}
inline const ::Serialization::TransportRouter& TransportCatalog::_internal_router() const {
  const ::Serialization::TransportRouter* p = router_;
  return p != nullptr ? *p : reinterpret_cast<const ::Serialization::TransportRouter&>(
      ::Serialization::_TransportRouter_default_instance_);
}
inline const ::Serialization::TransportRouter& TransportCatalog::router() const {
  // @@protoc_insertion_point(field_get:Serialization.TransportCatalog.router)
  return _internal_router();
}
inline void TransportCatalog::unsafe_arena_set_allocated_router(
    ::Serialization::TransportRouter* router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_);
  }
  router_ = router;
  if (router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialization.TransportCatalog.router)
}
inline ::Serialization::TransportRouter* TransportCatalog::release_router() {
  
  ::Serialization::TransportRouter* temp = router_;
  router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Serialization::TransportRouter* TransportCatalog::unsafe_arena_release_router() {
  // @@protoc_insertion_point(field_release:Serialization.TransportCatalog.router)
  
  ::Serialization::TransportRouter* temp = router_;
  router_ = nullptr;
  return temp;
}
inline ::Serialization::TransportRouter* TransportCatalog::_internal_mutable_router() {
  
  if (router_ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialization::TransportRouter>(GetArenaForAllocation());
    router_ = p;
  }
  return router_;
}
inline ::Serialization::TransportRouter* TransportCatalog::mutable_router() {
  ::Serialization::TransportRouter* _msg = _internal_mutable_router();
  // @@protoc_insertion_point(field_mutable:Serialization.TransportCatalog.router)
  return _msg;
}
inline void TransportCatalog::set_allocated_router(::Serialization::TransportRouter* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_);
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router));
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  router_ = router;
  // @@protoc_insertion_point(field_set_allocated:Serialization.TransportCatalog.router)
}

// .Serialization.TransportRenderer renderer = 4;
inline bool TransportCatalog::_internal_has_renderer() const {
  return this != internal_default_instance() && renderer_ != nullptr;
}
inline bool TransportCatalog::has_renderer() const {
  return _internal_has_renderer();
}
inline const ::Serialization::TransportRenderer& TransportCatalog::_internal_renderer() const {
  const ::Serialization::TransportRenderer* p = renderer_;
  return p != nullptr ? *p : reinterpret_cast<const ::Serialization::TransportRenderer&>(
      ::Serialization::_TransportRenderer_default_instance_);
}
inline const ::Serialization::TransportRenderer& TransportCatalog::renderer() const {
  // @@protoc_insertion_point(field_get:Serialization.TransportCatalog.renderer)
  return _internal_renderer();
}
inline void TransportCatalog::unsafe_arena_set_allocated_renderer(
    ::Serialization::TransportRenderer* renderer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderer_);
  }
  renderer_ = renderer;
  if (renderer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialization.TransportCatalog.renderer)
}
inline ::Serialization::TransportRenderer* TransportCatalog::release_renderer() {
  
  ::Serialization::TransportRenderer* temp = renderer_;
  renderer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Serialization::TransportRenderer* TransportCatalog::unsafe_arena_release_renderer() {
  // @@protoc_insertion_point(field_release:Serialization.TransportCatalog.renderer)
  
  ::Serialization::TransportRenderer* temp = renderer_;
  renderer_ = nullptr;
  return temp;
}
inline ::Serialization::TransportRenderer* TransportCatalog::_internal_mutable_renderer() {
  
  if (renderer_ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialization::TransportRenderer>(GetArenaForAllocation());
    renderer_ = p;
  }
  return renderer_;
}
inline ::Serialization::TransportRenderer* TransportCatalog::mutable_renderer() {
  ::Serialization::TransportRenderer* _msg = _internal_mutable_renderer();
  // @@protoc_insertion_point(field_mutable:Serialization.TransportCatalog.renderer)
  return _msg;
}
inline void TransportCatalog::set_allocated_renderer(::Serialization::TransportRenderer* renderer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderer_);
  }
  if (renderer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderer));
    if (message_arena != submessage_arena) {
      renderer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderer, submessage_arena);
    }
    
  } else {
    
  }
  renderer_ = renderer;
  // @@protoc_insertion_point(field_set_allocated:Serialization.TransportCatalog.renderer)
}

// .YellowPages.Database database = 5;
inline bool TransportCatalog::_internal_has_database() const {
  return this != internal_default_instance() && database_ != nullptr;
}
inline bool TransportCatalog::has_database() const {
  return _internal_has_database();
}
inline const ::YellowPages::Database& TransportCatalog::_internal_database() const {
  const ::YellowPages::Database* p = database_;
  return p != nullptr ? *p : reinterpret_cast<const ::YellowPages::Database&>(
      ::YellowPages::_Database_default_instance_);
}
inline const ::YellowPages::Database& TransportCatalog::database() const {
  // @@protoc_insertion_point(field_get:Serialization.TransportCatalog.database)
  return _internal_database();
}
inline void TransportCatalog::unsafe_arena_set_allocated_database(
    ::YellowPages::Database* database) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_);
  }
  database_ = database;
  if (database) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialization.TransportCatalog.database)
}
inline ::YellowPages::Database* TransportCatalog::release_database() {
  
  ::YellowPages::Database* temp = database_;
  database_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::YellowPages::Database* TransportCatalog::unsafe_arena_release_database() {
  // @@protoc_insertion_point(field_release:Serialization.TransportCatalog.database)
  
  ::YellowPages::Database* temp = database_;
  database_ = nullptr;
  return temp;
}
inline ::YellowPages::Database* TransportCatalog::_internal_mutable_database() {
  
  if (database_ == nullptr) {
    auto* p = CreateMaybeMessage<::YellowPages::Database>(GetArenaForAllocation());
    database_ = p;
  }
  return database_;
}
inline ::YellowPages::Database* TransportCatalog::mutable_database() {
  ::YellowPages::Database* _msg = _internal_mutable_database();
  // @@protoc_insertion_point(field_mutable:Serialization.TransportCatalog.database)
  return _msg;
}
inline void TransportCatalog::set_allocated_database(::YellowPages::Database* database) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_);
  }
  if (database) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database));
    if (message_arena != submessage_arena) {
      database = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database, submessage_arena);
    }
    
  } else {
    
  }
  database_ = database;
  // @@protoc_insertion_point(field_set_allocated:Serialization.TransportCatalog.database)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialization

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalog_2eproto
