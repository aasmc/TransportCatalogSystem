// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "directed_graph.pb.h"
#include "router.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5frouter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto;
namespace Serialization {
class BusEdgeInfo;
struct BusEdgeInfoDefaultTypeInternal;
extern BusEdgeInfoDefaultTypeInternal _BusEdgeInfo_default_instance_;
class CompaniesVertices;
struct CompaniesVerticesDefaultTypeInternal;
extern CompaniesVerticesDefaultTypeInternal _CompaniesVertices_default_instance_;
class EdgeInfo;
struct EdgeInfoDefaultTypeInternal;
extern EdgeInfoDefaultTypeInternal _EdgeInfo_default_instance_;
class SerializedRoutingSettings;
struct SerializedRoutingSettingsDefaultTypeInternal;
extern SerializedRoutingSettingsDefaultTypeInternal _SerializedRoutingSettings_default_instance_;
class SerializedStopVertexIds;
struct SerializedStopVertexIdsDefaultTypeInternal;
extern SerializedStopVertexIdsDefaultTypeInternal _SerializedStopVertexIds_default_instance_;
class TransportRouter;
struct TransportRouterDefaultTypeInternal;
extern TransportRouterDefaultTypeInternal _TransportRouter_default_instance_;
class VertexInfo;
struct VertexInfoDefaultTypeInternal;
extern VertexInfoDefaultTypeInternal _VertexInfo_default_instance_;
class WaitEdgeInfo;
struct WaitEdgeInfoDefaultTypeInternal;
extern WaitEdgeInfoDefaultTypeInternal _WaitEdgeInfo_default_instance_;
class WalkEdgeInfo;
struct WalkEdgeInfoDefaultTypeInternal;
extern WalkEdgeInfoDefaultTypeInternal _WalkEdgeInfo_default_instance_;
}  // namespace Serialization
PROTOBUF_NAMESPACE_OPEN
template<> ::Serialization::BusEdgeInfo* Arena::CreateMaybeMessage<::Serialization::BusEdgeInfo>(Arena*);
template<> ::Serialization::CompaniesVertices* Arena::CreateMaybeMessage<::Serialization::CompaniesVertices>(Arena*);
template<> ::Serialization::EdgeInfo* Arena::CreateMaybeMessage<::Serialization::EdgeInfo>(Arena*);
template<> ::Serialization::SerializedRoutingSettings* Arena::CreateMaybeMessage<::Serialization::SerializedRoutingSettings>(Arena*);
template<> ::Serialization::SerializedStopVertexIds* Arena::CreateMaybeMessage<::Serialization::SerializedStopVertexIds>(Arena*);
template<> ::Serialization::TransportRouter* Arena::CreateMaybeMessage<::Serialization::TransportRouter>(Arena*);
template<> ::Serialization::VertexInfo* Arena::CreateMaybeMessage<::Serialization::VertexInfo>(Arena*);
template<> ::Serialization::WaitEdgeInfo* Arena::CreateMaybeMessage<::Serialization::WaitEdgeInfo>(Arena*);
template<> ::Serialization::WalkEdgeInfo* Arena::CreateMaybeMessage<::Serialization::WalkEdgeInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Serialization {

// ===================================================================

class SerializedRoutingSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.SerializedRoutingSettings) */ {
 public:
  inline SerializedRoutingSettings() : SerializedRoutingSettings(nullptr) {}
  ~SerializedRoutingSettings() override;
  explicit constexpr SerializedRoutingSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedRoutingSettings(const SerializedRoutingSettings& from);
  SerializedRoutingSettings(SerializedRoutingSettings&& from) noexcept
    : SerializedRoutingSettings() {
    *this = ::std::move(from);
  }

  inline SerializedRoutingSettings& operator=(const SerializedRoutingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedRoutingSettings& operator=(SerializedRoutingSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedRoutingSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedRoutingSettings* internal_default_instance() {
    return reinterpret_cast<const SerializedRoutingSettings*>(
               &_SerializedRoutingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SerializedRoutingSettings& a, SerializedRoutingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedRoutingSettings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedRoutingSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializedRoutingSettings* New() const final {
    return new SerializedRoutingSettings();
  }

  SerializedRoutingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedRoutingSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedRoutingSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedRoutingSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedRoutingSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.SerializedRoutingSettings";
  }
  protected:
  explicit SerializedRoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusVelocityFieldNumber = 2,
    kPedestrianVelocityFieldNumber = 3,
    kBusWaitTimeFieldNumber = 1,
  };
  // double busVelocity = 2;
  void clear_busvelocity();
  double busvelocity() const;
  void set_busvelocity(double value);
  private:
  double _internal_busvelocity() const;
  void _internal_set_busvelocity(double value);
  public:

  // double pedestrianVelocity = 3;
  void clear_pedestrianvelocity();
  double pedestrianvelocity() const;
  void set_pedestrianvelocity(double value);
  private:
  double _internal_pedestrianvelocity() const;
  void _internal_set_pedestrianvelocity(double value);
  public:

  // int32 busWaitTime = 1;
  void clear_buswaittime();
  ::PROTOBUF_NAMESPACE_ID::int32 buswaittime() const;
  void set_buswaittime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buswaittime() const;
  void _internal_set_buswaittime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Serialization.SerializedRoutingSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double busvelocity_;
  double pedestrianvelocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 buswaittime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class SerializedStopVertexIds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.SerializedStopVertexIds) */ {
 public:
  inline SerializedStopVertexIds() : SerializedStopVertexIds(nullptr) {}
  ~SerializedStopVertexIds() override;
  explicit constexpr SerializedStopVertexIds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedStopVertexIds(const SerializedStopVertexIds& from);
  SerializedStopVertexIds(SerializedStopVertexIds&& from) noexcept
    : SerializedStopVertexIds() {
    *this = ::std::move(from);
  }

  inline SerializedStopVertexIds& operator=(const SerializedStopVertexIds& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedStopVertexIds& operator=(SerializedStopVertexIds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedStopVertexIds& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedStopVertexIds* internal_default_instance() {
    return reinterpret_cast<const SerializedStopVertexIds*>(
               &_SerializedStopVertexIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SerializedStopVertexIds& a, SerializedStopVertexIds& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedStopVertexIds* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedStopVertexIds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializedStopVertexIds* New() const final {
    return new SerializedStopVertexIds();
  }

  SerializedStopVertexIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedStopVertexIds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedStopVertexIds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedStopVertexIds& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedStopVertexIds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.SerializedStopVertexIds";
  }
  protected:
  explicit SerializedStopVertexIds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kInFieldNumber = 2,
    kOutFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 in = 2;
  void clear_in();
  ::PROTOBUF_NAMESPACE_ID::uint32 in() const;
  void set_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_in() const;
  void _internal_set_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 out = 3;
  void clear_out();
  ::PROTOBUF_NAMESPACE_ID::uint32 out() const;
  void set_out(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_out() const;
  void _internal_set_out(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Serialization.SerializedStopVertexIds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 in_;
  ::PROTOBUF_NAMESPACE_ID::uint32 out_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class VertexInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.VertexInfo) */ {
 public:
  inline VertexInfo() : VertexInfo(nullptr) {}
  ~VertexInfo() override;
  explicit constexpr VertexInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VertexInfo(const VertexInfo& from);
  VertexInfo(VertexInfo&& from) noexcept
    : VertexInfo() {
    *this = ::std::move(from);
  }

  inline VertexInfo& operator=(const VertexInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexInfo& operator=(VertexInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VertexInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VertexInfo* internal_default_instance() {
    return reinterpret_cast<const VertexInfo*>(
               &_VertexInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VertexInfo& a, VertexInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VertexInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VertexInfo* New() const final {
    return new VertexInfo();
  }

  VertexInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VertexInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VertexInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VertexInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.VertexInfo";
  }
  protected:
  explicit VertexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopNameFieldNumber = 1,
  };
  // string stopName = 1;
  void clear_stopname();
  const std::string& stopname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stopname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stopname();
  PROTOBUF_MUST_USE_RESULT std::string* release_stopname();
  void set_allocated_stopname(std::string* stopname);
  private:
  const std::string& _internal_stopname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stopname(const std::string& value);
  std::string* _internal_mutable_stopname();
  public:

  // @@protoc_insertion_point(class_scope:Serialization.VertexInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stopname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class BusEdgeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.BusEdgeInfo) */ {
 public:
  inline BusEdgeInfo() : BusEdgeInfo(nullptr) {}
  ~BusEdgeInfo() override;
  explicit constexpr BusEdgeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusEdgeInfo(const BusEdgeInfo& from);
  BusEdgeInfo(BusEdgeInfo&& from) noexcept
    : BusEdgeInfo() {
    *this = ::std::move(from);
  }

  inline BusEdgeInfo& operator=(const BusEdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusEdgeInfo& operator=(BusEdgeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusEdgeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusEdgeInfo* internal_default_instance() {
    return reinterpret_cast<const BusEdgeInfo*>(
               &_BusEdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BusEdgeInfo& a, BusEdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BusEdgeInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusEdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusEdgeInfo* New() const final {
    return new BusEdgeInfo();
  }

  BusEdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusEdgeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusEdgeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BusEdgeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusEdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.BusEdgeInfo";
  }
  protected:
  explicit BusEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSpanCountFieldNumber = 2,
    kStartStopIndexFieldNumber = 3,
    kEndStopIndexFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 spanCount = 2;
  void clear_spancount();
  ::PROTOBUF_NAMESPACE_ID::uint32 spancount() const;
  void set_spancount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spancount() const;
  void _internal_set_spancount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 startStopIndex = 3;
  void clear_startstopindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 startstopindex() const;
  void set_startstopindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_startstopindex() const;
  void _internal_set_startstopindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 endStopIndex = 4;
  void clear_endstopindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 endstopindex() const;
  void set_endstopindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_endstopindex() const;
  void _internal_set_endstopindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Serialization.BusEdgeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spancount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 startstopindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 endstopindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class WaitEdgeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.WaitEdgeInfo) */ {
 public:
  inline WaitEdgeInfo() : WaitEdgeInfo(nullptr) {}
  ~WaitEdgeInfo() override;
  explicit constexpr WaitEdgeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitEdgeInfo(const WaitEdgeInfo& from);
  WaitEdgeInfo(WaitEdgeInfo&& from) noexcept
    : WaitEdgeInfo() {
    *this = ::std::move(from);
  }

  inline WaitEdgeInfo& operator=(const WaitEdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitEdgeInfo& operator=(WaitEdgeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitEdgeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitEdgeInfo* internal_default_instance() {
    return reinterpret_cast<const WaitEdgeInfo*>(
               &_WaitEdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WaitEdgeInfo& a, WaitEdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitEdgeInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitEdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WaitEdgeInfo* New() const final {
    return new WaitEdgeInfo();
  }

  WaitEdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitEdgeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaitEdgeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WaitEdgeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitEdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.WaitEdgeInfo";
  }
  protected:
  explicit WaitEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Serialization.WaitEdgeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class WalkEdgeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.WalkEdgeInfo) */ {
 public:
  inline WalkEdgeInfo() : WalkEdgeInfo(nullptr) {}
  ~WalkEdgeInfo() override;
  explicit constexpr WalkEdgeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WalkEdgeInfo(const WalkEdgeInfo& from);
  WalkEdgeInfo(WalkEdgeInfo&& from) noexcept
    : WalkEdgeInfo() {
    *this = ::std::move(from);
  }

  inline WalkEdgeInfo& operator=(const WalkEdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalkEdgeInfo& operator=(WalkEdgeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WalkEdgeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WalkEdgeInfo* internal_default_instance() {
    return reinterpret_cast<const WalkEdgeInfo*>(
               &_WalkEdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WalkEdgeInfo& a, WalkEdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WalkEdgeInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WalkEdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WalkEdgeInfo* New() const final {
    return new WalkEdgeInfo();
  }

  WalkEdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WalkEdgeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WalkEdgeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WalkEdgeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WalkEdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.WalkEdgeInfo";
  }
  protected:
  explicit WalkEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompanyNameFieldNumber = 1,
    kCompanyDisplayNameFieldNumber = 2,
    kStopNameFieldNumber = 3,
  };
  // string companyName = 1;
  void clear_companyname();
  const std::string& companyname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_companyname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_companyname();
  PROTOBUF_MUST_USE_RESULT std::string* release_companyname();
  void set_allocated_companyname(std::string* companyname);
  private:
  const std::string& _internal_companyname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_companyname(const std::string& value);
  std::string* _internal_mutable_companyname();
  public:

  // string companyDisplayName = 2;
  void clear_companydisplayname();
  const std::string& companydisplayname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_companydisplayname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_companydisplayname();
  PROTOBUF_MUST_USE_RESULT std::string* release_companydisplayname();
  void set_allocated_companydisplayname(std::string* companydisplayname);
  private:
  const std::string& _internal_companydisplayname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_companydisplayname(const std::string& value);
  std::string* _internal_mutable_companydisplayname();
  public:

  // string stopName = 3;
  void clear_stopname();
  const std::string& stopname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stopname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stopname();
  PROTOBUF_MUST_USE_RESULT std::string* release_stopname();
  void set_allocated_stopname(std::string* stopname);
  private:
  const std::string& _internal_stopname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stopname(const std::string& value);
  std::string* _internal_mutable_stopname();
  public:

  // @@protoc_insertion_point(class_scope:Serialization.WalkEdgeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr companyname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr companydisplayname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stopname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class CompaniesVertices final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.CompaniesVertices) */ {
 public:
  inline CompaniesVertices() : CompaniesVertices(nullptr) {}
  ~CompaniesVertices() override;
  explicit constexpr CompaniesVertices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompaniesVertices(const CompaniesVertices& from);
  CompaniesVertices(CompaniesVertices&& from) noexcept
    : CompaniesVertices() {
    *this = ::std::move(from);
  }

  inline CompaniesVertices& operator=(const CompaniesVertices& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompaniesVertices& operator=(CompaniesVertices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompaniesVertices& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompaniesVertices* internal_default_instance() {
    return reinterpret_cast<const CompaniesVertices*>(
               &_CompaniesVertices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CompaniesVertices& a, CompaniesVertices& b) {
    a.Swap(&b);
  }
  inline void Swap(CompaniesVertices* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompaniesVertices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompaniesVertices* New() const final {
    return new CompaniesVertices();
  }

  CompaniesVertices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompaniesVertices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompaniesVertices& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CompaniesVertices& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompaniesVertices* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.CompaniesVertices";
  }
  protected:
  explicit CompaniesVertices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompanyNameFieldNumber = 1,
    kVertexIdFieldNumber = 2,
  };
  // string companyName = 1;
  void clear_companyname();
  const std::string& companyname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_companyname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_companyname();
  PROTOBUF_MUST_USE_RESULT std::string* release_companyname();
  void set_allocated_companyname(std::string* companyname);
  private:
  const std::string& _internal_companyname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_companyname(const std::string& value);
  std::string* _internal_mutable_companyname();
  public:

  // uint32 vertexId = 2;
  void clear_vertexid();
  ::PROTOBUF_NAMESPACE_ID::uint32 vertexid() const;
  void set_vertexid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vertexid() const;
  void _internal_set_vertexid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Serialization.CompaniesVertices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr companyname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vertexid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class EdgeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.EdgeInfo) */ {
 public:
  inline EdgeInfo() : EdgeInfo(nullptr) {}
  ~EdgeInfo() override;
  explicit constexpr EdgeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeInfo(const EdgeInfo& from);
  EdgeInfo(EdgeInfo&& from) noexcept
    : EdgeInfo() {
    *this = ::std::move(from);
  }

  inline EdgeInfo& operator=(const EdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeInfo& operator=(EdgeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeInfo& default_instance() {
    return *internal_default_instance();
  }
  enum EdgeInfoCase {
    kBusEdgeInfo = 1,
    kWaitEdgeInfo = 2,
    kWalkEdgeInfo = 3,
    EDGEINFO_NOT_SET = 0,
  };

  static inline const EdgeInfo* internal_default_instance() {
    return reinterpret_cast<const EdgeInfo*>(
               &_EdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EdgeInfo& a, EdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EdgeInfo* New() const final {
    return new EdgeInfo();
  }

  EdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EdgeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EdgeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.EdgeInfo";
  }
  protected:
  explicit EdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusEdgeInfoFieldNumber = 1,
    kWaitEdgeInfoFieldNumber = 2,
    kWalkEdgeInfoFieldNumber = 3,
  };
  // .Serialization.BusEdgeInfo busEdgeInfo = 1;
  bool has_busedgeinfo() const;
  private:
  bool _internal_has_busedgeinfo() const;
  public:
  void clear_busedgeinfo();
  const ::Serialization::BusEdgeInfo& busedgeinfo() const;
  PROTOBUF_MUST_USE_RESULT ::Serialization::BusEdgeInfo* release_busedgeinfo();
  ::Serialization::BusEdgeInfo* mutable_busedgeinfo();
  void set_allocated_busedgeinfo(::Serialization::BusEdgeInfo* busedgeinfo);
  private:
  const ::Serialization::BusEdgeInfo& _internal_busedgeinfo() const;
  ::Serialization::BusEdgeInfo* _internal_mutable_busedgeinfo();
  public:
  void unsafe_arena_set_allocated_busedgeinfo(
      ::Serialization::BusEdgeInfo* busedgeinfo);
  ::Serialization::BusEdgeInfo* unsafe_arena_release_busedgeinfo();

  // .Serialization.WaitEdgeInfo waitEdgeInfo = 2;
  bool has_waitedgeinfo() const;
  private:
  bool _internal_has_waitedgeinfo() const;
  public:
  void clear_waitedgeinfo();
  const ::Serialization::WaitEdgeInfo& waitedgeinfo() const;
  PROTOBUF_MUST_USE_RESULT ::Serialization::WaitEdgeInfo* release_waitedgeinfo();
  ::Serialization::WaitEdgeInfo* mutable_waitedgeinfo();
  void set_allocated_waitedgeinfo(::Serialization::WaitEdgeInfo* waitedgeinfo);
  private:
  const ::Serialization::WaitEdgeInfo& _internal_waitedgeinfo() const;
  ::Serialization::WaitEdgeInfo* _internal_mutable_waitedgeinfo();
  public:
  void unsafe_arena_set_allocated_waitedgeinfo(
      ::Serialization::WaitEdgeInfo* waitedgeinfo);
  ::Serialization::WaitEdgeInfo* unsafe_arena_release_waitedgeinfo();

  // .Serialization.WalkEdgeInfo walkEdgeInfo = 3;
  bool has_walkedgeinfo() const;
  private:
  bool _internal_has_walkedgeinfo() const;
  public:
  void clear_walkedgeinfo();
  const ::Serialization::WalkEdgeInfo& walkedgeinfo() const;
  PROTOBUF_MUST_USE_RESULT ::Serialization::WalkEdgeInfo* release_walkedgeinfo();
  ::Serialization::WalkEdgeInfo* mutable_walkedgeinfo();
  void set_allocated_walkedgeinfo(::Serialization::WalkEdgeInfo* walkedgeinfo);
  private:
  const ::Serialization::WalkEdgeInfo& _internal_walkedgeinfo() const;
  ::Serialization::WalkEdgeInfo* _internal_mutable_walkedgeinfo();
  public:
  void unsafe_arena_set_allocated_walkedgeinfo(
      ::Serialization::WalkEdgeInfo* walkedgeinfo);
  ::Serialization::WalkEdgeInfo* unsafe_arena_release_walkedgeinfo();

  void clear_edgeInfo();
  EdgeInfoCase edgeInfo_case() const;
  // @@protoc_insertion_point(class_scope:Serialization.EdgeInfo)
 private:
  class _Internal;
  void set_has_busedgeinfo();
  void set_has_waitedgeinfo();
  void set_has_walkedgeinfo();

  inline bool has_edgeInfo() const;
  inline void clear_has_edgeInfo();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union EdgeInfoUnion {
    constexpr EdgeInfoUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::Serialization::BusEdgeInfo* busedgeinfo_;
    ::Serialization::WaitEdgeInfo* waitedgeinfo_;
    ::Serialization::WalkEdgeInfo* walkedgeinfo_;
  } edgeInfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class TransportRouter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialization.TransportRouter) */ {
 public:
  inline TransportRouter() : TransportRouter(nullptr) {}
  ~TransportRouter() override;
  explicit constexpr TransportRouter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportRouter(const TransportRouter& from);
  TransportRouter(TransportRouter&& from) noexcept
    : TransportRouter() {
    *this = ::std::move(from);
  }

  inline TransportRouter& operator=(const TransportRouter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportRouter& operator=(TransportRouter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportRouter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportRouter* internal_default_instance() {
    return reinterpret_cast<const TransportRouter*>(
               &_TransportRouter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TransportRouter& a, TransportRouter& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportRouter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportRouter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportRouter* New() const final {
    return new TransportRouter();
  }

  TransportRouter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportRouter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportRouter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransportRouter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportRouter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialization.TransportRouter";
  }
  protected:
  explicit TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopVertexIdsFieldNumber = 4,
    kVerticesInfoFieldNumber = 5,
    kEdgesInfoFieldNumber = 6,
    kCompaniesVerticesFieldNumber = 7,
    kRoutingSettingsFieldNumber = 1,
    kGraphFieldNumber = 2,
    kRouterFieldNumber = 3,
  };
  // repeated .Serialization.SerializedStopVertexIds stopVertexIds = 4;
  int stopvertexids_size() const;
  private:
  int _internal_stopvertexids_size() const;
  public:
  void clear_stopvertexids();
  ::Serialization::SerializedStopVertexIds* mutable_stopvertexids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::SerializedStopVertexIds >*
      mutable_stopvertexids();
  private:
  const ::Serialization::SerializedStopVertexIds& _internal_stopvertexids(int index) const;
  ::Serialization::SerializedStopVertexIds* _internal_add_stopvertexids();
  public:
  const ::Serialization::SerializedStopVertexIds& stopvertexids(int index) const;
  ::Serialization::SerializedStopVertexIds* add_stopvertexids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::SerializedStopVertexIds >&
      stopvertexids() const;

  // repeated .Serialization.VertexInfo verticesInfo = 5;
  int verticesinfo_size() const;
  private:
  int _internal_verticesinfo_size() const;
  public:
  void clear_verticesinfo();
  ::Serialization::VertexInfo* mutable_verticesinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::VertexInfo >*
      mutable_verticesinfo();
  private:
  const ::Serialization::VertexInfo& _internal_verticesinfo(int index) const;
  ::Serialization::VertexInfo* _internal_add_verticesinfo();
  public:
  const ::Serialization::VertexInfo& verticesinfo(int index) const;
  ::Serialization::VertexInfo* add_verticesinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::VertexInfo >&
      verticesinfo() const;

  // repeated .Serialization.EdgeInfo edgesInfo = 6;
  int edgesinfo_size() const;
  private:
  int _internal_edgesinfo_size() const;
  public:
  void clear_edgesinfo();
  ::Serialization::EdgeInfo* mutable_edgesinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::EdgeInfo >*
      mutable_edgesinfo();
  private:
  const ::Serialization::EdgeInfo& _internal_edgesinfo(int index) const;
  ::Serialization::EdgeInfo* _internal_add_edgesinfo();
  public:
  const ::Serialization::EdgeInfo& edgesinfo(int index) const;
  ::Serialization::EdgeInfo* add_edgesinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::EdgeInfo >&
      edgesinfo() const;

  // repeated .Serialization.CompaniesVertices companiesVertices = 7;
  int companiesvertices_size() const;
  private:
  int _internal_companiesvertices_size() const;
  public:
  void clear_companiesvertices();
  ::Serialization::CompaniesVertices* mutable_companiesvertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::CompaniesVertices >*
      mutable_companiesvertices();
  private:
  const ::Serialization::CompaniesVertices& _internal_companiesvertices(int index) const;
  ::Serialization::CompaniesVertices* _internal_add_companiesvertices();
  public:
  const ::Serialization::CompaniesVertices& companiesvertices(int index) const;
  ::Serialization::CompaniesVertices* add_companiesvertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::CompaniesVertices >&
      companiesvertices() const;

  // .Serialization.SerializedRoutingSettings routingSettings = 1;
  bool has_routingsettings() const;
  private:
  bool _internal_has_routingsettings() const;
  public:
  void clear_routingsettings();
  const ::Serialization::SerializedRoutingSettings& routingsettings() const;
  PROTOBUF_MUST_USE_RESULT ::Serialization::SerializedRoutingSettings* release_routingsettings();
  ::Serialization::SerializedRoutingSettings* mutable_routingsettings();
  void set_allocated_routingsettings(::Serialization::SerializedRoutingSettings* routingsettings);
  private:
  const ::Serialization::SerializedRoutingSettings& _internal_routingsettings() const;
  ::Serialization::SerializedRoutingSettings* _internal_mutable_routingsettings();
  public:
  void unsafe_arena_set_allocated_routingsettings(
      ::Serialization::SerializedRoutingSettings* routingsettings);
  ::Serialization::SerializedRoutingSettings* unsafe_arena_release_routingsettings();

  // .Serialization.DirectedWeightedGraph graph = 2;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::Serialization::DirectedWeightedGraph& graph() const;
  PROTOBUF_MUST_USE_RESULT ::Serialization::DirectedWeightedGraph* release_graph();
  ::Serialization::DirectedWeightedGraph* mutable_graph();
  void set_allocated_graph(::Serialization::DirectedWeightedGraph* graph);
  private:
  const ::Serialization::DirectedWeightedGraph& _internal_graph() const;
  ::Serialization::DirectedWeightedGraph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::Serialization::DirectedWeightedGraph* graph);
  ::Serialization::DirectedWeightedGraph* unsafe_arena_release_graph();

  // .Serialization.Router router = 3;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::Serialization::Router& router() const;
  PROTOBUF_MUST_USE_RESULT ::Serialization::Router* release_router();
  ::Serialization::Router* mutable_router();
  void set_allocated_router(::Serialization::Router* router);
  private:
  const ::Serialization::Router& _internal_router() const;
  ::Serialization::Router* _internal_mutable_router();
  public:
  void unsafe_arena_set_allocated_router(
      ::Serialization::Router* router);
  ::Serialization::Router* unsafe_arena_release_router();

  // @@protoc_insertion_point(class_scope:Serialization.TransportRouter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::SerializedStopVertexIds > stopvertexids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::VertexInfo > verticesinfo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::EdgeInfo > edgesinfo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::CompaniesVertices > companiesvertices_;
  ::Serialization::SerializedRoutingSettings* routingsettings_;
  ::Serialization::DirectedWeightedGraph* graph_;
  ::Serialization::Router* router_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SerializedRoutingSettings

// int32 busWaitTime = 1;
inline void SerializedRoutingSettings::clear_buswaittime() {
  buswaittime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SerializedRoutingSettings::_internal_buswaittime() const {
  return buswaittime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SerializedRoutingSettings::buswaittime() const {
  // @@protoc_insertion_point(field_get:Serialization.SerializedRoutingSettings.busWaitTime)
  return _internal_buswaittime();
}
inline void SerializedRoutingSettings::_internal_set_buswaittime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buswaittime_ = value;
}
inline void SerializedRoutingSettings::set_buswaittime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buswaittime(value);
  // @@protoc_insertion_point(field_set:Serialization.SerializedRoutingSettings.busWaitTime)
}

// double busVelocity = 2;
inline void SerializedRoutingSettings::clear_busvelocity() {
  busvelocity_ = 0;
}
inline double SerializedRoutingSettings::_internal_busvelocity() const {
  return busvelocity_;
}
inline double SerializedRoutingSettings::busvelocity() const {
  // @@protoc_insertion_point(field_get:Serialization.SerializedRoutingSettings.busVelocity)
  return _internal_busvelocity();
}
inline void SerializedRoutingSettings::_internal_set_busvelocity(double value) {
  
  busvelocity_ = value;
}
inline void SerializedRoutingSettings::set_busvelocity(double value) {
  _internal_set_busvelocity(value);
  // @@protoc_insertion_point(field_set:Serialization.SerializedRoutingSettings.busVelocity)
}

// double pedestrianVelocity = 3;
inline void SerializedRoutingSettings::clear_pedestrianvelocity() {
  pedestrianvelocity_ = 0;
}
inline double SerializedRoutingSettings::_internal_pedestrianvelocity() const {
  return pedestrianvelocity_;
}
inline double SerializedRoutingSettings::pedestrianvelocity() const {
  // @@protoc_insertion_point(field_get:Serialization.SerializedRoutingSettings.pedestrianVelocity)
  return _internal_pedestrianvelocity();
}
inline void SerializedRoutingSettings::_internal_set_pedestrianvelocity(double value) {
  
  pedestrianvelocity_ = value;
}
inline void SerializedRoutingSettings::set_pedestrianvelocity(double value) {
  _internal_set_pedestrianvelocity(value);
  // @@protoc_insertion_point(field_set:Serialization.SerializedRoutingSettings.pedestrianVelocity)
}

// -------------------------------------------------------------------

// SerializedStopVertexIds

// string name = 1;
inline void SerializedStopVertexIds::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SerializedStopVertexIds::name() const {
  // @@protoc_insertion_point(field_get:Serialization.SerializedStopVertexIds.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SerializedStopVertexIds::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Serialization.SerializedStopVertexIds.name)
}
inline std::string* SerializedStopVertexIds::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Serialization.SerializedStopVertexIds.name)
  return _s;
}
inline const std::string& SerializedStopVertexIds::_internal_name() const {
  return name_.Get();
}
inline void SerializedStopVertexIds::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SerializedStopVertexIds::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SerializedStopVertexIds::release_name() {
  // @@protoc_insertion_point(field_release:Serialization.SerializedStopVertexIds.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SerializedStopVertexIds::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Serialization.SerializedStopVertexIds.name)
}

// uint32 in = 2;
inline void SerializedStopVertexIds::clear_in() {
  in_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SerializedStopVertexIds::_internal_in() const {
  return in_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SerializedStopVertexIds::in() const {
  // @@protoc_insertion_point(field_get:Serialization.SerializedStopVertexIds.in)
  return _internal_in();
}
inline void SerializedStopVertexIds::_internal_set_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  in_ = value;
}
inline void SerializedStopVertexIds::set_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_in(value);
  // @@protoc_insertion_point(field_set:Serialization.SerializedStopVertexIds.in)
}

// uint32 out = 3;
inline void SerializedStopVertexIds::clear_out() {
  out_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SerializedStopVertexIds::_internal_out() const {
  return out_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SerializedStopVertexIds::out() const {
  // @@protoc_insertion_point(field_get:Serialization.SerializedStopVertexIds.out)
  return _internal_out();
}
inline void SerializedStopVertexIds::_internal_set_out(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  out_ = value;
}
inline void SerializedStopVertexIds::set_out(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_out(value);
  // @@protoc_insertion_point(field_set:Serialization.SerializedStopVertexIds.out)
}

// -------------------------------------------------------------------

// VertexInfo

// string stopName = 1;
inline void VertexInfo::clear_stopname() {
  stopname_.ClearToEmpty();
}
inline const std::string& VertexInfo::stopname() const {
  // @@protoc_insertion_point(field_get:Serialization.VertexInfo.stopName)
  return _internal_stopname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VertexInfo::set_stopname(ArgT0&& arg0, ArgT... args) {
 
 stopname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Serialization.VertexInfo.stopName)
}
inline std::string* VertexInfo::mutable_stopname() {
  std::string* _s = _internal_mutable_stopname();
  // @@protoc_insertion_point(field_mutable:Serialization.VertexInfo.stopName)
  return _s;
}
inline const std::string& VertexInfo::_internal_stopname() const {
  return stopname_.Get();
}
inline void VertexInfo::_internal_set_stopname(const std::string& value) {
  
  stopname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VertexInfo::_internal_mutable_stopname() {
  
  return stopname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VertexInfo::release_stopname() {
  // @@protoc_insertion_point(field_release:Serialization.VertexInfo.stopName)
  return stopname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VertexInfo::set_allocated_stopname(std::string* stopname) {
  if (stopname != nullptr) {
    
  } else {
    
  }
  stopname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stopname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Serialization.VertexInfo.stopName)
}

// -------------------------------------------------------------------

// BusEdgeInfo

// string name = 1;
inline void BusEdgeInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BusEdgeInfo::name() const {
  // @@protoc_insertion_point(field_get:Serialization.BusEdgeInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BusEdgeInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Serialization.BusEdgeInfo.name)
}
inline std::string* BusEdgeInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Serialization.BusEdgeInfo.name)
  return _s;
}
inline const std::string& BusEdgeInfo::_internal_name() const {
  return name_.Get();
}
inline void BusEdgeInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BusEdgeInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BusEdgeInfo::release_name() {
  // @@protoc_insertion_point(field_release:Serialization.BusEdgeInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BusEdgeInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Serialization.BusEdgeInfo.name)
}

// uint32 spanCount = 2;
inline void BusEdgeInfo::clear_spancount() {
  spancount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::_internal_spancount() const {
  return spancount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::spancount() const {
  // @@protoc_insertion_point(field_get:Serialization.BusEdgeInfo.spanCount)
  return _internal_spancount();
}
inline void BusEdgeInfo::_internal_set_spancount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  spancount_ = value;
}
inline void BusEdgeInfo::set_spancount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spancount(value);
  // @@protoc_insertion_point(field_set:Serialization.BusEdgeInfo.spanCount)
}

// uint32 startStopIndex = 3;
inline void BusEdgeInfo::clear_startstopindex() {
  startstopindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::_internal_startstopindex() const {
  return startstopindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::startstopindex() const {
  // @@protoc_insertion_point(field_get:Serialization.BusEdgeInfo.startStopIndex)
  return _internal_startstopindex();
}
inline void BusEdgeInfo::_internal_set_startstopindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  startstopindex_ = value;
}
inline void BusEdgeInfo::set_startstopindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_startstopindex(value);
  // @@protoc_insertion_point(field_set:Serialization.BusEdgeInfo.startStopIndex)
}

// uint32 endStopIndex = 4;
inline void BusEdgeInfo::clear_endstopindex() {
  endstopindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::_internal_endstopindex() const {
  return endstopindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::endstopindex() const {
  // @@protoc_insertion_point(field_get:Serialization.BusEdgeInfo.endStopIndex)
  return _internal_endstopindex();
}
inline void BusEdgeInfo::_internal_set_endstopindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  endstopindex_ = value;
}
inline void BusEdgeInfo::set_endstopindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_endstopindex(value);
  // @@protoc_insertion_point(field_set:Serialization.BusEdgeInfo.endStopIndex)
}

// -------------------------------------------------------------------

// WaitEdgeInfo

// -------------------------------------------------------------------

// WalkEdgeInfo

// string companyName = 1;
inline void WalkEdgeInfo::clear_companyname() {
  companyname_.ClearToEmpty();
}
inline const std::string& WalkEdgeInfo::companyname() const {
  // @@protoc_insertion_point(field_get:Serialization.WalkEdgeInfo.companyName)
  return _internal_companyname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalkEdgeInfo::set_companyname(ArgT0&& arg0, ArgT... args) {
 
 companyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Serialization.WalkEdgeInfo.companyName)
}
inline std::string* WalkEdgeInfo::mutable_companyname() {
  std::string* _s = _internal_mutable_companyname();
  // @@protoc_insertion_point(field_mutable:Serialization.WalkEdgeInfo.companyName)
  return _s;
}
inline const std::string& WalkEdgeInfo::_internal_companyname() const {
  return companyname_.Get();
}
inline void WalkEdgeInfo::_internal_set_companyname(const std::string& value) {
  
  companyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WalkEdgeInfo::_internal_mutable_companyname() {
  
  return companyname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WalkEdgeInfo::release_companyname() {
  // @@protoc_insertion_point(field_release:Serialization.WalkEdgeInfo.companyName)
  return companyname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WalkEdgeInfo::set_allocated_companyname(std::string* companyname) {
  if (companyname != nullptr) {
    
  } else {
    
  }
  companyname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), companyname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Serialization.WalkEdgeInfo.companyName)
}

// string companyDisplayName = 2;
inline void WalkEdgeInfo::clear_companydisplayname() {
  companydisplayname_.ClearToEmpty();
}
inline const std::string& WalkEdgeInfo::companydisplayname() const {
  // @@protoc_insertion_point(field_get:Serialization.WalkEdgeInfo.companyDisplayName)
  return _internal_companydisplayname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalkEdgeInfo::set_companydisplayname(ArgT0&& arg0, ArgT... args) {
 
 companydisplayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Serialization.WalkEdgeInfo.companyDisplayName)
}
inline std::string* WalkEdgeInfo::mutable_companydisplayname() {
  std::string* _s = _internal_mutable_companydisplayname();
  // @@protoc_insertion_point(field_mutable:Serialization.WalkEdgeInfo.companyDisplayName)
  return _s;
}
inline const std::string& WalkEdgeInfo::_internal_companydisplayname() const {
  return companydisplayname_.Get();
}
inline void WalkEdgeInfo::_internal_set_companydisplayname(const std::string& value) {
  
  companydisplayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WalkEdgeInfo::_internal_mutable_companydisplayname() {
  
  return companydisplayname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WalkEdgeInfo::release_companydisplayname() {
  // @@protoc_insertion_point(field_release:Serialization.WalkEdgeInfo.companyDisplayName)
  return companydisplayname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WalkEdgeInfo::set_allocated_companydisplayname(std::string* companydisplayname) {
  if (companydisplayname != nullptr) {
    
  } else {
    
  }
  companydisplayname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), companydisplayname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Serialization.WalkEdgeInfo.companyDisplayName)
}

// string stopName = 3;
inline void WalkEdgeInfo::clear_stopname() {
  stopname_.ClearToEmpty();
}
inline const std::string& WalkEdgeInfo::stopname() const {
  // @@protoc_insertion_point(field_get:Serialization.WalkEdgeInfo.stopName)
  return _internal_stopname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalkEdgeInfo::set_stopname(ArgT0&& arg0, ArgT... args) {
 
 stopname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Serialization.WalkEdgeInfo.stopName)
}
inline std::string* WalkEdgeInfo::mutable_stopname() {
  std::string* _s = _internal_mutable_stopname();
  // @@protoc_insertion_point(field_mutable:Serialization.WalkEdgeInfo.stopName)
  return _s;
}
inline const std::string& WalkEdgeInfo::_internal_stopname() const {
  return stopname_.Get();
}
inline void WalkEdgeInfo::_internal_set_stopname(const std::string& value) {
  
  stopname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WalkEdgeInfo::_internal_mutable_stopname() {
  
  return stopname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WalkEdgeInfo::release_stopname() {
  // @@protoc_insertion_point(field_release:Serialization.WalkEdgeInfo.stopName)
  return stopname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WalkEdgeInfo::set_allocated_stopname(std::string* stopname) {
  if (stopname != nullptr) {
    
  } else {
    
  }
  stopname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stopname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Serialization.WalkEdgeInfo.stopName)
}

// -------------------------------------------------------------------

// CompaniesVertices

// string companyName = 1;
inline void CompaniesVertices::clear_companyname() {
  companyname_.ClearToEmpty();
}
inline const std::string& CompaniesVertices::companyname() const {
  // @@protoc_insertion_point(field_get:Serialization.CompaniesVertices.companyName)
  return _internal_companyname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompaniesVertices::set_companyname(ArgT0&& arg0, ArgT... args) {
 
 companyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Serialization.CompaniesVertices.companyName)
}
inline std::string* CompaniesVertices::mutable_companyname() {
  std::string* _s = _internal_mutable_companyname();
  // @@protoc_insertion_point(field_mutable:Serialization.CompaniesVertices.companyName)
  return _s;
}
inline const std::string& CompaniesVertices::_internal_companyname() const {
  return companyname_.Get();
}
inline void CompaniesVertices::_internal_set_companyname(const std::string& value) {
  
  companyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CompaniesVertices::_internal_mutable_companyname() {
  
  return companyname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CompaniesVertices::release_companyname() {
  // @@protoc_insertion_point(field_release:Serialization.CompaniesVertices.companyName)
  return companyname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CompaniesVertices::set_allocated_companyname(std::string* companyname) {
  if (companyname != nullptr) {
    
  } else {
    
  }
  companyname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), companyname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Serialization.CompaniesVertices.companyName)
}

// uint32 vertexId = 2;
inline void CompaniesVertices::clear_vertexid() {
  vertexid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompaniesVertices::_internal_vertexid() const {
  return vertexid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompaniesVertices::vertexid() const {
  // @@protoc_insertion_point(field_get:Serialization.CompaniesVertices.vertexId)
  return _internal_vertexid();
}
inline void CompaniesVertices::_internal_set_vertexid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vertexid_ = value;
}
inline void CompaniesVertices::set_vertexid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vertexid(value);
  // @@protoc_insertion_point(field_set:Serialization.CompaniesVertices.vertexId)
}

// -------------------------------------------------------------------

// EdgeInfo

// .Serialization.BusEdgeInfo busEdgeInfo = 1;
inline bool EdgeInfo::_internal_has_busedgeinfo() const {
  return edgeInfo_case() == kBusEdgeInfo;
}
inline bool EdgeInfo::has_busedgeinfo() const {
  return _internal_has_busedgeinfo();
}
inline void EdgeInfo::set_has_busedgeinfo() {
  _oneof_case_[0] = kBusEdgeInfo;
}
inline void EdgeInfo::clear_busedgeinfo() {
  if (_internal_has_busedgeinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete edgeInfo_.busedgeinfo_;
    }
    clear_has_edgeInfo();
  }
}
inline ::Serialization::BusEdgeInfo* EdgeInfo::release_busedgeinfo() {
  // @@protoc_insertion_point(field_release:Serialization.EdgeInfo.busEdgeInfo)
  if (_internal_has_busedgeinfo()) {
    clear_has_edgeInfo();
      ::Serialization::BusEdgeInfo* temp = edgeInfo_.busedgeinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    edgeInfo_.busedgeinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Serialization::BusEdgeInfo& EdgeInfo::_internal_busedgeinfo() const {
  return _internal_has_busedgeinfo()
      ? *edgeInfo_.busedgeinfo_
      : reinterpret_cast< ::Serialization::BusEdgeInfo&>(::Serialization::_BusEdgeInfo_default_instance_);
}
inline const ::Serialization::BusEdgeInfo& EdgeInfo::busedgeinfo() const {
  // @@protoc_insertion_point(field_get:Serialization.EdgeInfo.busEdgeInfo)
  return _internal_busedgeinfo();
}
inline ::Serialization::BusEdgeInfo* EdgeInfo::unsafe_arena_release_busedgeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Serialization.EdgeInfo.busEdgeInfo)
  if (_internal_has_busedgeinfo()) {
    clear_has_edgeInfo();
    ::Serialization::BusEdgeInfo* temp = edgeInfo_.busedgeinfo_;
    edgeInfo_.busedgeinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EdgeInfo::unsafe_arena_set_allocated_busedgeinfo(::Serialization::BusEdgeInfo* busedgeinfo) {
  clear_edgeInfo();
  if (busedgeinfo) {
    set_has_busedgeinfo();
    edgeInfo_.busedgeinfo_ = busedgeinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialization.EdgeInfo.busEdgeInfo)
}
inline ::Serialization::BusEdgeInfo* EdgeInfo::_internal_mutable_busedgeinfo() {
  if (!_internal_has_busedgeinfo()) {
    clear_edgeInfo();
    set_has_busedgeinfo();
    edgeInfo_.busedgeinfo_ = CreateMaybeMessage< ::Serialization::BusEdgeInfo >(GetArenaForAllocation());
  }
  return edgeInfo_.busedgeinfo_;
}
inline ::Serialization::BusEdgeInfo* EdgeInfo::mutable_busedgeinfo() {
  ::Serialization::BusEdgeInfo* _msg = _internal_mutable_busedgeinfo();
  // @@protoc_insertion_point(field_mutable:Serialization.EdgeInfo.busEdgeInfo)
  return _msg;
}

// .Serialization.WaitEdgeInfo waitEdgeInfo = 2;
inline bool EdgeInfo::_internal_has_waitedgeinfo() const {
  return edgeInfo_case() == kWaitEdgeInfo;
}
inline bool EdgeInfo::has_waitedgeinfo() const {
  return _internal_has_waitedgeinfo();
}
inline void EdgeInfo::set_has_waitedgeinfo() {
  _oneof_case_[0] = kWaitEdgeInfo;
}
inline void EdgeInfo::clear_waitedgeinfo() {
  if (_internal_has_waitedgeinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete edgeInfo_.waitedgeinfo_;
    }
    clear_has_edgeInfo();
  }
}
inline ::Serialization::WaitEdgeInfo* EdgeInfo::release_waitedgeinfo() {
  // @@protoc_insertion_point(field_release:Serialization.EdgeInfo.waitEdgeInfo)
  if (_internal_has_waitedgeinfo()) {
    clear_has_edgeInfo();
      ::Serialization::WaitEdgeInfo* temp = edgeInfo_.waitedgeinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    edgeInfo_.waitedgeinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Serialization::WaitEdgeInfo& EdgeInfo::_internal_waitedgeinfo() const {
  return _internal_has_waitedgeinfo()
      ? *edgeInfo_.waitedgeinfo_
      : reinterpret_cast< ::Serialization::WaitEdgeInfo&>(::Serialization::_WaitEdgeInfo_default_instance_);
}
inline const ::Serialization::WaitEdgeInfo& EdgeInfo::waitedgeinfo() const {
  // @@protoc_insertion_point(field_get:Serialization.EdgeInfo.waitEdgeInfo)
  return _internal_waitedgeinfo();
}
inline ::Serialization::WaitEdgeInfo* EdgeInfo::unsafe_arena_release_waitedgeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Serialization.EdgeInfo.waitEdgeInfo)
  if (_internal_has_waitedgeinfo()) {
    clear_has_edgeInfo();
    ::Serialization::WaitEdgeInfo* temp = edgeInfo_.waitedgeinfo_;
    edgeInfo_.waitedgeinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EdgeInfo::unsafe_arena_set_allocated_waitedgeinfo(::Serialization::WaitEdgeInfo* waitedgeinfo) {
  clear_edgeInfo();
  if (waitedgeinfo) {
    set_has_waitedgeinfo();
    edgeInfo_.waitedgeinfo_ = waitedgeinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialization.EdgeInfo.waitEdgeInfo)
}
inline ::Serialization::WaitEdgeInfo* EdgeInfo::_internal_mutable_waitedgeinfo() {
  if (!_internal_has_waitedgeinfo()) {
    clear_edgeInfo();
    set_has_waitedgeinfo();
    edgeInfo_.waitedgeinfo_ = CreateMaybeMessage< ::Serialization::WaitEdgeInfo >(GetArenaForAllocation());
  }
  return edgeInfo_.waitedgeinfo_;
}
inline ::Serialization::WaitEdgeInfo* EdgeInfo::mutable_waitedgeinfo() {
  ::Serialization::WaitEdgeInfo* _msg = _internal_mutable_waitedgeinfo();
  // @@protoc_insertion_point(field_mutable:Serialization.EdgeInfo.waitEdgeInfo)
  return _msg;
}

// .Serialization.WalkEdgeInfo walkEdgeInfo = 3;
inline bool EdgeInfo::_internal_has_walkedgeinfo() const {
  return edgeInfo_case() == kWalkEdgeInfo;
}
inline bool EdgeInfo::has_walkedgeinfo() const {
  return _internal_has_walkedgeinfo();
}
inline void EdgeInfo::set_has_walkedgeinfo() {
  _oneof_case_[0] = kWalkEdgeInfo;
}
inline void EdgeInfo::clear_walkedgeinfo() {
  if (_internal_has_walkedgeinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete edgeInfo_.walkedgeinfo_;
    }
    clear_has_edgeInfo();
  }
}
inline ::Serialization::WalkEdgeInfo* EdgeInfo::release_walkedgeinfo() {
  // @@protoc_insertion_point(field_release:Serialization.EdgeInfo.walkEdgeInfo)
  if (_internal_has_walkedgeinfo()) {
    clear_has_edgeInfo();
      ::Serialization::WalkEdgeInfo* temp = edgeInfo_.walkedgeinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    edgeInfo_.walkedgeinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Serialization::WalkEdgeInfo& EdgeInfo::_internal_walkedgeinfo() const {
  return _internal_has_walkedgeinfo()
      ? *edgeInfo_.walkedgeinfo_
      : reinterpret_cast< ::Serialization::WalkEdgeInfo&>(::Serialization::_WalkEdgeInfo_default_instance_);
}
inline const ::Serialization::WalkEdgeInfo& EdgeInfo::walkedgeinfo() const {
  // @@protoc_insertion_point(field_get:Serialization.EdgeInfo.walkEdgeInfo)
  return _internal_walkedgeinfo();
}
inline ::Serialization::WalkEdgeInfo* EdgeInfo::unsafe_arena_release_walkedgeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Serialization.EdgeInfo.walkEdgeInfo)
  if (_internal_has_walkedgeinfo()) {
    clear_has_edgeInfo();
    ::Serialization::WalkEdgeInfo* temp = edgeInfo_.walkedgeinfo_;
    edgeInfo_.walkedgeinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EdgeInfo::unsafe_arena_set_allocated_walkedgeinfo(::Serialization::WalkEdgeInfo* walkedgeinfo) {
  clear_edgeInfo();
  if (walkedgeinfo) {
    set_has_walkedgeinfo();
    edgeInfo_.walkedgeinfo_ = walkedgeinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialization.EdgeInfo.walkEdgeInfo)
}
inline ::Serialization::WalkEdgeInfo* EdgeInfo::_internal_mutable_walkedgeinfo() {
  if (!_internal_has_walkedgeinfo()) {
    clear_edgeInfo();
    set_has_walkedgeinfo();
    edgeInfo_.walkedgeinfo_ = CreateMaybeMessage< ::Serialization::WalkEdgeInfo >(GetArenaForAllocation());
  }
  return edgeInfo_.walkedgeinfo_;
}
inline ::Serialization::WalkEdgeInfo* EdgeInfo::mutable_walkedgeinfo() {
  ::Serialization::WalkEdgeInfo* _msg = _internal_mutable_walkedgeinfo();
  // @@protoc_insertion_point(field_mutable:Serialization.EdgeInfo.walkEdgeInfo)
  return _msg;
}

inline bool EdgeInfo::has_edgeInfo() const {
  return edgeInfo_case() != EDGEINFO_NOT_SET;
}
inline void EdgeInfo::clear_has_edgeInfo() {
  _oneof_case_[0] = EDGEINFO_NOT_SET;
}
inline EdgeInfo::EdgeInfoCase EdgeInfo::edgeInfo_case() const {
  return EdgeInfo::EdgeInfoCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransportRouter

// .Serialization.SerializedRoutingSettings routingSettings = 1;
inline bool TransportRouter::_internal_has_routingsettings() const {
  return this != internal_default_instance() && routingsettings_ != nullptr;
}
inline bool TransportRouter::has_routingsettings() const {
  return _internal_has_routingsettings();
}
inline void TransportRouter::clear_routingsettings() {
  if (GetArenaForAllocation() == nullptr && routingsettings_ != nullptr) {
    delete routingsettings_;
  }
  routingsettings_ = nullptr;
}
inline const ::Serialization::SerializedRoutingSettings& TransportRouter::_internal_routingsettings() const {
  const ::Serialization::SerializedRoutingSettings* p = routingsettings_;
  return p != nullptr ? *p : reinterpret_cast<const ::Serialization::SerializedRoutingSettings&>(
      ::Serialization::_SerializedRoutingSettings_default_instance_);
}
inline const ::Serialization::SerializedRoutingSettings& TransportRouter::routingsettings() const {
  // @@protoc_insertion_point(field_get:Serialization.TransportRouter.routingSettings)
  return _internal_routingsettings();
}
inline void TransportRouter::unsafe_arena_set_allocated_routingsettings(
    ::Serialization::SerializedRoutingSettings* routingsettings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routingsettings_);
  }
  routingsettings_ = routingsettings;
  if (routingsettings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialization.TransportRouter.routingSettings)
}
inline ::Serialization::SerializedRoutingSettings* TransportRouter::release_routingsettings() {
  
  ::Serialization::SerializedRoutingSettings* temp = routingsettings_;
  routingsettings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Serialization::SerializedRoutingSettings* TransportRouter::unsafe_arena_release_routingsettings() {
  // @@protoc_insertion_point(field_release:Serialization.TransportRouter.routingSettings)
  
  ::Serialization::SerializedRoutingSettings* temp = routingsettings_;
  routingsettings_ = nullptr;
  return temp;
}
inline ::Serialization::SerializedRoutingSettings* TransportRouter::_internal_mutable_routingsettings() {
  
  if (routingsettings_ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialization::SerializedRoutingSettings>(GetArenaForAllocation());
    routingsettings_ = p;
  }
  return routingsettings_;
}
inline ::Serialization::SerializedRoutingSettings* TransportRouter::mutable_routingsettings() {
  ::Serialization::SerializedRoutingSettings* _msg = _internal_mutable_routingsettings();
  // @@protoc_insertion_point(field_mutable:Serialization.TransportRouter.routingSettings)
  return _msg;
}
inline void TransportRouter::set_allocated_routingsettings(::Serialization::SerializedRoutingSettings* routingsettings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete routingsettings_;
  }
  if (routingsettings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Serialization::SerializedRoutingSettings>::GetOwningArena(routingsettings);
    if (message_arena != submessage_arena) {
      routingsettings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routingsettings, submessage_arena);
    }
    
  } else {
    
  }
  routingsettings_ = routingsettings;
  // @@protoc_insertion_point(field_set_allocated:Serialization.TransportRouter.routingSettings)
}

// .Serialization.DirectedWeightedGraph graph = 2;
inline bool TransportRouter::_internal_has_graph() const {
  return this != internal_default_instance() && graph_ != nullptr;
}
inline bool TransportRouter::has_graph() const {
  return _internal_has_graph();
}
inline const ::Serialization::DirectedWeightedGraph& TransportRouter::_internal_graph() const {
  const ::Serialization::DirectedWeightedGraph* p = graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::Serialization::DirectedWeightedGraph&>(
      ::Serialization::_DirectedWeightedGraph_default_instance_);
}
inline const ::Serialization::DirectedWeightedGraph& TransportRouter::graph() const {
  // @@protoc_insertion_point(field_get:Serialization.TransportRouter.graph)
  return _internal_graph();
}
inline void TransportRouter::unsafe_arena_set_allocated_graph(
    ::Serialization::DirectedWeightedGraph* graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialization.TransportRouter.graph)
}
inline ::Serialization::DirectedWeightedGraph* TransportRouter::release_graph() {
  
  ::Serialization::DirectedWeightedGraph* temp = graph_;
  graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Serialization::DirectedWeightedGraph* TransportRouter::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:Serialization.TransportRouter.graph)
  
  ::Serialization::DirectedWeightedGraph* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::Serialization::DirectedWeightedGraph* TransportRouter::_internal_mutable_graph() {
  
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialization::DirectedWeightedGraph>(GetArenaForAllocation());
    graph_ = p;
  }
  return graph_;
}
inline ::Serialization::DirectedWeightedGraph* TransportRouter::mutable_graph() {
  ::Serialization::DirectedWeightedGraph* _msg = _internal_mutable_graph();
  // @@protoc_insertion_point(field_mutable:Serialization.TransportRouter.graph)
  return _msg;
}
inline void TransportRouter::set_allocated_graph(::Serialization::DirectedWeightedGraph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph));
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:Serialization.TransportRouter.graph)
}

// .Serialization.Router router = 3;
inline bool TransportRouter::_internal_has_router() const {
  return this != internal_default_instance() && router_ != nullptr;
}
inline bool TransportRouter::has_router() const {
  return _internal_has_router();
}
inline const ::Serialization::Router& TransportRouter::_internal_router() const {
  const ::Serialization::Router* p = router_;
  return p != nullptr ? *p : reinterpret_cast<const ::Serialization::Router&>(
      ::Serialization::_Router_default_instance_);
}
inline const ::Serialization::Router& TransportRouter::router() const {
  // @@protoc_insertion_point(field_get:Serialization.TransportRouter.router)
  return _internal_router();
}
inline void TransportRouter::unsafe_arena_set_allocated_router(
    ::Serialization::Router* router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_);
  }
  router_ = router;
  if (router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialization.TransportRouter.router)
}
inline ::Serialization::Router* TransportRouter::release_router() {
  
  ::Serialization::Router* temp = router_;
  router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Serialization::Router* TransportRouter::unsafe_arena_release_router() {
  // @@protoc_insertion_point(field_release:Serialization.TransportRouter.router)
  
  ::Serialization::Router* temp = router_;
  router_ = nullptr;
  return temp;
}
inline ::Serialization::Router* TransportRouter::_internal_mutable_router() {
  
  if (router_ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialization::Router>(GetArenaForAllocation());
    router_ = p;
  }
  return router_;
}
inline ::Serialization::Router* TransportRouter::mutable_router() {
  ::Serialization::Router* _msg = _internal_mutable_router();
  // @@protoc_insertion_point(field_mutable:Serialization.TransportRouter.router)
  return _msg;
}
inline void TransportRouter::set_allocated_router(::Serialization::Router* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_);
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router));
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  router_ = router;
  // @@protoc_insertion_point(field_set_allocated:Serialization.TransportRouter.router)
}

// repeated .Serialization.SerializedStopVertexIds stopVertexIds = 4;
inline int TransportRouter::_internal_stopvertexids_size() const {
  return stopvertexids_.size();
}
inline int TransportRouter::stopvertexids_size() const {
  return _internal_stopvertexids_size();
}
inline void TransportRouter::clear_stopvertexids() {
  stopvertexids_.Clear();
}
inline ::Serialization::SerializedStopVertexIds* TransportRouter::mutable_stopvertexids(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.TransportRouter.stopVertexIds)
  return stopvertexids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::SerializedStopVertexIds >*
TransportRouter::mutable_stopvertexids() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.TransportRouter.stopVertexIds)
  return &stopvertexids_;
}
inline const ::Serialization::SerializedStopVertexIds& TransportRouter::_internal_stopvertexids(int index) const {
  return stopvertexids_.Get(index);
}
inline const ::Serialization::SerializedStopVertexIds& TransportRouter::stopvertexids(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.TransportRouter.stopVertexIds)
  return _internal_stopvertexids(index);
}
inline ::Serialization::SerializedStopVertexIds* TransportRouter::_internal_add_stopvertexids() {
  return stopvertexids_.Add();
}
inline ::Serialization::SerializedStopVertexIds* TransportRouter::add_stopvertexids() {
  ::Serialization::SerializedStopVertexIds* _add = _internal_add_stopvertexids();
  // @@protoc_insertion_point(field_add:Serialization.TransportRouter.stopVertexIds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::SerializedStopVertexIds >&
TransportRouter::stopvertexids() const {
  // @@protoc_insertion_point(field_list:Serialization.TransportRouter.stopVertexIds)
  return stopvertexids_;
}

// repeated .Serialization.VertexInfo verticesInfo = 5;
inline int TransportRouter::_internal_verticesinfo_size() const {
  return verticesinfo_.size();
}
inline int TransportRouter::verticesinfo_size() const {
  return _internal_verticesinfo_size();
}
inline void TransportRouter::clear_verticesinfo() {
  verticesinfo_.Clear();
}
inline ::Serialization::VertexInfo* TransportRouter::mutable_verticesinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.TransportRouter.verticesInfo)
  return verticesinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::VertexInfo >*
TransportRouter::mutable_verticesinfo() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.TransportRouter.verticesInfo)
  return &verticesinfo_;
}
inline const ::Serialization::VertexInfo& TransportRouter::_internal_verticesinfo(int index) const {
  return verticesinfo_.Get(index);
}
inline const ::Serialization::VertexInfo& TransportRouter::verticesinfo(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.TransportRouter.verticesInfo)
  return _internal_verticesinfo(index);
}
inline ::Serialization::VertexInfo* TransportRouter::_internal_add_verticesinfo() {
  return verticesinfo_.Add();
}
inline ::Serialization::VertexInfo* TransportRouter::add_verticesinfo() {
  ::Serialization::VertexInfo* _add = _internal_add_verticesinfo();
  // @@protoc_insertion_point(field_add:Serialization.TransportRouter.verticesInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::VertexInfo >&
TransportRouter::verticesinfo() const {
  // @@protoc_insertion_point(field_list:Serialization.TransportRouter.verticesInfo)
  return verticesinfo_;
}

// repeated .Serialization.EdgeInfo edgesInfo = 6;
inline int TransportRouter::_internal_edgesinfo_size() const {
  return edgesinfo_.size();
}
inline int TransportRouter::edgesinfo_size() const {
  return _internal_edgesinfo_size();
}
inline void TransportRouter::clear_edgesinfo() {
  edgesinfo_.Clear();
}
inline ::Serialization::EdgeInfo* TransportRouter::mutable_edgesinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.TransportRouter.edgesInfo)
  return edgesinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::EdgeInfo >*
TransportRouter::mutable_edgesinfo() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.TransportRouter.edgesInfo)
  return &edgesinfo_;
}
inline const ::Serialization::EdgeInfo& TransportRouter::_internal_edgesinfo(int index) const {
  return edgesinfo_.Get(index);
}
inline const ::Serialization::EdgeInfo& TransportRouter::edgesinfo(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.TransportRouter.edgesInfo)
  return _internal_edgesinfo(index);
}
inline ::Serialization::EdgeInfo* TransportRouter::_internal_add_edgesinfo() {
  return edgesinfo_.Add();
}
inline ::Serialization::EdgeInfo* TransportRouter::add_edgesinfo() {
  ::Serialization::EdgeInfo* _add = _internal_add_edgesinfo();
  // @@protoc_insertion_point(field_add:Serialization.TransportRouter.edgesInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::EdgeInfo >&
TransportRouter::edgesinfo() const {
  // @@protoc_insertion_point(field_list:Serialization.TransportRouter.edgesInfo)
  return edgesinfo_;
}

// repeated .Serialization.CompaniesVertices companiesVertices = 7;
inline int TransportRouter::_internal_companiesvertices_size() const {
  return companiesvertices_.size();
}
inline int TransportRouter::companiesvertices_size() const {
  return _internal_companiesvertices_size();
}
inline void TransportRouter::clear_companiesvertices() {
  companiesvertices_.Clear();
}
inline ::Serialization::CompaniesVertices* TransportRouter::mutable_companiesvertices(int index) {
  // @@protoc_insertion_point(field_mutable:Serialization.TransportRouter.companiesVertices)
  return companiesvertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::CompaniesVertices >*
TransportRouter::mutable_companiesvertices() {
  // @@protoc_insertion_point(field_mutable_list:Serialization.TransportRouter.companiesVertices)
  return &companiesvertices_;
}
inline const ::Serialization::CompaniesVertices& TransportRouter::_internal_companiesvertices(int index) const {
  return companiesvertices_.Get(index);
}
inline const ::Serialization::CompaniesVertices& TransportRouter::companiesvertices(int index) const {
  // @@protoc_insertion_point(field_get:Serialization.TransportRouter.companiesVertices)
  return _internal_companiesvertices(index);
}
inline ::Serialization::CompaniesVertices* TransportRouter::_internal_add_companiesvertices() {
  return companiesvertices_.Add();
}
inline ::Serialization::CompaniesVertices* TransportRouter::add_companiesvertices() {
  ::Serialization::CompaniesVertices* _add = _internal_add_companiesvertices();
  // @@protoc_insertion_point(field_add:Serialization.TransportRouter.companiesVertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialization::CompaniesVertices >&
TransportRouter::companiesvertices() const {
  // @@protoc_insertion_point(field_list:Serialization.TransportRouter.companiesVertices)
  return companiesvertices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialization

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
