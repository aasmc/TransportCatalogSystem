// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_renderer.proto

#include "transport_renderer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Serialization {
constexpr RenderProps::RenderProps(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : colorpalette_()
  , layers_()
  , stoplabeloffset_(nullptr)
  , buslabeloffset_(nullptr)
  , underlayercolor_(nullptr)
  , width_(0)
  , height_(0)
  , padding_(0)
  , stopradius_(0)
  , linewidth_(0)
  , outermargin_(0)
  , underlayerwidth_(0)
  , companyradius_(0)
  , companylinewidth_(0)
  , stoplabelfontsize_(0)
  , buslabelfontsize_(0){}
struct RenderPropsDefaultTypeInternal {
  constexpr RenderPropsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RenderPropsDefaultTypeInternal() {}
  union {
    RenderProps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RenderPropsDefaultTypeInternal _RenderProps_default_instance_;
constexpr BusDescription::BusDescription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stops_()
  , endstops_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BusDescriptionDefaultTypeInternal {
  constexpr BusDescriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BusDescriptionDefaultTypeInternal() {}
  union {
    BusDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BusDescriptionDefaultTypeInternal _BusDescription_default_instance_;
constexpr CompaniesDescription::CompaniesDescription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nearbystops_()
  , mainname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , displayname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coords_(nullptr){}
struct CompaniesDescriptionDefaultTypeInternal {
  constexpr CompaniesDescriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompaniesDescriptionDefaultTypeInternal() {}
  union {
    CompaniesDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompaniesDescriptionDefaultTypeInternal _CompaniesDescription_default_instance_;
constexpr BusToColor::BusToColor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : busname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buscolor_(nullptr){}
struct BusToColorDefaultTypeInternal {
  constexpr BusToColorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BusToColorDefaultTypeInternal() {}
  union {
    BusToColor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BusToColorDefaultTypeInternal _BusToColor_default_instance_;
constexpr StopPosition::StopPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stopname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stopposition_(nullptr){}
struct StopPositionDefaultTypeInternal {
  constexpr StopPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopPositionDefaultTypeInternal() {}
  union {
    StopPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopPositionDefaultTypeInternal _StopPosition_default_instance_;
constexpr CompanyPosition::CompanyPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : companyname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , companyposition_(nullptr){}
struct CompanyPositionDefaultTypeInternal {
  constexpr CompanyPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompanyPositionDefaultTypeInternal() {}
  union {
    CompanyPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompanyPositionDefaultTypeInternal _CompanyPosition_default_instance_;
constexpr TransportRenderer::TransportRenderer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : busesdict_()
  , stoppositions_()
  , buscolors_()
  , companiesdescription_()
  , companiespositions_()
  , renderprops_(nullptr){}
struct TransportRendererDefaultTypeInternal {
  constexpr TransportRendererDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransportRendererDefaultTypeInternal() {}
  union {
    TransportRenderer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransportRendererDefaultTypeInternal _TransportRenderer_default_instance_;
}  // namespace Serialization
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_5frenderer_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transport_5frenderer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_5frenderer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_5frenderer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::RenderProps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialization::RenderProps, width_),
  PROTOBUF_FIELD_OFFSET(::Serialization::RenderProps, height_),
  PROTOBUF_FIELD_OFFSET(::Serialization::RenderProps, padding_),
  PROTOBUF_FIELD_OFFSET(::Serialization::RenderProps, stopradius_),
  PROTOBUF_FIELD_OFFSET(::Serialization::RenderProps, linewidth_),
  PROTOBUF_FIELD_OFFSET(::Serialization::RenderProps, outermargin_),
  PROTOBUF_FIELD_OFFSET(::Serialization::RenderProps, underlayerwidth_),
  PROTOBUF_FIELD_OFFSET(::Serialization::RenderProps, companyradius_),
  PROTOBUF_FIELD_OFFSET(::Serialization::RenderProps, companylinewidth_),
  PROTOBUF_FIELD_OFFSET(::Serialization::RenderProps, stoplabelfontsize_),
  PROTOBUF_FIELD_OFFSET(::Serialization::RenderProps, buslabelfontsize_),
  PROTOBUF_FIELD_OFFSET(::Serialization::RenderProps, stoplabeloffset_),
  PROTOBUF_FIELD_OFFSET(::Serialization::RenderProps, buslabeloffset_),
  PROTOBUF_FIELD_OFFSET(::Serialization::RenderProps, underlayercolor_),
  PROTOBUF_FIELD_OFFSET(::Serialization::RenderProps, colorpalette_),
  PROTOBUF_FIELD_OFFSET(::Serialization::RenderProps, layers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::BusDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialization::BusDescription, name_),
  PROTOBUF_FIELD_OFFSET(::Serialization::BusDescription, stops_),
  PROTOBUF_FIELD_OFFSET(::Serialization::BusDescription, endstops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::CompaniesDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialization::CompaniesDescription, mainname_),
  PROTOBUF_FIELD_OFFSET(::Serialization::CompaniesDescription, displayname_),
  PROTOBUF_FIELD_OFFSET(::Serialization::CompaniesDescription, nearbystops_),
  PROTOBUF_FIELD_OFFSET(::Serialization::CompaniesDescription, coords_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::BusToColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialization::BusToColor, busname_),
  PROTOBUF_FIELD_OFFSET(::Serialization::BusToColor, buscolor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::StopPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialization::StopPosition, stopname_),
  PROTOBUF_FIELD_OFFSET(::Serialization::StopPosition, stopposition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::CompanyPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialization::CompanyPosition, companyname_),
  PROTOBUF_FIELD_OFFSET(::Serialization::CompanyPosition, companyposition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportRenderer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportRenderer, renderprops_),
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportRenderer, busesdict_),
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportRenderer, stoppositions_),
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportRenderer, buscolors_),
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportRenderer, companiesdescription_),
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportRenderer, companiespositions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Serialization::RenderProps)},
  { 21, -1, sizeof(::Serialization::BusDescription)},
  { 29, -1, sizeof(::Serialization::CompaniesDescription)},
  { 38, -1, sizeof(::Serialization::BusToColor)},
  { 45, -1, sizeof(::Serialization::StopPosition)},
  { 52, -1, sizeof(::Serialization::CompanyPosition)},
  { 59, -1, sizeof(::Serialization::TransportRenderer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_RenderProps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_BusDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_CompaniesDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_BusToColor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_StopPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_CompanyPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_TransportRenderer_default_instance_),
};

const char descriptor_table_protodef_transport_5frenderer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030transport_renderer.proto\022\rSerializatio"
  "n\032\tsvg.proto\032\rcompany.proto\032\014sphere.prot"
  "o\"\300\003\n\013RenderProps\022\r\n\005width\030\001 \001(\001\022\016\n\006heig"
  "ht\030\002 \001(\001\022\017\n\007padding\030\003 \001(\001\022\022\n\nstopRadius\030"
  "\004 \001(\001\022\021\n\tlineWidth\030\005 \001(\001\022\023\n\013outerMargin\030"
  "\006 \001(\001\022\027\n\017underlayerWidth\030\007 \001(\001\022\025\n\rcompan"
  "yRadius\030\010 \001(\001\022\030\n\020companyLineWidth\030\t \001(\001\022"
  "\031\n\021stopLabelFontSize\030\n \001(\005\022\030\n\020busLabelFo"
  "ntSize\030\013 \001(\005\022-\n\017stopLabelOffset\030\014 \001(\0132\024."
  "Serialization.Point\022,\n\016busLabelOffset\030\r "
  "\001(\0132\024.Serialization.Point\022-\n\017underlayerC"
  "olor\030\016 \001(\0132\024.Serialization.Color\022*\n\014colo"
  "rPalette\030\017 \003(\0132\024.Serialization.Color\022\016\n\006"
  "layers\030\020 \003(\t\"\?\n\016BusDescription\022\014\n\004name\030\001"
  " \001(\t\022\r\n\005stops\030\002 \003(\t\022\020\n\010endStops\030\003 \003(\t\"\220\001"
  "\n\024CompaniesDescription\022\020\n\010mainName\030\001 \001(\t"
  "\022\023\n\013displayName\030\002 \001(\t\022,\n\013nearbyStops\030\003 \003"
  "(\0132\027.YellowPages.NearbyStop\022#\n\006coords\030\004 "
  "\001(\0132\023.SphereProto.Coords\"E\n\nBusToColor\022\017"
  "\n\007busName\030\001 \001(\t\022&\n\010busColor\030\002 \001(\0132\024.Seri"
  "alization.Color\"L\n\014StopPosition\022\020\n\010stopN"
  "ame\030\001 \001(\t\022*\n\014stopPosition\030\002 \001(\0132\024.Serial"
  "ization.Point\"U\n\017CompanyPosition\022\023\n\013comp"
  "anyName\030\001 \001(\t\022-\n\017companyPosition\030\002 \001(\0132\024"
  ".Serialization.Point\"\327\002\n\021TransportRender"
  "er\022/\n\013renderProps\030\001 \001(\0132\032.Serialization."
  "RenderProps\0220\n\tbusesDict\030\002 \003(\0132\035.Seriali"
  "zation.BusDescription\0222\n\rstopPositions\030\003"
  " \003(\0132\033.Serialization.StopPosition\022,\n\tbus"
  "Colors\030\004 \003(\0132\031.Serialization.BusToColor\022"
  "A\n\024companiesDescription\030\005 \003(\0132#.Serializ"
  "ation.CompaniesDescription\022:\n\022companiesP"
  "ositions\030\006 \003(\0132\036.Serialization.CompanyPo"
  "sitionb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_5frenderer_2eproto_deps[3] = {
  &::descriptor_table_company_2eproto,
  &::descriptor_table_sphere_2eproto,
  &::descriptor_table_svg_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_5frenderer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frenderer_2eproto = {
  false, false, 1334, descriptor_table_protodef_transport_5frenderer_2eproto, "transport_renderer.proto", 
  &descriptor_table_transport_5frenderer_2eproto_once, descriptor_table_transport_5frenderer_2eproto_deps, 3, 7,
  schemas, file_default_instances, TableStruct_transport_5frenderer_2eproto::offsets,
  file_level_metadata_transport_5frenderer_2eproto, file_level_enum_descriptors_transport_5frenderer_2eproto, file_level_service_descriptors_transport_5frenderer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_transport_5frenderer_2eproto_getter() {
  return &descriptor_table_transport_5frenderer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_transport_5frenderer_2eproto(&descriptor_table_transport_5frenderer_2eproto);
namespace Serialization {

// ===================================================================

class RenderProps::_Internal {
 public:
  static const ::Serialization::Point& stoplabeloffset(const RenderProps* msg);
  static const ::Serialization::Point& buslabeloffset(const RenderProps* msg);
  static const ::Serialization::Color& underlayercolor(const RenderProps* msg);
};

const ::Serialization::Point&
RenderProps::_Internal::stoplabeloffset(const RenderProps* msg) {
  return *msg->stoplabeloffset_;
}
const ::Serialization::Point&
RenderProps::_Internal::buslabeloffset(const RenderProps* msg) {
  return *msg->buslabeloffset_;
}
const ::Serialization::Color&
RenderProps::_Internal::underlayercolor(const RenderProps* msg) {
  return *msg->underlayercolor_;
}
void RenderProps::clear_stoplabeloffset() {
  if (GetArenaForAllocation() == nullptr && stoplabeloffset_ != nullptr) {
    delete stoplabeloffset_;
  }
  stoplabeloffset_ = nullptr;
}
void RenderProps::clear_buslabeloffset() {
  if (GetArenaForAllocation() == nullptr && buslabeloffset_ != nullptr) {
    delete buslabeloffset_;
  }
  buslabeloffset_ = nullptr;
}
void RenderProps::clear_underlayercolor() {
  if (GetArenaForAllocation() == nullptr && underlayercolor_ != nullptr) {
    delete underlayercolor_;
  }
  underlayercolor_ = nullptr;
}
void RenderProps::clear_colorpalette() {
  colorpalette_.Clear();
}
RenderProps::RenderProps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  colorpalette_(arena),
  layers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.RenderProps)
}
RenderProps::RenderProps(const RenderProps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      colorpalette_(from.colorpalette_),
      layers_(from.layers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stoplabeloffset()) {
    stoplabeloffset_ = new ::Serialization::Point(*from.stoplabeloffset_);
  } else {
    stoplabeloffset_ = nullptr;
  }
  if (from._internal_has_buslabeloffset()) {
    buslabeloffset_ = new ::Serialization::Point(*from.buslabeloffset_);
  } else {
    buslabeloffset_ = nullptr;
  }
  if (from._internal_has_underlayercolor()) {
    underlayercolor_ = new ::Serialization::Color(*from.underlayercolor_);
  } else {
    underlayercolor_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&buslabelfontsize_) -
    reinterpret_cast<char*>(&width_)) + sizeof(buslabelfontsize_));
  // @@protoc_insertion_point(copy_constructor:Serialization.RenderProps)
}

inline void RenderProps::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stoplabeloffset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&buslabelfontsize_) -
    reinterpret_cast<char*>(&stoplabeloffset_)) + sizeof(buslabelfontsize_));
}

RenderProps::~RenderProps() {
  // @@protoc_insertion_point(destructor:Serialization.RenderProps)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RenderProps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete stoplabeloffset_;
  if (this != internal_default_instance()) delete buslabeloffset_;
  if (this != internal_default_instance()) delete underlayercolor_;
}

void RenderProps::ArenaDtor(void* object) {
  RenderProps* _this = reinterpret_cast< RenderProps* >(object);
  (void)_this;
}
void RenderProps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenderProps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RenderProps::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.RenderProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  colorpalette_.Clear();
  layers_.Clear();
  if (GetArenaForAllocation() == nullptr && stoplabeloffset_ != nullptr) {
    delete stoplabeloffset_;
  }
  stoplabeloffset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && buslabeloffset_ != nullptr) {
    delete buslabeloffset_;
  }
  buslabeloffset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && underlayercolor_ != nullptr) {
    delete underlayercolor_;
  }
  underlayercolor_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buslabelfontsize_) -
      reinterpret_cast<char*>(&width_)) + sizeof(buslabelfontsize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenderProps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double padding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stopRadius = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          stopradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lineWidth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          linewidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double outerMargin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          outermargin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double underlayerWidth = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          underlayerwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double companyRadius = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          companyradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double companyLineWidth = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          companylinewidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 stopLabelFontSize = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          stoplabelfontsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 busLabelFontSize = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          buslabelfontsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Serialization.Point stopLabelOffset = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_stoplabeloffset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Serialization.Point busLabelOffset = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_buslabeloffset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Serialization.Color underlayerColor = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlayercolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Serialization.Color colorPalette = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_colorpalette(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string layers = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_layers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.RenderProps.layers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenderProps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.RenderProps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double width = 1;
  if (!(this->_internal_width() <= 0 && this->_internal_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_width(), target);
  }

  // double height = 2;
  if (!(this->_internal_height() <= 0 && this->_internal_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_height(), target);
  }

  // double padding = 3;
  if (!(this->_internal_padding() <= 0 && this->_internal_padding() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_padding(), target);
  }

  // double stopRadius = 4;
  if (!(this->_internal_stopradius() <= 0 && this->_internal_stopradius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_stopradius(), target);
  }

  // double lineWidth = 5;
  if (!(this->_internal_linewidth() <= 0 && this->_internal_linewidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_linewidth(), target);
  }

  // double outerMargin = 6;
  if (!(this->_internal_outermargin() <= 0 && this->_internal_outermargin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_outermargin(), target);
  }

  // double underlayerWidth = 7;
  if (!(this->_internal_underlayerwidth() <= 0 && this->_internal_underlayerwidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_underlayerwidth(), target);
  }

  // double companyRadius = 8;
  if (!(this->_internal_companyradius() <= 0 && this->_internal_companyradius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_companyradius(), target);
  }

  // double companyLineWidth = 9;
  if (!(this->_internal_companylinewidth() <= 0 && this->_internal_companylinewidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_companylinewidth(), target);
  }

  // int32 stopLabelFontSize = 10;
  if (this->_internal_stoplabelfontsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_stoplabelfontsize(), target);
  }

  // int32 busLabelFontSize = 11;
  if (this->_internal_buslabelfontsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_buslabelfontsize(), target);
  }

  // .Serialization.Point stopLabelOffset = 12;
  if (this->_internal_has_stoplabeloffset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::stoplabeloffset(this), target, stream);
  }

  // .Serialization.Point busLabelOffset = 13;
  if (this->_internal_has_buslabeloffset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::buslabeloffset(this), target, stream);
  }

  // .Serialization.Color underlayerColor = 14;
  if (this->_internal_has_underlayercolor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::underlayercolor(this), target, stream);
  }

  // repeated .Serialization.Color colorPalette = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_colorpalette_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_colorpalette(i), target, stream);
  }

  // repeated string layers = 16;
  for (int i = 0, n = this->_internal_layers_size(); i < n; i++) {
    const auto& s = this->_internal_layers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.RenderProps.layers");
    target = stream->WriteString(16, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.RenderProps)
  return target;
}

size_t RenderProps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.RenderProps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Serialization.Color colorPalette = 15;
  total_size += 1UL * this->_internal_colorpalette_size();
  for (const auto& msg : this->colorpalette_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string layers = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(layers_.size());
  for (int i = 0, n = layers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      layers_.Get(i));
  }

  // .Serialization.Point stopLabelOffset = 12;
  if (this->_internal_has_stoplabeloffset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stoplabeloffset_);
  }

  // .Serialization.Point busLabelOffset = 13;
  if (this->_internal_has_buslabeloffset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buslabeloffset_);
  }

  // .Serialization.Color underlayerColor = 14;
  if (this->_internal_has_underlayercolor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *underlayercolor_);
  }

  // double width = 1;
  if (!(this->_internal_width() <= 0 && this->_internal_width() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 2;
  if (!(this->_internal_height() <= 0 && this->_internal_height() >= 0)) {
    total_size += 1 + 8;
  }

  // double padding = 3;
  if (!(this->_internal_padding() <= 0 && this->_internal_padding() >= 0)) {
    total_size += 1 + 8;
  }

  // double stopRadius = 4;
  if (!(this->_internal_stopradius() <= 0 && this->_internal_stopradius() >= 0)) {
    total_size += 1 + 8;
  }

  // double lineWidth = 5;
  if (!(this->_internal_linewidth() <= 0 && this->_internal_linewidth() >= 0)) {
    total_size += 1 + 8;
  }

  // double outerMargin = 6;
  if (!(this->_internal_outermargin() <= 0 && this->_internal_outermargin() >= 0)) {
    total_size += 1 + 8;
  }

  // double underlayerWidth = 7;
  if (!(this->_internal_underlayerwidth() <= 0 && this->_internal_underlayerwidth() >= 0)) {
    total_size += 1 + 8;
  }

  // double companyRadius = 8;
  if (!(this->_internal_companyradius() <= 0 && this->_internal_companyradius() >= 0)) {
    total_size += 1 + 8;
  }

  // double companyLineWidth = 9;
  if (!(this->_internal_companylinewidth() <= 0 && this->_internal_companylinewidth() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 stopLabelFontSize = 10;
  if (this->_internal_stoplabelfontsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stoplabelfontsize());
  }

  // int32 busLabelFontSize = 11;
  if (this->_internal_buslabelfontsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buslabelfontsize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenderProps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RenderProps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenderProps::GetClassData() const { return &_class_data_; }

void RenderProps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RenderProps *>(to)->MergeFrom(
      static_cast<const RenderProps &>(from));
}


void RenderProps::MergeFrom(const RenderProps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.RenderProps)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  colorpalette_.MergeFrom(from.colorpalette_);
  layers_.MergeFrom(from.layers_);
  if (from._internal_has_stoplabeloffset()) {
    _internal_mutable_stoplabeloffset()->::Serialization::Point::MergeFrom(from._internal_stoplabeloffset());
  }
  if (from._internal_has_buslabeloffset()) {
    _internal_mutable_buslabeloffset()->::Serialization::Point::MergeFrom(from._internal_buslabeloffset());
  }
  if (from._internal_has_underlayercolor()) {
    _internal_mutable_underlayercolor()->::Serialization::Color::MergeFrom(from._internal_underlayercolor());
  }
  if (!(from._internal_width() <= 0 && from._internal_width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from._internal_height() <= 0 && from._internal_height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (!(from._internal_padding() <= 0 && from._internal_padding() >= 0)) {
    _internal_set_padding(from._internal_padding());
  }
  if (!(from._internal_stopradius() <= 0 && from._internal_stopradius() >= 0)) {
    _internal_set_stopradius(from._internal_stopradius());
  }
  if (!(from._internal_linewidth() <= 0 && from._internal_linewidth() >= 0)) {
    _internal_set_linewidth(from._internal_linewidth());
  }
  if (!(from._internal_outermargin() <= 0 && from._internal_outermargin() >= 0)) {
    _internal_set_outermargin(from._internal_outermargin());
  }
  if (!(from._internal_underlayerwidth() <= 0 && from._internal_underlayerwidth() >= 0)) {
    _internal_set_underlayerwidth(from._internal_underlayerwidth());
  }
  if (!(from._internal_companyradius() <= 0 && from._internal_companyradius() >= 0)) {
    _internal_set_companyradius(from._internal_companyradius());
  }
  if (!(from._internal_companylinewidth() <= 0 && from._internal_companylinewidth() >= 0)) {
    _internal_set_companylinewidth(from._internal_companylinewidth());
  }
  if (from._internal_stoplabelfontsize() != 0) {
    _internal_set_stoplabelfontsize(from._internal_stoplabelfontsize());
  }
  if (from._internal_buslabelfontsize() != 0) {
    _internal_set_buslabelfontsize(from._internal_buslabelfontsize());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenderProps::CopyFrom(const RenderProps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.RenderProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderProps::IsInitialized() const {
  return true;
}

void RenderProps::InternalSwap(RenderProps* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  colorpalette_.InternalSwap(&other->colorpalette_);
  layers_.InternalSwap(&other->layers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RenderProps, buslabelfontsize_)
      + sizeof(RenderProps::buslabelfontsize_)
      - PROTOBUF_FIELD_OFFSET(RenderProps, stoplabeloffset_)>(
          reinterpret_cast<char*>(&stoplabeloffset_),
          reinterpret_cast<char*>(&other->stoplabeloffset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RenderProps::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5frenderer_2eproto_getter, &descriptor_table_transport_5frenderer_2eproto_once,
      file_level_metadata_transport_5frenderer_2eproto[0]);
}

// ===================================================================

class BusDescription::_Internal {
 public:
};

BusDescription::BusDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stops_(arena),
  endstops_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.BusDescription)
}
BusDescription::BusDescription(const BusDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stops_(from.stops_),
      endstops_(from.endstops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Serialization.BusDescription)
}

inline void BusDescription::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BusDescription::~BusDescription() {
  // @@protoc_insertion_point(destructor:Serialization.BusDescription)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BusDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BusDescription::ArenaDtor(void* object) {
  BusDescription* _this = reinterpret_cast< BusDescription* >(object);
  (void)_this;
}
void BusDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BusDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BusDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.BusDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_.Clear();
  endstops_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.BusDescription.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string stops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stops();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.BusDescription.stops"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string endStops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endstops();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.BusDescription.endStops"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BusDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.BusDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.BusDescription.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string stops = 2;
  for (int i = 0, n = this->_internal_stops_size(); i < n; i++) {
    const auto& s = this->_internal_stops(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.BusDescription.stops");
    target = stream->WriteString(2, s, target);
  }

  // repeated string endStops = 3;
  for (int i = 0, n = this->_internal_endstops_size(); i < n; i++) {
    const auto& s = this->_internal_endstops(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.BusDescription.endStops");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.BusDescription)
  return target;
}

size_t BusDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.BusDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stops = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stops_.size());
  for (int i = 0, n = stops_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stops_.Get(i));
  }

  // repeated string endStops = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(endstops_.size());
  for (int i = 0, n = endstops_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      endstops_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BusDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BusDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BusDescription::GetClassData() const { return &_class_data_; }

void BusDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BusDescription *>(to)->MergeFrom(
      static_cast<const BusDescription &>(from));
}


void BusDescription::MergeFrom(const BusDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.BusDescription)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops_.MergeFrom(from.stops_);
  endstops_.MergeFrom(from.endstops_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BusDescription::CopyFrom(const BusDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.BusDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusDescription::IsInitialized() const {
  return true;
}

void BusDescription::InternalSwap(BusDescription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stops_.InternalSwap(&other->stops_);
  endstops_.InternalSwap(&other->endstops_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BusDescription::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5frenderer_2eproto_getter, &descriptor_table_transport_5frenderer_2eproto_once,
      file_level_metadata_transport_5frenderer_2eproto[1]);
}

// ===================================================================

class CompaniesDescription::_Internal {
 public:
  static const ::SphereProto::Coords& coords(const CompaniesDescription* msg);
};

const ::SphereProto::Coords&
CompaniesDescription::_Internal::coords(const CompaniesDescription* msg) {
  return *msg->coords_;
}
void CompaniesDescription::clear_nearbystops() {
  nearbystops_.Clear();
}
void CompaniesDescription::clear_coords() {
  if (GetArenaForAllocation() == nullptr && coords_ != nullptr) {
    delete coords_;
  }
  coords_ = nullptr;
}
CompaniesDescription::CompaniesDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nearbystops_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.CompaniesDescription)
}
CompaniesDescription::CompaniesDescription(const CompaniesDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nearbystops_(from.nearbystops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mainname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mainname().empty()) {
    mainname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mainname(), 
      GetArenaForAllocation());
  }
  displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_displayname().empty()) {
    displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_displayname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coords()) {
    coords_ = new ::SphereProto::Coords(*from.coords_);
  } else {
    coords_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Serialization.CompaniesDescription)
}

inline void CompaniesDescription::SharedCtor() {
mainname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coords_ = nullptr;
}

CompaniesDescription::~CompaniesDescription() {
  // @@protoc_insertion_point(destructor:Serialization.CompaniesDescription)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CompaniesDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mainname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  displayname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coords_;
}

void CompaniesDescription::ArenaDtor(void* object) {
  CompaniesDescription* _this = reinterpret_cast< CompaniesDescription* >(object);
  (void)_this;
}
void CompaniesDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompaniesDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompaniesDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.CompaniesDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nearbystops_.Clear();
  mainname_.ClearToEmpty();
  displayname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coords_ != nullptr) {
    delete coords_;
  }
  coords_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompaniesDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mainName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mainname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.CompaniesDescription.mainName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string displayName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_displayname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.CompaniesDescription.displayName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .YellowPages.NearbyStop nearbyStops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nearbystops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .SphereProto.Coords coords = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_coords(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompaniesDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.CompaniesDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mainName = 1;
  if (!this->_internal_mainname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mainname().data(), static_cast<int>(this->_internal_mainname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.CompaniesDescription.mainName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mainname(), target);
  }

  // string displayName = 2;
  if (!this->_internal_displayname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_displayname().data(), static_cast<int>(this->_internal_displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.CompaniesDescription.displayName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_displayname(), target);
  }

  // repeated .YellowPages.NearbyStop nearbyStops = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nearbystops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_nearbystops(i), target, stream);
  }

  // .SphereProto.Coords coords = 4;
  if (this->_internal_has_coords()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::coords(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.CompaniesDescription)
  return target;
}

size_t CompaniesDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.CompaniesDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .YellowPages.NearbyStop nearbyStops = 3;
  total_size += 1UL * this->_internal_nearbystops_size();
  for (const auto& msg : this->nearbystops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string mainName = 1;
  if (!this->_internal_mainname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mainname());
  }

  // string displayName = 2;
  if (!this->_internal_displayname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displayname());
  }

  // .SphereProto.Coords coords = 4;
  if (this->_internal_has_coords()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coords_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompaniesDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CompaniesDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompaniesDescription::GetClassData() const { return &_class_data_; }

void CompaniesDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CompaniesDescription *>(to)->MergeFrom(
      static_cast<const CompaniesDescription &>(from));
}


void CompaniesDescription::MergeFrom(const CompaniesDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.CompaniesDescription)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nearbystops_.MergeFrom(from.nearbystops_);
  if (!from._internal_mainname().empty()) {
    _internal_set_mainname(from._internal_mainname());
  }
  if (!from._internal_displayname().empty()) {
    _internal_set_displayname(from._internal_displayname());
  }
  if (from._internal_has_coords()) {
    _internal_mutable_coords()->::SphereProto::Coords::MergeFrom(from._internal_coords());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompaniesDescription::CopyFrom(const CompaniesDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.CompaniesDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompaniesDescription::IsInitialized() const {
  return true;
}

void CompaniesDescription::InternalSwap(CompaniesDescription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nearbystops_.InternalSwap(&other->nearbystops_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mainname_, GetArenaForAllocation(),
      &other->mainname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &displayname_, GetArenaForAllocation(),
      &other->displayname_, other->GetArenaForAllocation()
  );
  swap(coords_, other->coords_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompaniesDescription::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5frenderer_2eproto_getter, &descriptor_table_transport_5frenderer_2eproto_once,
      file_level_metadata_transport_5frenderer_2eproto[2]);
}

// ===================================================================

class BusToColor::_Internal {
 public:
  static const ::Serialization::Color& buscolor(const BusToColor* msg);
};

const ::Serialization::Color&
BusToColor::_Internal::buscolor(const BusToColor* msg) {
  return *msg->buscolor_;
}
void BusToColor::clear_buscolor() {
  if (GetArenaForAllocation() == nullptr && buscolor_ != nullptr) {
    delete buscolor_;
  }
  buscolor_ = nullptr;
}
BusToColor::BusToColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.BusToColor)
}
BusToColor::BusToColor(const BusToColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  busname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_busname().empty()) {
    busname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_busname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_buscolor()) {
    buscolor_ = new ::Serialization::Color(*from.buscolor_);
  } else {
    buscolor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Serialization.BusToColor)
}

inline void BusToColor::SharedCtor() {
busname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buscolor_ = nullptr;
}

BusToColor::~BusToColor() {
  // @@protoc_insertion_point(destructor:Serialization.BusToColor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BusToColor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  busname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete buscolor_;
}

void BusToColor::ArenaDtor(void* object) {
  BusToColor* _this = reinterpret_cast< BusToColor* >(object);
  (void)_this;
}
void BusToColor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BusToColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BusToColor::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.BusToColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  busname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && buscolor_ != nullptr) {
    delete buscolor_;
  }
  buscolor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusToColor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string busName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_busname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.BusToColor.busName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Serialization.Color busColor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_buscolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BusToColor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.BusToColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string busName = 1;
  if (!this->_internal_busname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_busname().data(), static_cast<int>(this->_internal_busname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.BusToColor.busName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_busname(), target);
  }

  // .Serialization.Color busColor = 2;
  if (this->_internal_has_buscolor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::buscolor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.BusToColor)
  return target;
}

size_t BusToColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.BusToColor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string busName = 1;
  if (!this->_internal_busname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_busname());
  }

  // .Serialization.Color busColor = 2;
  if (this->_internal_has_buscolor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buscolor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BusToColor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BusToColor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BusToColor::GetClassData() const { return &_class_data_; }

void BusToColor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BusToColor *>(to)->MergeFrom(
      static_cast<const BusToColor &>(from));
}


void BusToColor::MergeFrom(const BusToColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.BusToColor)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_busname().empty()) {
    _internal_set_busname(from._internal_busname());
  }
  if (from._internal_has_buscolor()) {
    _internal_mutable_buscolor()->::Serialization::Color::MergeFrom(from._internal_buscolor());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BusToColor::CopyFrom(const BusToColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.BusToColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusToColor::IsInitialized() const {
  return true;
}

void BusToColor::InternalSwap(BusToColor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &busname_, GetArenaForAllocation(),
      &other->busname_, other->GetArenaForAllocation()
  );
  swap(buscolor_, other->buscolor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BusToColor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5frenderer_2eproto_getter, &descriptor_table_transport_5frenderer_2eproto_once,
      file_level_metadata_transport_5frenderer_2eproto[3]);
}

// ===================================================================

class StopPosition::_Internal {
 public:
  static const ::Serialization::Point& stopposition(const StopPosition* msg);
};

const ::Serialization::Point&
StopPosition::_Internal::stopposition(const StopPosition* msg) {
  return *msg->stopposition_;
}
void StopPosition::clear_stopposition() {
  if (GetArenaForAllocation() == nullptr && stopposition_ != nullptr) {
    delete stopposition_;
  }
  stopposition_ = nullptr;
}
StopPosition::StopPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.StopPosition)
}
StopPosition::StopPosition(const StopPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stopname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stopname().empty()) {
    stopname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stopname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_stopposition()) {
    stopposition_ = new ::Serialization::Point(*from.stopposition_);
  } else {
    stopposition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Serialization.StopPosition)
}

inline void StopPosition::SharedCtor() {
stopname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stopposition_ = nullptr;
}

StopPosition::~StopPosition() {
  // @@protoc_insertion_point(destructor:Serialization.StopPosition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StopPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stopname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stopposition_;
}

void StopPosition::ArenaDtor(void* object) {
  StopPosition* _this = reinterpret_cast< StopPosition* >(object);
  (void)_this;
}
void StopPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.StopPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stopname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && stopposition_ != nullptr) {
    delete stopposition_;
  }
  stopposition_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stopName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stopname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.StopPosition.stopName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Serialization.Point stopPosition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stopposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.StopPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stopName = 1;
  if (!this->_internal_stopname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stopname().data(), static_cast<int>(this->_internal_stopname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.StopPosition.stopName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stopname(), target);
  }

  // .Serialization.Point stopPosition = 2;
  if (this->_internal_has_stopposition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stopposition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.StopPosition)
  return target;
}

size_t StopPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.StopPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stopName = 1;
  if (!this->_internal_stopname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stopname());
  }

  // .Serialization.Point stopPosition = 2;
  if (this->_internal_has_stopposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stopposition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopPosition::GetClassData() const { return &_class_data_; }

void StopPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StopPosition *>(to)->MergeFrom(
      static_cast<const StopPosition &>(from));
}


void StopPosition::MergeFrom(const StopPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.StopPosition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stopname().empty()) {
    _internal_set_stopname(from._internal_stopname());
  }
  if (from._internal_has_stopposition()) {
    _internal_mutable_stopposition()->::Serialization::Point::MergeFrom(from._internal_stopposition());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopPosition::CopyFrom(const StopPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.StopPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPosition::IsInitialized() const {
  return true;
}

void StopPosition::InternalSwap(StopPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stopname_, GetArenaForAllocation(),
      &other->stopname_, other->GetArenaForAllocation()
  );
  swap(stopposition_, other->stopposition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopPosition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5frenderer_2eproto_getter, &descriptor_table_transport_5frenderer_2eproto_once,
      file_level_metadata_transport_5frenderer_2eproto[4]);
}

// ===================================================================

class CompanyPosition::_Internal {
 public:
  static const ::Serialization::Point& companyposition(const CompanyPosition* msg);
};

const ::Serialization::Point&
CompanyPosition::_Internal::companyposition(const CompanyPosition* msg) {
  return *msg->companyposition_;
}
void CompanyPosition::clear_companyposition() {
  if (GetArenaForAllocation() == nullptr && companyposition_ != nullptr) {
    delete companyposition_;
  }
  companyposition_ = nullptr;
}
CompanyPosition::CompanyPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.CompanyPosition)
}
CompanyPosition::CompanyPosition(const CompanyPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  companyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_companyname().empty()) {
    companyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_companyname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_companyposition()) {
    companyposition_ = new ::Serialization::Point(*from.companyposition_);
  } else {
    companyposition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Serialization.CompanyPosition)
}

inline void CompanyPosition::SharedCtor() {
companyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
companyposition_ = nullptr;
}

CompanyPosition::~CompanyPosition() {
  // @@protoc_insertion_point(destructor:Serialization.CompanyPosition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CompanyPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  companyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete companyposition_;
}

void CompanyPosition::ArenaDtor(void* object) {
  CompanyPosition* _this = reinterpret_cast< CompanyPosition* >(object);
  (void)_this;
}
void CompanyPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompanyPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompanyPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.CompanyPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  companyname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && companyposition_ != nullptr) {
    delete companyposition_;
  }
  companyposition_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompanyPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string companyName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_companyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.CompanyPosition.companyName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Serialization.Point companyPosition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_companyposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompanyPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.CompanyPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string companyName = 1;
  if (!this->_internal_companyname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_companyname().data(), static_cast<int>(this->_internal_companyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.CompanyPosition.companyName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_companyname(), target);
  }

  // .Serialization.Point companyPosition = 2;
  if (this->_internal_has_companyposition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::companyposition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.CompanyPosition)
  return target;
}

size_t CompanyPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.CompanyPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string companyName = 1;
  if (!this->_internal_companyname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_companyname());
  }

  // .Serialization.Point companyPosition = 2;
  if (this->_internal_has_companyposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *companyposition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompanyPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CompanyPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompanyPosition::GetClassData() const { return &_class_data_; }

void CompanyPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CompanyPosition *>(to)->MergeFrom(
      static_cast<const CompanyPosition &>(from));
}


void CompanyPosition::MergeFrom(const CompanyPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.CompanyPosition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_companyname().empty()) {
    _internal_set_companyname(from._internal_companyname());
  }
  if (from._internal_has_companyposition()) {
    _internal_mutable_companyposition()->::Serialization::Point::MergeFrom(from._internal_companyposition());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompanyPosition::CopyFrom(const CompanyPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.CompanyPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompanyPosition::IsInitialized() const {
  return true;
}

void CompanyPosition::InternalSwap(CompanyPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &companyname_, GetArenaForAllocation(),
      &other->companyname_, other->GetArenaForAllocation()
  );
  swap(companyposition_, other->companyposition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompanyPosition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5frenderer_2eproto_getter, &descriptor_table_transport_5frenderer_2eproto_once,
      file_level_metadata_transport_5frenderer_2eproto[5]);
}

// ===================================================================

class TransportRenderer::_Internal {
 public:
  static const ::Serialization::RenderProps& renderprops(const TransportRenderer* msg);
};

const ::Serialization::RenderProps&
TransportRenderer::_Internal::renderprops(const TransportRenderer* msg) {
  return *msg->renderprops_;
}
TransportRenderer::TransportRenderer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  busesdict_(arena),
  stoppositions_(arena),
  buscolors_(arena),
  companiesdescription_(arena),
  companiespositions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.TransportRenderer)
}
TransportRenderer::TransportRenderer(const TransportRenderer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      busesdict_(from.busesdict_),
      stoppositions_(from.stoppositions_),
      buscolors_(from.buscolors_),
      companiesdescription_(from.companiesdescription_),
      companiespositions_(from.companiespositions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_renderprops()) {
    renderprops_ = new ::Serialization::RenderProps(*from.renderprops_);
  } else {
    renderprops_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Serialization.TransportRenderer)
}

inline void TransportRenderer::SharedCtor() {
renderprops_ = nullptr;
}

TransportRenderer::~TransportRenderer() {
  // @@protoc_insertion_point(destructor:Serialization.TransportRenderer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransportRenderer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete renderprops_;
}

void TransportRenderer::ArenaDtor(void* object) {
  TransportRenderer* _this = reinterpret_cast< TransportRenderer* >(object);
  (void)_this;
}
void TransportRenderer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransportRenderer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransportRenderer::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.TransportRenderer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  busesdict_.Clear();
  stoppositions_.Clear();
  buscolors_.Clear();
  companiesdescription_.Clear();
  companiespositions_.Clear();
  if (GetArenaForAllocation() == nullptr && renderprops_ != nullptr) {
    delete renderprops_;
  }
  renderprops_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportRenderer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Serialization.RenderProps renderProps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_renderprops(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Serialization.BusDescription busesDict = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_busesdict(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Serialization.StopPosition stopPositions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stoppositions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Serialization.BusToColor busColors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buscolors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Serialization.CompaniesDescription companiesDescription = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_companiesdescription(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Serialization.CompanyPosition companiesPositions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_companiespositions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportRenderer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.TransportRenderer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Serialization.RenderProps renderProps = 1;
  if (this->_internal_has_renderprops()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::renderprops(this), target, stream);
  }

  // repeated .Serialization.BusDescription busesDict = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_busesdict_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_busesdict(i), target, stream);
  }

  // repeated .Serialization.StopPosition stopPositions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stoppositions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_stoppositions(i), target, stream);
  }

  // repeated .Serialization.BusToColor busColors = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buscolors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_buscolors(i), target, stream);
  }

  // repeated .Serialization.CompaniesDescription companiesDescription = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_companiesdescription_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_companiesdescription(i), target, stream);
  }

  // repeated .Serialization.CompanyPosition companiesPositions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_companiespositions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_companiespositions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.TransportRenderer)
  return target;
}

size_t TransportRenderer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.TransportRenderer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Serialization.BusDescription busesDict = 2;
  total_size += 1UL * this->_internal_busesdict_size();
  for (const auto& msg : this->busesdict_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Serialization.StopPosition stopPositions = 3;
  total_size += 1UL * this->_internal_stoppositions_size();
  for (const auto& msg : this->stoppositions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Serialization.BusToColor busColors = 4;
  total_size += 1UL * this->_internal_buscolors_size();
  for (const auto& msg : this->buscolors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Serialization.CompaniesDescription companiesDescription = 5;
  total_size += 1UL * this->_internal_companiesdescription_size();
  for (const auto& msg : this->companiesdescription_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Serialization.CompanyPosition companiesPositions = 6;
  total_size += 1UL * this->_internal_companiespositions_size();
  for (const auto& msg : this->companiespositions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Serialization.RenderProps renderProps = 1;
  if (this->_internal_has_renderprops()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *renderprops_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransportRenderer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransportRenderer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransportRenderer::GetClassData() const { return &_class_data_; }

void TransportRenderer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransportRenderer *>(to)->MergeFrom(
      static_cast<const TransportRenderer &>(from));
}


void TransportRenderer::MergeFrom(const TransportRenderer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.TransportRenderer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  busesdict_.MergeFrom(from.busesdict_);
  stoppositions_.MergeFrom(from.stoppositions_);
  buscolors_.MergeFrom(from.buscolors_);
  companiesdescription_.MergeFrom(from.companiesdescription_);
  companiespositions_.MergeFrom(from.companiespositions_);
  if (from._internal_has_renderprops()) {
    _internal_mutable_renderprops()->::Serialization::RenderProps::MergeFrom(from._internal_renderprops());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransportRenderer::CopyFrom(const TransportRenderer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.TransportRenderer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRenderer::IsInitialized() const {
  return true;
}

void TransportRenderer::InternalSwap(TransportRenderer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  busesdict_.InternalSwap(&other->busesdict_);
  stoppositions_.InternalSwap(&other->stoppositions_);
  buscolors_.InternalSwap(&other->buscolors_);
  companiesdescription_.InternalSwap(&other->companiesdescription_);
  companiespositions_.InternalSwap(&other->companiespositions_);
  swap(renderprops_, other->renderprops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportRenderer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5frenderer_2eproto_getter, &descriptor_table_transport_5frenderer_2eproto_once,
      file_level_metadata_transport_5frenderer_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Serialization
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Serialization::RenderProps* Arena::CreateMaybeMessage< ::Serialization::RenderProps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::RenderProps >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialization::BusDescription* Arena::CreateMaybeMessage< ::Serialization::BusDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::BusDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialization::CompaniesDescription* Arena::CreateMaybeMessage< ::Serialization::CompaniesDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::CompaniesDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialization::BusToColor* Arena::CreateMaybeMessage< ::Serialization::BusToColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::BusToColor >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialization::StopPosition* Arena::CreateMaybeMessage< ::Serialization::StopPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::StopPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialization::CompanyPosition* Arena::CreateMaybeMessage< ::Serialization::CompanyPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::CompanyPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialization::TransportRenderer* Arena::CreateMaybeMessage< ::Serialization::TransportRenderer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::TransportRenderer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
