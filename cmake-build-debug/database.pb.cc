// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: database.proto

#include "database.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace YellowPages {
constexpr Database_RubricsEntry_DoNotUse::Database_RubricsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Database_RubricsEntry_DoNotUseDefaultTypeInternal {
  constexpr Database_RubricsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Database_RubricsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Database_RubricsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Database_RubricsEntry_DoNotUseDefaultTypeInternal _Database_RubricsEntry_DoNotUse_default_instance_;
constexpr Database::Database(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : companies_()
  , rubrics_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct DatabaseDefaultTypeInternal {
  constexpr DatabaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DatabaseDefaultTypeInternal() {}
  union {
    Database _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DatabaseDefaultTypeInternal _Database_default_instance_;
}  // namespace YellowPages
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_database_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_database_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_database_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_database_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::YellowPages::Database_RubricsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::YellowPages::Database_RubricsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YellowPages::Database_RubricsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::YellowPages::Database_RubricsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YellowPages::Database, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YellowPages::Database, companies_),
  PROTOBUF_FIELD_OFFSET(::YellowPages::Database, rubrics_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::YellowPages::Database_RubricsEntry_DoNotUse)},
  { 9, -1, sizeof(::YellowPages::Database)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YellowPages::_Database_RubricsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YellowPages::_Database_default_instance_),
};

const char descriptor_table_protodef_database_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016database.proto\022\013YellowPages\032\rcompany.p"
  "roto\032\014rubric.proto\"\255\001\n\010Database\022\'\n\tcompa"
  "nies\030\001 \003(\0132\024.YellowPages.Company\0223\n\007rubr"
  "ics\030\002 \003(\0132\".YellowPages.Database.Rubrics"
  "Entry\032C\n\014RubricsEntry\022\013\n\003key\030\001 \001(\004\022\"\n\005va"
  "lue\030\002 \001(\0132\023.YellowPages.Rubric:\0028\001b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_database_2eproto_deps[2] = {
  &::descriptor_table_company_2eproto,
  &::descriptor_table_rubric_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_database_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_database_2eproto = {
  false, false, 242, descriptor_table_protodef_database_2eproto, "database.proto", 
  &descriptor_table_database_2eproto_once, descriptor_table_database_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_database_2eproto::offsets,
  file_level_metadata_database_2eproto, file_level_enum_descriptors_database_2eproto, file_level_service_descriptors_database_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_database_2eproto_getter() {
  return &descriptor_table_database_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_database_2eproto(&descriptor_table_database_2eproto);
namespace YellowPages {

// ===================================================================

Database_RubricsEntry_DoNotUse::Database_RubricsEntry_DoNotUse() {}
Database_RubricsEntry_DoNotUse::Database_RubricsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Database_RubricsEntry_DoNotUse::MergeFrom(const Database_RubricsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Database_RubricsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_database_2eproto_getter, &descriptor_table_database_2eproto_once,
      file_level_metadata_database_2eproto[0]);
}

// ===================================================================

class Database::_Internal {
 public:
};

void Database::clear_companies() {
  companies_.Clear();
}
void Database::clear_rubrics() {
  rubrics_.Clear();
}
Database::Database(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  companies_(arena),
  rubrics_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:YellowPages.Database)
}
Database::Database(const Database& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      companies_(from.companies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rubrics_.MergeFrom(from.rubrics_);
  // @@protoc_insertion_point(copy_constructor:YellowPages.Database)
}

inline void Database::SharedCtor() {
}

Database::~Database() {
  // @@protoc_insertion_point(destructor:YellowPages.Database)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Database::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Database::ArenaDtor(void* object) {
  Database* _this = reinterpret_cast< Database* >(object);
  (void)_this;
  _this->rubrics_. ~MapField();
}
inline void Database::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Database::ArenaDtor);
  }
}
void Database::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Database::Clear() {
// @@protoc_insertion_point(message_clear_start:YellowPages.Database)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  companies_.Clear();
  rubrics_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Database::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .YellowPages.Company companies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_companies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint64, .YellowPages.Rubric> rubrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&rubrics_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Database::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YellowPages.Database)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .YellowPages.Company companies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_companies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_companies(i), target, stream);
  }

  // map<uint64, .YellowPages.Rubric> rubrics = 2;
  if (!this->_internal_rubrics().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::YellowPages::Rubric >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_rubrics().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_rubrics().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::YellowPages::Rubric >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::YellowPages::Rubric >::const_iterator
          it = this->_internal_rubrics().begin();
          it != this->_internal_rubrics().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Database_RubricsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::YellowPages::Rubric >::const_iterator
          it = this->_internal_rubrics().begin();
          it != this->_internal_rubrics().end(); ++it) {
        target = Database_RubricsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YellowPages.Database)
  return target;
}

size_t Database::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YellowPages.Database)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .YellowPages.Company companies = 1;
  total_size += 1UL * this->_internal_companies_size();
  for (const auto& msg : this->companies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint64, .YellowPages.Rubric> rubrics = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rubrics_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::YellowPages::Rubric >::const_iterator
      it = this->_internal_rubrics().begin();
      it != this->_internal_rubrics().end(); ++it) {
    total_size += Database_RubricsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Database::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Database::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Database::GetClassData() const { return &_class_data_; }

void Database::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Database *>(to)->MergeFrom(
      static_cast<const Database &>(from));
}


void Database::MergeFrom(const Database& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YellowPages.Database)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  companies_.MergeFrom(from.companies_);
  rubrics_.MergeFrom(from.rubrics_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Database::CopyFrom(const Database& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YellowPages.Database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Database::IsInitialized() const {
  return true;
}

void Database::InternalSwap(Database* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  companies_.InternalSwap(&other->companies_);
  rubrics_.InternalSwap(&other->rubrics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Database::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_database_2eproto_getter, &descriptor_table_database_2eproto_once,
      file_level_metadata_database_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace YellowPages
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::YellowPages::Database_RubricsEntry_DoNotUse* Arena::CreateMaybeMessage< ::YellowPages::Database_RubricsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::YellowPages::Database_RubricsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::YellowPages::Database* Arena::CreateMaybeMessage< ::YellowPages::Database >(Arena* arena) {
  return Arena::CreateMessageInternal< ::YellowPages::Database >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
