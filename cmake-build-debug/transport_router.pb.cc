// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#include "transport_router.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Serialization {
constexpr SerializedRoutingSettings::SerializedRoutingSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : busvelocity_(0)
  , pedestrianvelocity_(0)
  , buswaittime_(0){}
struct SerializedRoutingSettingsDefaultTypeInternal {
  constexpr SerializedRoutingSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SerializedRoutingSettingsDefaultTypeInternal() {}
  union {
    SerializedRoutingSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SerializedRoutingSettingsDefaultTypeInternal _SerializedRoutingSettings_default_instance_;
constexpr SerializedStopVertexIds::SerializedStopVertexIds(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , in_(0u)
  , out_(0u){}
struct SerializedStopVertexIdsDefaultTypeInternal {
  constexpr SerializedStopVertexIdsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SerializedStopVertexIdsDefaultTypeInternal() {}
  union {
    SerializedStopVertexIds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SerializedStopVertexIdsDefaultTypeInternal _SerializedStopVertexIds_default_instance_;
constexpr VertexInfo::VertexInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stopname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VertexInfoDefaultTypeInternal {
  constexpr VertexInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VertexInfoDefaultTypeInternal() {}
  union {
    VertexInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VertexInfoDefaultTypeInternal _VertexInfo_default_instance_;
constexpr BusEdgeInfo::BusEdgeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spancount_(0u)
  , startstopindex_(0u)
  , endstopindex_(0u){}
struct BusEdgeInfoDefaultTypeInternal {
  constexpr BusEdgeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BusEdgeInfoDefaultTypeInternal() {}
  union {
    BusEdgeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BusEdgeInfoDefaultTypeInternal _BusEdgeInfo_default_instance_;
constexpr WaitEdgeInfo::WaitEdgeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WaitEdgeInfoDefaultTypeInternal {
  constexpr WaitEdgeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WaitEdgeInfoDefaultTypeInternal() {}
  union {
    WaitEdgeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WaitEdgeInfoDefaultTypeInternal _WaitEdgeInfo_default_instance_;
constexpr WalkEdgeInfo::WalkEdgeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : companyname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , companydisplayname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stopname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WalkEdgeInfoDefaultTypeInternal {
  constexpr WalkEdgeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WalkEdgeInfoDefaultTypeInternal() {}
  union {
    WalkEdgeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WalkEdgeInfoDefaultTypeInternal _WalkEdgeInfo_default_instance_;
constexpr CompaniesVertices::CompaniesVertices(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : companyname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vertexid_(0u){}
struct CompaniesVerticesDefaultTypeInternal {
  constexpr CompaniesVerticesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompaniesVerticesDefaultTypeInternal() {}
  union {
    CompaniesVertices _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompaniesVerticesDefaultTypeInternal _CompaniesVertices_default_instance_;
constexpr EdgeInfo::EdgeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct EdgeInfoDefaultTypeInternal {
  constexpr EdgeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EdgeInfoDefaultTypeInternal() {}
  union {
    EdgeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EdgeInfoDefaultTypeInternal _EdgeInfo_default_instance_;
constexpr TransportRouter::TransportRouter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stopvertexids_()
  , verticesinfo_()
  , edgesinfo_()
  , companiesvertices_()
  , routingsettings_(nullptr)
  , graph_(nullptr)
  , router_(nullptr){}
struct TransportRouterDefaultTypeInternal {
  constexpr TransportRouterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransportRouterDefaultTypeInternal() {}
  union {
    TransportRouter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransportRouterDefaultTypeInternal _TransportRouter_default_instance_;
}  // namespace Serialization
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_5frouter_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transport_5frouter_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_5frouter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_5frouter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::SerializedRoutingSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialization::SerializedRoutingSettings, buswaittime_),
  PROTOBUF_FIELD_OFFSET(::Serialization::SerializedRoutingSettings, busvelocity_),
  PROTOBUF_FIELD_OFFSET(::Serialization::SerializedRoutingSettings, pedestrianvelocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::SerializedStopVertexIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialization::SerializedStopVertexIds, name_),
  PROTOBUF_FIELD_OFFSET(::Serialization::SerializedStopVertexIds, in_),
  PROTOBUF_FIELD_OFFSET(::Serialization::SerializedStopVertexIds, out_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::VertexInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialization::VertexInfo, stopname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::BusEdgeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialization::BusEdgeInfo, name_),
  PROTOBUF_FIELD_OFFSET(::Serialization::BusEdgeInfo, spancount_),
  PROTOBUF_FIELD_OFFSET(::Serialization::BusEdgeInfo, startstopindex_),
  PROTOBUF_FIELD_OFFSET(::Serialization::BusEdgeInfo, endstopindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::WaitEdgeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::WalkEdgeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialization::WalkEdgeInfo, companyname_),
  PROTOBUF_FIELD_OFFSET(::Serialization::WalkEdgeInfo, companydisplayname_),
  PROTOBUF_FIELD_OFFSET(::Serialization::WalkEdgeInfo, stopname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::CompaniesVertices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialization::CompaniesVertices, companyname_),
  PROTOBUF_FIELD_OFFSET(::Serialization::CompaniesVertices, vertexid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::EdgeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Serialization::EdgeInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Serialization::EdgeInfo, edgeInfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportRouter, routingsettings_),
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportRouter, graph_),
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportRouter, router_),
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportRouter, stopvertexids_),
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportRouter, verticesinfo_),
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportRouter, edgesinfo_),
  PROTOBUF_FIELD_OFFSET(::Serialization::TransportRouter, companiesvertices_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Serialization::SerializedRoutingSettings)},
  { 8, -1, sizeof(::Serialization::SerializedStopVertexIds)},
  { 16, -1, sizeof(::Serialization::VertexInfo)},
  { 22, -1, sizeof(::Serialization::BusEdgeInfo)},
  { 31, -1, sizeof(::Serialization::WaitEdgeInfo)},
  { 36, -1, sizeof(::Serialization::WalkEdgeInfo)},
  { 44, -1, sizeof(::Serialization::CompaniesVertices)},
  { 51, -1, sizeof(::Serialization::EdgeInfo)},
  { 60, -1, sizeof(::Serialization::TransportRouter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_SerializedRoutingSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_SerializedStopVertexIds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_VertexInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_BusEdgeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_WaitEdgeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_WalkEdgeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_CompaniesVertices_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_EdgeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialization::_TransportRouter_default_instance_),
};

const char descriptor_table_protodef_transport_5frouter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026transport_router.proto\022\rSerialization\032"
  "\024directed_graph.proto\032\014router.proto\"a\n\031S"
  "erializedRoutingSettings\022\023\n\013busWaitTime\030"
  "\001 \001(\005\022\023\n\013busVelocity\030\002 \001(\001\022\032\n\022pedestrian"
  "Velocity\030\003 \001(\001\"@\n\027SerializedStopVertexId"
  "s\022\014\n\004name\030\001 \001(\t\022\n\n\002in\030\002 \001(\r\022\013\n\003out\030\003 \001(\r"
  "\"\036\n\nVertexInfo\022\020\n\010stopName\030\001 \001(\t\"\\\n\013BusE"
  "dgeInfo\022\014\n\004name\030\001 \001(\t\022\021\n\tspanCount\030\002 \001(\r"
  "\022\026\n\016startStopIndex\030\003 \001(\r\022\024\n\014endStopIndex"
  "\030\004 \001(\r\"\016\n\014WaitEdgeInfo\"Q\n\014WalkEdgeInfo\022\023"
  "\n\013companyName\030\001 \001(\t\022\032\n\022companyDisplayNam"
  "e\030\002 \001(\t\022\020\n\010stopName\030\003 \001(\t\":\n\021CompaniesVe"
  "rtices\022\023\n\013companyName\030\001 \001(\t\022\020\n\010vertexId\030"
  "\002 \001(\r\"\263\001\n\010EdgeInfo\0221\n\013busEdgeInfo\030\001 \001(\0132"
  "\032.Serialization.BusEdgeInfoH\000\0223\n\014waitEdg"
  "eInfo\030\002 \001(\0132\033.Serialization.WaitEdgeInfo"
  "H\000\0223\n\014walkEdgeInfo\030\003 \001(\0132\033.Serialization"
  ".WalkEdgeInfoH\000B\n\n\010edgeInfo\"\211\003\n\017Transpor"
  "tRouter\022A\n\017routingSettings\030\001 \001(\0132(.Seria"
  "lization.SerializedRoutingSettings\0223\n\005gr"
  "aph\030\002 \001(\0132$.Serialization.DirectedWeight"
  "edGraph\022%\n\006router\030\003 \001(\0132\025.Serialization."
  "Router\022=\n\rstopVertexIds\030\004 \003(\0132&.Serializ"
  "ation.SerializedStopVertexIds\022/\n\014vertice"
  "sInfo\030\005 \003(\0132\031.Serialization.VertexInfo\022*"
  "\n\tedgesInfo\030\006 \003(\0132\027.Serialization.EdgeIn"
  "fo\022;\n\021companiesVertices\030\007 \003(\0132 .Serializ"
  "ation.CompaniesVerticesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_5frouter_2eproto_deps[2] = {
  &::descriptor_table_directed_5fgraph_2eproto,
  &::descriptor_table_router_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_5frouter_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto = {
  false, false, 1111, descriptor_table_protodef_transport_5frouter_2eproto, "transport_router.proto", 
  &descriptor_table_transport_5frouter_2eproto_once, descriptor_table_transport_5frouter_2eproto_deps, 2, 9,
  schemas, file_default_instances, TableStruct_transport_5frouter_2eproto::offsets,
  file_level_metadata_transport_5frouter_2eproto, file_level_enum_descriptors_transport_5frouter_2eproto, file_level_service_descriptors_transport_5frouter_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_transport_5frouter_2eproto_getter() {
  return &descriptor_table_transport_5frouter_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_transport_5frouter_2eproto(&descriptor_table_transport_5frouter_2eproto);
namespace Serialization {

// ===================================================================

class SerializedRoutingSettings::_Internal {
 public:
};

SerializedRoutingSettings::SerializedRoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.SerializedRoutingSettings)
}
SerializedRoutingSettings::SerializedRoutingSettings(const SerializedRoutingSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&busvelocity_, &from.busvelocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&buswaittime_) -
    reinterpret_cast<char*>(&busvelocity_)) + sizeof(buswaittime_));
  // @@protoc_insertion_point(copy_constructor:Serialization.SerializedRoutingSettings)
}

inline void SerializedRoutingSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&busvelocity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&buswaittime_) -
    reinterpret_cast<char*>(&busvelocity_)) + sizeof(buswaittime_));
}

SerializedRoutingSettings::~SerializedRoutingSettings() {
  // @@protoc_insertion_point(destructor:Serialization.SerializedRoutingSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SerializedRoutingSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SerializedRoutingSettings::ArenaDtor(void* object) {
  SerializedRoutingSettings* _this = reinterpret_cast< SerializedRoutingSettings* >(object);
  (void)_this;
}
void SerializedRoutingSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedRoutingSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SerializedRoutingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.SerializedRoutingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&busvelocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buswaittime_) -
      reinterpret_cast<char*>(&busvelocity_)) + sizeof(buswaittime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedRoutingSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 busWaitTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          buswaittime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double busVelocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          busvelocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pedestrianVelocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          pedestrianvelocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedRoutingSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.SerializedRoutingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 busWaitTime = 1;
  if (this->_internal_buswaittime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_buswaittime(), target);
  }

  // double busVelocity = 2;
  if (!(this->_internal_busvelocity() <= 0 && this->_internal_busvelocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_busvelocity(), target);
  }

  // double pedestrianVelocity = 3;
  if (!(this->_internal_pedestrianvelocity() <= 0 && this->_internal_pedestrianvelocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_pedestrianvelocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.SerializedRoutingSettings)
  return target;
}

size_t SerializedRoutingSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.SerializedRoutingSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double busVelocity = 2;
  if (!(this->_internal_busvelocity() <= 0 && this->_internal_busvelocity() >= 0)) {
    total_size += 1 + 8;
  }

  // double pedestrianVelocity = 3;
  if (!(this->_internal_pedestrianvelocity() <= 0 && this->_internal_pedestrianvelocity() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 busWaitTime = 1;
  if (this->_internal_buswaittime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buswaittime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SerializedRoutingSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SerializedRoutingSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SerializedRoutingSettings::GetClassData() const { return &_class_data_; }

void SerializedRoutingSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SerializedRoutingSettings *>(to)->MergeFrom(
      static_cast<const SerializedRoutingSettings &>(from));
}


void SerializedRoutingSettings::MergeFrom(const SerializedRoutingSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.SerializedRoutingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_busvelocity() <= 0 && from._internal_busvelocity() >= 0)) {
    _internal_set_busvelocity(from._internal_busvelocity());
  }
  if (!(from._internal_pedestrianvelocity() <= 0 && from._internal_pedestrianvelocity() >= 0)) {
    _internal_set_pedestrianvelocity(from._internal_pedestrianvelocity());
  }
  if (from._internal_buswaittime() != 0) {
    _internal_set_buswaittime(from._internal_buswaittime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SerializedRoutingSettings::CopyFrom(const SerializedRoutingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.SerializedRoutingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedRoutingSettings::IsInitialized() const {
  return true;
}

void SerializedRoutingSettings::InternalSwap(SerializedRoutingSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedRoutingSettings, buswaittime_)
      + sizeof(SerializedRoutingSettings::buswaittime_)
      - PROTOBUF_FIELD_OFFSET(SerializedRoutingSettings, busvelocity_)>(
          reinterpret_cast<char*>(&busvelocity_),
          reinterpret_cast<char*>(&other->busvelocity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedRoutingSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[0]);
}

// ===================================================================

class SerializedStopVertexIds::_Internal {
 public:
};

SerializedStopVertexIds::SerializedStopVertexIds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.SerializedStopVertexIds)
}
SerializedStopVertexIds::SerializedStopVertexIds(const SerializedStopVertexIds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&in_, &from.in_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_) -
    reinterpret_cast<char*>(&in_)) + sizeof(out_));
  // @@protoc_insertion_point(copy_constructor:Serialization.SerializedStopVertexIds)
}

inline void SerializedStopVertexIds::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&in_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&out_) -
    reinterpret_cast<char*>(&in_)) + sizeof(out_));
}

SerializedStopVertexIds::~SerializedStopVertexIds() {
  // @@protoc_insertion_point(destructor:Serialization.SerializedStopVertexIds)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SerializedStopVertexIds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SerializedStopVertexIds::ArenaDtor(void* object) {
  SerializedStopVertexIds* _this = reinterpret_cast< SerializedStopVertexIds* >(object);
  (void)_this;
}
void SerializedStopVertexIds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedStopVertexIds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SerializedStopVertexIds::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.SerializedStopVertexIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&in_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_) -
      reinterpret_cast<char*>(&in_)) + sizeof(out_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedStopVertexIds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.SerializedStopVertexIds.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 out = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedStopVertexIds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.SerializedStopVertexIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.SerializedStopVertexIds.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 in = 2;
  if (this->_internal_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_in(), target);
  }

  // uint32 out = 3;
  if (this->_internal_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_out(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.SerializedStopVertexIds)
  return target;
}

size_t SerializedStopVertexIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.SerializedStopVertexIds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 in = 2;
  if (this->_internal_in() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_in());
  }

  // uint32 out = 3;
  if (this->_internal_out() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_out());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SerializedStopVertexIds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SerializedStopVertexIds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SerializedStopVertexIds::GetClassData() const { return &_class_data_; }

void SerializedStopVertexIds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SerializedStopVertexIds *>(to)->MergeFrom(
      static_cast<const SerializedStopVertexIds &>(from));
}


void SerializedStopVertexIds::MergeFrom(const SerializedStopVertexIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.SerializedStopVertexIds)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_in() != 0) {
    _internal_set_in(from._internal_in());
  }
  if (from._internal_out() != 0) {
    _internal_set_out(from._internal_out());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SerializedStopVertexIds::CopyFrom(const SerializedStopVertexIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.SerializedStopVertexIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedStopVertexIds::IsInitialized() const {
  return true;
}

void SerializedStopVertexIds::InternalSwap(SerializedStopVertexIds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedStopVertexIds, out_)
      + sizeof(SerializedStopVertexIds::out_)
      - PROTOBUF_FIELD_OFFSET(SerializedStopVertexIds, in_)>(
          reinterpret_cast<char*>(&in_),
          reinterpret_cast<char*>(&other->in_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedStopVertexIds::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[1]);
}

// ===================================================================

class VertexInfo::_Internal {
 public:
};

VertexInfo::VertexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.VertexInfo)
}
VertexInfo::VertexInfo(const VertexInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stopname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stopname().empty()) {
    stopname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stopname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Serialization.VertexInfo)
}

inline void VertexInfo::SharedCtor() {
stopname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VertexInfo::~VertexInfo() {
  // @@protoc_insertion_point(destructor:Serialization.VertexInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VertexInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stopname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VertexInfo::ArenaDtor(void* object) {
  VertexInfo* _this = reinterpret_cast< VertexInfo* >(object);
  (void)_this;
}
void VertexInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VertexInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VertexInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.VertexInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stopname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VertexInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stopName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stopname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.VertexInfo.stopName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VertexInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.VertexInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stopName = 1;
  if (!this->_internal_stopname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stopname().data(), static_cast<int>(this->_internal_stopname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.VertexInfo.stopName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stopname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.VertexInfo)
  return target;
}

size_t VertexInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.VertexInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stopName = 1;
  if (!this->_internal_stopname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stopname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VertexInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VertexInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VertexInfo::GetClassData() const { return &_class_data_; }

void VertexInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VertexInfo *>(to)->MergeFrom(
      static_cast<const VertexInfo &>(from));
}


void VertexInfo::MergeFrom(const VertexInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.VertexInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stopname().empty()) {
    _internal_set_stopname(from._internal_stopname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VertexInfo::CopyFrom(const VertexInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.VertexInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexInfo::IsInitialized() const {
  return true;
}

void VertexInfo::InternalSwap(VertexInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stopname_, GetArenaForAllocation(),
      &other->stopname_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[2]);
}

// ===================================================================

class BusEdgeInfo::_Internal {
 public:
};

BusEdgeInfo::BusEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.BusEdgeInfo)
}
BusEdgeInfo::BusEdgeInfo(const BusEdgeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&spancount_, &from.spancount_,
    static_cast<size_t>(reinterpret_cast<char*>(&endstopindex_) -
    reinterpret_cast<char*>(&spancount_)) + sizeof(endstopindex_));
  // @@protoc_insertion_point(copy_constructor:Serialization.BusEdgeInfo)
}

inline void BusEdgeInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spancount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&endstopindex_) -
    reinterpret_cast<char*>(&spancount_)) + sizeof(endstopindex_));
}

BusEdgeInfo::~BusEdgeInfo() {
  // @@protoc_insertion_point(destructor:Serialization.BusEdgeInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BusEdgeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BusEdgeInfo::ArenaDtor(void* object) {
  BusEdgeInfo* _this = reinterpret_cast< BusEdgeInfo* >(object);
  (void)_this;
}
void BusEdgeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BusEdgeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BusEdgeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.BusEdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&spancount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endstopindex_) -
      reinterpret_cast<char*>(&spancount_)) + sizeof(endstopindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusEdgeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.BusEdgeInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 spanCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          spancount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 startStopIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          startstopindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 endStopIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          endstopindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BusEdgeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.BusEdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.BusEdgeInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 spanCount = 2;
  if (this->_internal_spancount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_spancount(), target);
  }

  // uint32 startStopIndex = 3;
  if (this->_internal_startstopindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_startstopindex(), target);
  }

  // uint32 endStopIndex = 4;
  if (this->_internal_endstopindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_endstopindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.BusEdgeInfo)
  return target;
}

size_t BusEdgeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.BusEdgeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 spanCount = 2;
  if (this->_internal_spancount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_spancount());
  }

  // uint32 startStopIndex = 3;
  if (this->_internal_startstopindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_startstopindex());
  }

  // uint32 endStopIndex = 4;
  if (this->_internal_endstopindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_endstopindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BusEdgeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BusEdgeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BusEdgeInfo::GetClassData() const { return &_class_data_; }

void BusEdgeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BusEdgeInfo *>(to)->MergeFrom(
      static_cast<const BusEdgeInfo &>(from));
}


void BusEdgeInfo::MergeFrom(const BusEdgeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.BusEdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_spancount() != 0) {
    _internal_set_spancount(from._internal_spancount());
  }
  if (from._internal_startstopindex() != 0) {
    _internal_set_startstopindex(from._internal_startstopindex());
  }
  if (from._internal_endstopindex() != 0) {
    _internal_set_endstopindex(from._internal_endstopindex());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BusEdgeInfo::CopyFrom(const BusEdgeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.BusEdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusEdgeInfo::IsInitialized() const {
  return true;
}

void BusEdgeInfo::InternalSwap(BusEdgeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BusEdgeInfo, endstopindex_)
      + sizeof(BusEdgeInfo::endstopindex_)
      - PROTOBUF_FIELD_OFFSET(BusEdgeInfo, spancount_)>(
          reinterpret_cast<char*>(&spancount_),
          reinterpret_cast<char*>(&other->spancount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BusEdgeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[3]);
}

// ===================================================================

class WaitEdgeInfo::_Internal {
 public:
};

WaitEdgeInfo::WaitEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.WaitEdgeInfo)
}
WaitEdgeInfo::WaitEdgeInfo(const WaitEdgeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Serialization.WaitEdgeInfo)
}

inline void WaitEdgeInfo::SharedCtor() {
}

WaitEdgeInfo::~WaitEdgeInfo() {
  // @@protoc_insertion_point(destructor:Serialization.WaitEdgeInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WaitEdgeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WaitEdgeInfo::ArenaDtor(void* object) {
  WaitEdgeInfo* _this = reinterpret_cast< WaitEdgeInfo* >(object);
  (void)_this;
}
void WaitEdgeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WaitEdgeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitEdgeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.WaitEdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitEdgeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WaitEdgeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.WaitEdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.WaitEdgeInfo)
  return target;
}

size_t WaitEdgeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.WaitEdgeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitEdgeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WaitEdgeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitEdgeInfo::GetClassData() const { return &_class_data_; }

void WaitEdgeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WaitEdgeInfo *>(to)->MergeFrom(
      static_cast<const WaitEdgeInfo &>(from));
}


void WaitEdgeInfo::MergeFrom(const WaitEdgeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.WaitEdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitEdgeInfo::CopyFrom(const WaitEdgeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.WaitEdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitEdgeInfo::IsInitialized() const {
  return true;
}

void WaitEdgeInfo::InternalSwap(WaitEdgeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitEdgeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[4]);
}

// ===================================================================

class WalkEdgeInfo::_Internal {
 public:
};

WalkEdgeInfo::WalkEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.WalkEdgeInfo)
}
WalkEdgeInfo::WalkEdgeInfo(const WalkEdgeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  companyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_companyname().empty()) {
    companyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_companyname(), 
      GetArenaForAllocation());
  }
  companydisplayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_companydisplayname().empty()) {
    companydisplayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_companydisplayname(), 
      GetArenaForAllocation());
  }
  stopname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stopname().empty()) {
    stopname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stopname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Serialization.WalkEdgeInfo)
}

inline void WalkEdgeInfo::SharedCtor() {
companyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
companydisplayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stopname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WalkEdgeInfo::~WalkEdgeInfo() {
  // @@protoc_insertion_point(destructor:Serialization.WalkEdgeInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WalkEdgeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  companyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  companydisplayname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stopname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WalkEdgeInfo::ArenaDtor(void* object) {
  WalkEdgeInfo* _this = reinterpret_cast< WalkEdgeInfo* >(object);
  (void)_this;
}
void WalkEdgeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WalkEdgeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WalkEdgeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.WalkEdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  companyname_.ClearToEmpty();
  companydisplayname_.ClearToEmpty();
  stopname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WalkEdgeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string companyName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_companyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.WalkEdgeInfo.companyName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string companyDisplayName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_companydisplayname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.WalkEdgeInfo.companyDisplayName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stopName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_stopname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.WalkEdgeInfo.stopName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WalkEdgeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.WalkEdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string companyName = 1;
  if (!this->_internal_companyname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_companyname().data(), static_cast<int>(this->_internal_companyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.WalkEdgeInfo.companyName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_companyname(), target);
  }

  // string companyDisplayName = 2;
  if (!this->_internal_companydisplayname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_companydisplayname().data(), static_cast<int>(this->_internal_companydisplayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.WalkEdgeInfo.companyDisplayName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_companydisplayname(), target);
  }

  // string stopName = 3;
  if (!this->_internal_stopname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stopname().data(), static_cast<int>(this->_internal_stopname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.WalkEdgeInfo.stopName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stopname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.WalkEdgeInfo)
  return target;
}

size_t WalkEdgeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.WalkEdgeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string companyName = 1;
  if (!this->_internal_companyname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_companyname());
  }

  // string companyDisplayName = 2;
  if (!this->_internal_companydisplayname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_companydisplayname());
  }

  // string stopName = 3;
  if (!this->_internal_stopname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stopname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WalkEdgeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WalkEdgeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WalkEdgeInfo::GetClassData() const { return &_class_data_; }

void WalkEdgeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WalkEdgeInfo *>(to)->MergeFrom(
      static_cast<const WalkEdgeInfo &>(from));
}


void WalkEdgeInfo::MergeFrom(const WalkEdgeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.WalkEdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_companyname().empty()) {
    _internal_set_companyname(from._internal_companyname());
  }
  if (!from._internal_companydisplayname().empty()) {
    _internal_set_companydisplayname(from._internal_companydisplayname());
  }
  if (!from._internal_stopname().empty()) {
    _internal_set_stopname(from._internal_stopname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WalkEdgeInfo::CopyFrom(const WalkEdgeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.WalkEdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalkEdgeInfo::IsInitialized() const {
  return true;
}

void WalkEdgeInfo::InternalSwap(WalkEdgeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &companyname_, GetArenaForAllocation(),
      &other->companyname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &companydisplayname_, GetArenaForAllocation(),
      &other->companydisplayname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stopname_, GetArenaForAllocation(),
      &other->stopname_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WalkEdgeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[5]);
}

// ===================================================================

class CompaniesVertices::_Internal {
 public:
};

CompaniesVertices::CompaniesVertices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.CompaniesVertices)
}
CompaniesVertices::CompaniesVertices(const CompaniesVertices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  companyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_companyname().empty()) {
    companyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_companyname(), 
      GetArenaForAllocation());
  }
  vertexid_ = from.vertexid_;
  // @@protoc_insertion_point(copy_constructor:Serialization.CompaniesVertices)
}

inline void CompaniesVertices::SharedCtor() {
companyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vertexid_ = 0u;
}

CompaniesVertices::~CompaniesVertices() {
  // @@protoc_insertion_point(destructor:Serialization.CompaniesVertices)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CompaniesVertices::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  companyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompaniesVertices::ArenaDtor(void* object) {
  CompaniesVertices* _this = reinterpret_cast< CompaniesVertices* >(object);
  (void)_this;
}
void CompaniesVertices::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompaniesVertices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompaniesVertices::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.CompaniesVertices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  companyname_.ClearToEmpty();
  vertexid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompaniesVertices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string companyName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_companyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialization.CompaniesVertices.companyName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 vertexId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vertexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompaniesVertices::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.CompaniesVertices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string companyName = 1;
  if (!this->_internal_companyname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_companyname().data(), static_cast<int>(this->_internal_companyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialization.CompaniesVertices.companyName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_companyname(), target);
  }

  // uint32 vertexId = 2;
  if (this->_internal_vertexid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vertexid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.CompaniesVertices)
  return target;
}

size_t CompaniesVertices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.CompaniesVertices)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string companyName = 1;
  if (!this->_internal_companyname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_companyname());
  }

  // uint32 vertexId = 2;
  if (this->_internal_vertexid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vertexid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompaniesVertices::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CompaniesVertices::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompaniesVertices::GetClassData() const { return &_class_data_; }

void CompaniesVertices::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CompaniesVertices *>(to)->MergeFrom(
      static_cast<const CompaniesVertices &>(from));
}


void CompaniesVertices::MergeFrom(const CompaniesVertices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.CompaniesVertices)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_companyname().empty()) {
    _internal_set_companyname(from._internal_companyname());
  }
  if (from._internal_vertexid() != 0) {
    _internal_set_vertexid(from._internal_vertexid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompaniesVertices::CopyFrom(const CompaniesVertices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.CompaniesVertices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompaniesVertices::IsInitialized() const {
  return true;
}

void CompaniesVertices::InternalSwap(CompaniesVertices* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &companyname_, GetArenaForAllocation(),
      &other->companyname_, other->GetArenaForAllocation()
  );
  swap(vertexid_, other->vertexid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompaniesVertices::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[6]);
}

// ===================================================================

class EdgeInfo::_Internal {
 public:
  static const ::Serialization::BusEdgeInfo& busedgeinfo(const EdgeInfo* msg);
  static const ::Serialization::WaitEdgeInfo& waitedgeinfo(const EdgeInfo* msg);
  static const ::Serialization::WalkEdgeInfo& walkedgeinfo(const EdgeInfo* msg);
};

const ::Serialization::BusEdgeInfo&
EdgeInfo::_Internal::busedgeinfo(const EdgeInfo* msg) {
  return *msg->edgeInfo_.busedgeinfo_;
}
const ::Serialization::WaitEdgeInfo&
EdgeInfo::_Internal::waitedgeinfo(const EdgeInfo* msg) {
  return *msg->edgeInfo_.waitedgeinfo_;
}
const ::Serialization::WalkEdgeInfo&
EdgeInfo::_Internal::walkedgeinfo(const EdgeInfo* msg) {
  return *msg->edgeInfo_.walkedgeinfo_;
}
void EdgeInfo::set_allocated_busedgeinfo(::Serialization::BusEdgeInfo* busedgeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_edgeInfo();
  if (busedgeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Serialization::BusEdgeInfo>::GetOwningArena(busedgeinfo);
    if (message_arena != submessage_arena) {
      busedgeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, busedgeinfo, submessage_arena);
    }
    set_has_busedgeinfo();
    edgeInfo_.busedgeinfo_ = busedgeinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:Serialization.EdgeInfo.busEdgeInfo)
}
void EdgeInfo::set_allocated_waitedgeinfo(::Serialization::WaitEdgeInfo* waitedgeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_edgeInfo();
  if (waitedgeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Serialization::WaitEdgeInfo>::GetOwningArena(waitedgeinfo);
    if (message_arena != submessage_arena) {
      waitedgeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, waitedgeinfo, submessage_arena);
    }
    set_has_waitedgeinfo();
    edgeInfo_.waitedgeinfo_ = waitedgeinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:Serialization.EdgeInfo.waitEdgeInfo)
}
void EdgeInfo::set_allocated_walkedgeinfo(::Serialization::WalkEdgeInfo* walkedgeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_edgeInfo();
  if (walkedgeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Serialization::WalkEdgeInfo>::GetOwningArena(walkedgeinfo);
    if (message_arena != submessage_arena) {
      walkedgeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, walkedgeinfo, submessage_arena);
    }
    set_has_walkedgeinfo();
    edgeInfo_.walkedgeinfo_ = walkedgeinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:Serialization.EdgeInfo.walkEdgeInfo)
}
EdgeInfo::EdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.EdgeInfo)
}
EdgeInfo::EdgeInfo(const EdgeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_edgeInfo();
  switch (from.edgeInfo_case()) {
    case kBusEdgeInfo: {
      _internal_mutable_busedgeinfo()->::Serialization::BusEdgeInfo::MergeFrom(from._internal_busedgeinfo());
      break;
    }
    case kWaitEdgeInfo: {
      _internal_mutable_waitedgeinfo()->::Serialization::WaitEdgeInfo::MergeFrom(from._internal_waitedgeinfo());
      break;
    }
    case kWalkEdgeInfo: {
      _internal_mutable_walkedgeinfo()->::Serialization::WalkEdgeInfo::MergeFrom(from._internal_walkedgeinfo());
      break;
    }
    case EDGEINFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Serialization.EdgeInfo)
}

inline void EdgeInfo::SharedCtor() {
clear_has_edgeInfo();
}

EdgeInfo::~EdgeInfo() {
  // @@protoc_insertion_point(destructor:Serialization.EdgeInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EdgeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_edgeInfo()) {
    clear_edgeInfo();
  }
}

void EdgeInfo::ArenaDtor(void* object) {
  EdgeInfo* _this = reinterpret_cast< EdgeInfo* >(object);
  (void)_this;
}
void EdgeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EdgeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EdgeInfo::clear_edgeInfo() {
// @@protoc_insertion_point(one_of_clear_start:Serialization.EdgeInfo)
  switch (edgeInfo_case()) {
    case kBusEdgeInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete edgeInfo_.busedgeinfo_;
      }
      break;
    }
    case kWaitEdgeInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete edgeInfo_.waitedgeinfo_;
      }
      break;
    }
    case kWalkEdgeInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete edgeInfo_.walkedgeinfo_;
      }
      break;
    }
    case EDGEINFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EDGEINFO_NOT_SET;
}


void EdgeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.EdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_edgeInfo();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Serialization.BusEdgeInfo busEdgeInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_busedgeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Serialization.WaitEdgeInfo waitEdgeInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_waitedgeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Serialization.WalkEdgeInfo walkEdgeInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_walkedgeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EdgeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.EdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Serialization.BusEdgeInfo busEdgeInfo = 1;
  if (_internal_has_busedgeinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::busedgeinfo(this), target, stream);
  }

  // .Serialization.WaitEdgeInfo waitEdgeInfo = 2;
  if (_internal_has_waitedgeinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::waitedgeinfo(this), target, stream);
  }

  // .Serialization.WalkEdgeInfo walkEdgeInfo = 3;
  if (_internal_has_walkedgeinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::walkedgeinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.EdgeInfo)
  return target;
}

size_t EdgeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.EdgeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (edgeInfo_case()) {
    // .Serialization.BusEdgeInfo busEdgeInfo = 1;
    case kBusEdgeInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *edgeInfo_.busedgeinfo_);
      break;
    }
    // .Serialization.WaitEdgeInfo waitEdgeInfo = 2;
    case kWaitEdgeInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *edgeInfo_.waitedgeinfo_);
      break;
    }
    // .Serialization.WalkEdgeInfo walkEdgeInfo = 3;
    case kWalkEdgeInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *edgeInfo_.walkedgeinfo_);
      break;
    }
    case EDGEINFO_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdgeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EdgeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdgeInfo::GetClassData() const { return &_class_data_; }

void EdgeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EdgeInfo *>(to)->MergeFrom(
      static_cast<const EdgeInfo &>(from));
}


void EdgeInfo::MergeFrom(const EdgeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.EdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.edgeInfo_case()) {
    case kBusEdgeInfo: {
      _internal_mutable_busedgeinfo()->::Serialization::BusEdgeInfo::MergeFrom(from._internal_busedgeinfo());
      break;
    }
    case kWaitEdgeInfo: {
      _internal_mutable_waitedgeinfo()->::Serialization::WaitEdgeInfo::MergeFrom(from._internal_waitedgeinfo());
      break;
    }
    case kWalkEdgeInfo: {
      _internal_mutable_walkedgeinfo()->::Serialization::WalkEdgeInfo::MergeFrom(from._internal_walkedgeinfo());
      break;
    }
    case EDGEINFO_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdgeInfo::CopyFrom(const EdgeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.EdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeInfo::IsInitialized() const {
  return true;
}

void EdgeInfo::InternalSwap(EdgeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(edgeInfo_, other->edgeInfo_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[7]);
}

// ===================================================================

class TransportRouter::_Internal {
 public:
  static const ::Serialization::SerializedRoutingSettings& routingsettings(const TransportRouter* msg);
  static const ::Serialization::DirectedWeightedGraph& graph(const TransportRouter* msg);
  static const ::Serialization::Router& router(const TransportRouter* msg);
};

const ::Serialization::SerializedRoutingSettings&
TransportRouter::_Internal::routingsettings(const TransportRouter* msg) {
  return *msg->routingsettings_;
}
const ::Serialization::DirectedWeightedGraph&
TransportRouter::_Internal::graph(const TransportRouter* msg) {
  return *msg->graph_;
}
const ::Serialization::Router&
TransportRouter::_Internal::router(const TransportRouter* msg) {
  return *msg->router_;
}
void TransportRouter::clear_graph() {
  if (GetArenaForAllocation() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
}
void TransportRouter::clear_router() {
  if (GetArenaForAllocation() == nullptr && router_ != nullptr) {
    delete router_;
  }
  router_ = nullptr;
}
TransportRouter::TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stopvertexids_(arena),
  verticesinfo_(arena),
  edgesinfo_(arena),
  companiesvertices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Serialization.TransportRouter)
}
TransportRouter::TransportRouter(const TransportRouter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stopvertexids_(from.stopvertexids_),
      verticesinfo_(from.verticesinfo_),
      edgesinfo_(from.edgesinfo_),
      companiesvertices_(from.companiesvertices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routingsettings()) {
    routingsettings_ = new ::Serialization::SerializedRoutingSettings(*from.routingsettings_);
  } else {
    routingsettings_ = nullptr;
  }
  if (from._internal_has_graph()) {
    graph_ = new ::Serialization::DirectedWeightedGraph(*from.graph_);
  } else {
    graph_ = nullptr;
  }
  if (from._internal_has_router()) {
    router_ = new ::Serialization::Router(*from.router_);
  } else {
    router_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Serialization.TransportRouter)
}

inline void TransportRouter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&routingsettings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&router_) -
    reinterpret_cast<char*>(&routingsettings_)) + sizeof(router_));
}

TransportRouter::~TransportRouter() {
  // @@protoc_insertion_point(destructor:Serialization.TransportRouter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransportRouter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete routingsettings_;
  if (this != internal_default_instance()) delete graph_;
  if (this != internal_default_instance()) delete router_;
}

void TransportRouter::ArenaDtor(void* object) {
  TransportRouter* _this = reinterpret_cast< TransportRouter* >(object);
  (void)_this;
}
void TransportRouter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransportRouter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransportRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialization.TransportRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stopvertexids_.Clear();
  verticesinfo_.Clear();
  edgesinfo_.Clear();
  companiesvertices_.Clear();
  if (GetArenaForAllocation() == nullptr && routingsettings_ != nullptr) {
    delete routingsettings_;
  }
  routingsettings_ = nullptr;
  if (GetArenaForAllocation() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
  if (GetArenaForAllocation() == nullptr && router_ != nullptr) {
    delete router_;
  }
  router_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportRouter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Serialization.SerializedRoutingSettings routingSettings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_routingsettings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Serialization.DirectedWeightedGraph graph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Serialization.Router router = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_router(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Serialization.SerializedStopVertexIds stopVertexIds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stopvertexids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Serialization.VertexInfo verticesInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_verticesinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Serialization.EdgeInfo edgesInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edgesinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Serialization.CompaniesVertices companiesVertices = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_companiesvertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportRouter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialization.TransportRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Serialization.SerializedRoutingSettings routingSettings = 1;
  if (this->_internal_has_routingsettings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::routingsettings(this), target, stream);
  }

  // .Serialization.DirectedWeightedGraph graph = 2;
  if (this->_internal_has_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::graph(this), target, stream);
  }

  // .Serialization.Router router = 3;
  if (this->_internal_has_router()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::router(this), target, stream);
  }

  // repeated .Serialization.SerializedStopVertexIds stopVertexIds = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stopvertexids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_stopvertexids(i), target, stream);
  }

  // repeated .Serialization.VertexInfo verticesInfo = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_verticesinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_verticesinfo(i), target, stream);
  }

  // repeated .Serialization.EdgeInfo edgesInfo = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edgesinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_edgesinfo(i), target, stream);
  }

  // repeated .Serialization.CompaniesVertices companiesVertices = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_companiesvertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_companiesvertices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialization.TransportRouter)
  return target;
}

size_t TransportRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialization.TransportRouter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Serialization.SerializedStopVertexIds stopVertexIds = 4;
  total_size += 1UL * this->_internal_stopvertexids_size();
  for (const auto& msg : this->stopvertexids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Serialization.VertexInfo verticesInfo = 5;
  total_size += 1UL * this->_internal_verticesinfo_size();
  for (const auto& msg : this->verticesinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Serialization.EdgeInfo edgesInfo = 6;
  total_size += 1UL * this->_internal_edgesinfo_size();
  for (const auto& msg : this->edgesinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Serialization.CompaniesVertices companiesVertices = 7;
  total_size += 1UL * this->_internal_companiesvertices_size();
  for (const auto& msg : this->companiesvertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Serialization.SerializedRoutingSettings routingSettings = 1;
  if (this->_internal_has_routingsettings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routingsettings_);
  }

  // .Serialization.DirectedWeightedGraph graph = 2;
  if (this->_internal_has_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_);
  }

  // .Serialization.Router router = 3;
  if (this->_internal_has_router()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *router_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransportRouter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransportRouter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransportRouter::GetClassData() const { return &_class_data_; }

void TransportRouter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransportRouter *>(to)->MergeFrom(
      static_cast<const TransportRouter &>(from));
}


void TransportRouter::MergeFrom(const TransportRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialization.TransportRouter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stopvertexids_.MergeFrom(from.stopvertexids_);
  verticesinfo_.MergeFrom(from.verticesinfo_);
  edgesinfo_.MergeFrom(from.edgesinfo_);
  companiesvertices_.MergeFrom(from.companiesvertices_);
  if (from._internal_has_routingsettings()) {
    _internal_mutable_routingsettings()->::Serialization::SerializedRoutingSettings::MergeFrom(from._internal_routingsettings());
  }
  if (from._internal_has_graph()) {
    _internal_mutable_graph()->::Serialization::DirectedWeightedGraph::MergeFrom(from._internal_graph());
  }
  if (from._internal_has_router()) {
    _internal_mutable_router()->::Serialization::Router::MergeFrom(from._internal_router());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransportRouter::CopyFrom(const TransportRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialization.TransportRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRouter::IsInitialized() const {
  return true;
}

void TransportRouter::InternalSwap(TransportRouter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stopvertexids_.InternalSwap(&other->stopvertexids_);
  verticesinfo_.InternalSwap(&other->verticesinfo_);
  edgesinfo_.InternalSwap(&other->edgesinfo_);
  companiesvertices_.InternalSwap(&other->companiesvertices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportRouter, router_)
      + sizeof(TransportRouter::router_)
      - PROTOBUF_FIELD_OFFSET(TransportRouter, routingsettings_)>(
          reinterpret_cast<char*>(&routingsettings_),
          reinterpret_cast<char*>(&other->routingsettings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportRouter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Serialization
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Serialization::SerializedRoutingSettings* Arena::CreateMaybeMessage< ::Serialization::SerializedRoutingSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::SerializedRoutingSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialization::SerializedStopVertexIds* Arena::CreateMaybeMessage< ::Serialization::SerializedStopVertexIds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::SerializedStopVertexIds >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialization::VertexInfo* Arena::CreateMaybeMessage< ::Serialization::VertexInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::VertexInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialization::BusEdgeInfo* Arena::CreateMaybeMessage< ::Serialization::BusEdgeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::BusEdgeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialization::WaitEdgeInfo* Arena::CreateMaybeMessage< ::Serialization::WaitEdgeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::WaitEdgeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialization::WalkEdgeInfo* Arena::CreateMaybeMessage< ::Serialization::WalkEdgeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::WalkEdgeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialization::CompaniesVertices* Arena::CreateMaybeMessage< ::Serialization::CompaniesVertices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::CompaniesVertices >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialization::EdgeInfo* Arena::CreateMaybeMessage< ::Serialization::EdgeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::EdgeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialization::TransportRouter* Arena::CreateMaybeMessage< ::Serialization::TransportRouter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialization::TransportRouter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
